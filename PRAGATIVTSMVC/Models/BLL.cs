using System.Web.Security;
using Microsoft.Win32;
using System.Security.Cryptography;
using System;
using System.Text;
using System.Web.UI;
using System.Web;
//using Telerik.Web.UI;
using System.Data;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Configuration;
using PRAGATIVTS_MVC.Models;
using System.Data.SqlClient;
using System.Globalization;
using System.Collections.Generic;
class BLL
{

    #region Messages
    public const string msg_Saved = "Information saved successfully";
    public const string msg_Updated = "Information updated successfully";
    public const string msg_UnSaved = "Information not saved";
    public const string msg_NotUpdated = "Information not Updated";
    public const string saved = "Driver Briefing Registered";
    public const string ms_saved = "Driver De Briefing Saved";
    public string MyProperty { get; set; }

    #endregion

    #region crypto  Methods to Encrypt and Decrypt

    static string myKey = "3d5900ae-111a-45be-96b3-d9e4606ca793";
    static TripleDESCryptoServiceProvider cryptDES3 = new TripleDESCryptoServiceProvider();
    static MD5CryptoServiceProvider cryptMD5Hash = new MD5CryptoServiceProvider();

    internal static string Decrypt(string myString)
    {
        try {
            cryptDES3.Key = cryptMD5Hash.ComputeHash(ASCIIEncoding.ASCII.GetBytes(myKey));
            cryptDES3.Mode = CipherMode.ECB;
            ICryptoTransform desdencrypt = cryptDES3.CreateDecryptor();
            byte[] buff = Convert.FromBase64String(myString);
            return ASCIIEncoding.ASCII.GetString(desdencrypt.TransformFinalBlock(buff, 0, buff.Length));

        }
        catch(Exception ex)
        {
            return null;
        }
    }

    internal static string Encrypt(string myString)
    {
        cryptDES3.Key = cryptMD5Hash.ComputeHash(ASCIIEncoding.ASCII.GetBytes(myKey));
        cryptDES3.Mode = CipherMode.ECB;
        ICryptoTransform desdencrypt = cryptDES3.CreateEncryptor();
        object MyASCIIEncoding = new ASCIIEncoding();
        byte[] buff = ASCIIEncoding.ASCII.GetBytes(myString);
        return Convert.ToBase64String(desdencrypt.TransformFinalBlock(buff, 0, buff.Length));

    }

    #endregion

    internal static void ShowMessage(Control ctrl, string Msg)
    {

        ScriptManager.RegisterStartupScript(ctrl, ctrl.GetType(), Guid.NewGuid().ToString(), "alert('" + Msg + "');", true);
    }

    internal static string ReplaceQuote(string str)
    {
        return str.Replace("'", "''");
    }
    internal static void SetCulture_Theme(Page page, HttpRequest request)
    {
        //if (((System.Web.UI.TemplateControl)(page)).AppRelativeVirtualPath.ToUpper() != "~/FRMLOGINPAGE.ASPX")
        //if (page.AppRelativeVirtualPath.ToUpper() != "~/FRMLOGINPAGE_4all.ASPX")
        //{
        //    if (page.Session["USERINFO"] == null)
        //    {
        //        page.Response.Redirect("~/FRMLOGINPAGE_4all", false);
        //        return;
        //    }
        //}
        string temp = "GlossyBlue"; // Convert.ToString(ExecuteQuery(" EXEC USP_SMHR_GLOBALCONFIG @OPERATION = 'Check'").Rows[0]["GLOBALCONFIG_THEME"]);

        if (!string.IsNullOrEmpty(temp))
        {
            page.Theme = temp;
        }
        else
        {
            page.Theme = "Web20";
        }

        string culture = "Auto";
        //if (request.Form["ctl00_cmbCulture_ClientState"] != null)
        //    culture = Convert.ToString(request.Form["ctl00_cmbCulture_ClientState"]).Split(new char[] { ',' })[1].Split(new char[] { ':' })[1].Replace("\"", ""); ;
        //Use this
        page.UICulture = culture;
        page.Culture = culture;
        //OR This
        if (culture != "Auto")
        {
            System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo(culture);
            System.Threading.Thread.CurrentThread.CurrentCulture = ci;
            System.Threading.Thread.CurrentThread.CurrentUICulture = ci;
        }
    }

    internal static bool Check_Session(Page page)
    {
        string logoutPath = System.Configuration.ConfigurationManager.AppSettings["LOGOUT_TO"].ToString();

        //if (((System.Web.UI.TemplateControl)(page)).AppRelativeVirtualPath.ToUpper() != "~/FRMLOGINPAGE_4ALL.ASPX")
        if (((System.Web.UI.TemplateControl)(page)).AppRelativeVirtualPath.ToUpper() != logoutPath)
        {
            if (page.Session["USERINFO"] == null)
            {
                page.Response.Redirect(logoutPath, false);
                return false;
            }
        }
        return true;
    }

    internal static bool IsAlpha(String strToCheck)
    {
        Regex objAlphaPattern = new Regex("[a-zA-Z]");
        return objAlphaPattern.IsMatch(strToCheck);
    }

    internal static bool IsSpecial(String strToCheck)
    {
        Regex regex = new Regex("[-_/':().$?_)(*&^%#@!~`\r]");
        return regex.IsMatch(strToCheck);
    }

    internal static DataTable ExecuteQuery(string Query)
    {

        return Dal.ExecuteQuery(Query);
    }
    internal static DataTable ExecuteQuery_an(string Query)
    {

        return Dal.ExecuteQuery_Prod(Query);
    }

    internal static DataSet ExecuteQueryDataset(string Query)
    {
        return Dal.ExecuteQueryDataset(Query);
    }

    internal static bool ExecuteNonQuery(string Query)
    {
        return Dal.ExecuteNonQuery(Query);
    }

    internal static bool ExecuteNonQuery1(string Query)
    {
        return Dal.ExecuteNonQuery1(Query);
    }
    internal static bool ExecuteNonQuery2(string Query)
    {
        return Dal.ExecuteNonQuery2(Query);
    }
    internal static bool ExecuteNonQuery3(string Query, string connstr)
    {
        return Dal.ExecuteNonQuery3(Query, connstr);
    }
    internal static DataTable ExecuteQuery1(string Query)
    {
        return Dal.ExecuteQuery1(Query);
    }
    internal static DataTable ExecuteQueryDB1(string Query, string DBName)
    {
        return Dal.ExecuteQueryDB1(Query, DBName);
    }
    //internal static void ChangeDateFormat(string UserId, params Telerik.Web.UI.RadDatePicker[] controls)
    //{
    //    string TFormat = DateFormat(UserId);
    //    foreach (Telerik.Web.UI.RadDatePicker item in controls)
    //    {
    //        item.DateInput.DateFormat = TFormat;
    //    }
    //}

    //internal static void gridDateFormat(string UserId, Telerik.Web.UI.RadGrid Grid, params string[] Columns)
    //{
    //    foreach (string item in Columns)
    //    {
    //        ((GridBoundColumn)Grid.MasterTableView.GetColumn(item)).DataFormatString = "{0:" + BLL.DateFormat(UserId) + "}";
    //    }
    //}

    internal static string DateFormat(string UserId)
    {
        return "dd/MM/yyyy"; //Convert.ToString(ExecuteQuery("EXEC USP_SMHR_SECURITY @Operation ='DATE', @USERTYPE='" + UserId + "'").Rows[0]["DATEFORMAT"]);
    }

    #region "...Methods for menus..."

    //internal static DataTable get_Menus(SMVTS_USERS _obj_Smvts_Users)
    //{
    //    return ExecuteQuery(" EXEC USP_SMVTS_ROLEMAP @Operation='SELECT', @ROLEMAP_USERROLE_ID='" + _obj_Smvts_Users.USERS_ROLE_ID + "'");
    //}

    // new
    internal static DataTable get_Menus(SMVTS_USERS _obj_Smvts_Users)
    {
        return ExecuteQuery(" EXEC USP_SMVTS_ROLEMAP @Operation='SELECT', @ROLEMAP_USERROLE_ID='" + _obj_Smvts_Users.USERS_ROLE_ID + "', @ROLEMAP_CATEGORY_ID = '" + _obj_Smvts_Users.USERS_CATEGORY_ID + "'");
    }

    internal static DataTable get_Menus_Roles(SMVTS_USERS _obj_Smvts_Users)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery(" EXEC USP_SMVTS_ROLES @Operation='SELECT_ASSIGNEDFORMS', @ROLES_ROLETYPE='" + _obj_Smvts_Users.USERS_ROLE_ID + "', @ROLES_CATEGORY_ID = '" + _obj_Smvts_Users.USERS_CATEGORY_ID + "'");
        return dt;
    }

    //internal static DataTable get_Menus_CategBased(SMVTS_USERS _obj_Smvts_Users)
    //{
    //    return ExecuteQuery(" EXEC USP_SMVTS_ROLEMAP @Operation='SELECT', @ROLEMAP_USERROLE_ID='" + _obj_Smvts_Users.USERS_ROLE_ID + "', @ROLEMAP_CATEGORY_ID = '" + _obj_Smvts_Users.USERS_CATEGORY_ID + "'");
    //}

    #endregion

    internal static DataTable get_ClientDetails()
    {
        return ExecuteQuery(" EXEC USP_SHOWCLIENTDETAILS ");
    }

    internal static DataTable get_Dashboard_VehicleDetail(string VEHNO)
    {
        return ExecuteQuery(" EXEC USP_SMVTS_GRID_TRACK_VEHICLEDETAIL @VEHICLE_NO = '" + VEHNO + "'");
    }

    //internal static SMVTS_USERS get_User(string CompanyName, string UserName, string dbname)
    //{
    //    string strQry = " EXEC USP_SMVTS_USERS @Operation='CHECK_LOGIN', @USERS_USERNAME='" + ReplaceQuote(UserName) + "',@USERS_FULLNAME='" + ReplaceQuote(CompanyName) + "'";
    //    DataTable dt = null;

    //    dt = Dal.ExecuteQueryDB1(strQry, dbname);


    //    //if (dt != null)
    //    //{
    //    if (dt.Rows.Count != 0)
    //    {
    //        return new SMVTS_USERS(Convert.ToInt32(dt.Rows[0]["USERS_ID"]), Convert.ToInt32(dt.Rows[0]["USERS_ROLE_ID"]),
    //                    Convert.ToInt32(dt.Rows[0]["USERS_CATEGORY_ID"]),
    //                    Convert.ToString(dt.Rows[0]["USERS_USERNAME"]),
    //                    Convert.ToString(dt.Rows[0]["USERS_PASSWORD"]),
    //                    Convert.ToString(dt.Rows[0]["USERS_FULLNAME"]),
    //                    Convert.ToBoolean(dt.Rows[0]["USERS_STATUS"]),
    //                    Convert.ToString(dt.Rows[0]["USERS_DEVICE_IDS"]),
    //                    Convert.ToString(dt.Rows[0]["LOGOS_NAME"]),         //LOGOS Header
    //                    Convert.ToString(dt.Rows[0]["LOGOS_URL"]),          //LOGOS Header URL
    //                    Convert.ToString(dt.Rows[1]["LOGOS_NAME"]),         //LOGOS
    //                    Convert.ToString(dt.Rows[1]["LOGOS_URL"]),          //LOGOS URL
    //                    Convert.ToString(dt.Rows[0]["ROLES_FORMSID"]),
    //                    Convert.ToString(dt.Rows[0]["ROLES_COLUMNIDS"]),       //Forms id
    //                    Convert.ToInt32(dt.Rows[0]["COUNTRY_TIMEZONE"]),
    //                    ""
    //            //  TimeZone 
    //                    );
    //    }
    //    else
    //    {
    //        return null;
    //    }
    //    //}
    //    //else
    //    //    return null;
    //}



    // For all users
    // static string strConn_PROD = BLL.Decrypt(ConfigurationManager.ConnectionStrings["connection_PROD"].ToString());
    // static string strConn_TEST = BLL.Decrypt(ConfigurationManager.ConnectionStrings["connection_TEST"].ToString());
    //static string strConn_DEVDB = BLL.Decrypt(ConfigurationManager.ConnectionStrings["connection_DEVDB"].ToString());

    //internal static SMVTS_USERS get_User4all(string CompanyName, string UserName)
    //{
    //    string strQry = " EXEC USP_SMVTS_USERS @Operation='CHECK_LOGIN', @USERS_USERNAME='" + ReplaceQuote(UserName) + "',@USERS_FULLNAME='" + ReplaceQuote(CompanyName) + "'";
    //    DataTable dt  = null;

    //   // if (CompanyName.ToUpper() == "TEST" || (CompanyName.ToUpper() == "DHANUSH" && UserName.ToUpper() == "ADMIN"))
    //       dt = Dal.ExecuteQuery_4all(strConn_TEST, strQry);
    //    //else if (CompanyName.ToUpper() == "LIVETEST" || (CompanyName.ToUpper() == "DHANUSH" && UserName.ToUpper() == "ADMINLIVE"))
    //    //    dt = Dal.ExecuteQuery_4all(strConn_TEST, strQry);
    //    //else
    //    //    dt = Dal.ExecuteQuery_4all(strConn_PROD, strQry);


    //    if (dt != null)
    //    {
    //        if (dt.Rows.Count != 0)
    //        {
    //            return new SMVTS_USERS(Convert.ToInt32(dt.Rows[0]["USERS_ID"]), Convert.ToInt32(dt.Rows[0]["USERS_ROLE_ID"]),
    //                        Convert.ToInt32(dt.Rows[0]["USERS_CATEGORY_ID"]),
    //                        Convert.ToString(dt.Rows[0]["USERS_USERNAME"]),
    //                        Convert.ToString(dt.Rows[0]["USERS_PASSWORD"]),
    //                        Convert.ToString(dt.Rows[0]["USERS_FULLNAME"]),
    //                        Convert.ToBoolean(dt.Rows[0]["USERS_STATUS"]),
    //                        Convert.ToString(dt.Rows[0]["USERS_DEVICE_IDS"]),
    //                        Convert.ToString(dt.Rows[0]["LOGOS_NAME"]),         //LOGOS Header
    //                        Convert.ToString(dt.Rows[0]["LOGOS_URL"]),          //LOGOS Header URL
    //                        Convert.ToString(dt.Rows[1]["LOGOS_NAME"]),         //LOGOS
    //                        Convert.ToString(dt.Rows[1]["LOGOS_URL"]),          //LOGOS URL
    //                        Convert.ToString(dt.Rows[0]["ROLES_FORMSID"]),
    //                        Convert.ToString(dt.Rows[0]["ROLES_COLUMNIDS"])        //Forms id
    //                        );
    //        }
    //        else
    //        {
    //            return null;
    //        }
    //    }
    //    else
    //        return null;
    //}

    internal static SMVTS_USERS get_User(string CompanyName, string UserName, string dbname)
    {
        string strQry = "EXEC USP_SMVTS_USERS @Operation='CHECK_LOGIN', @USERS_USERNAME='" + ReplaceQuote(UserName) + "',@USERS_FULLNAME='" + ReplaceQuote(CompanyName) + "'";
        DataTable dt = null;

        dt = Dal.ExecuteQueryDB1(strQry, dbname);


        //if (dt != null)
        //{
        if (dt.Rows.Count != 0)
        {
            return new SMVTS_USERS(Convert.ToInt32(dt.Rows[0]["USERS_ID"]), Convert.ToInt32(dt.Rows[0]["USERS_ROLE_ID"]),
                        Convert.ToInt32(dt.Rows[0]["USERS_CATEGORY_ID"]),
                        Convert.ToString(dt.Rows[0]["USERS_USERNAME"]),
                        Convert.ToString(dt.Rows[0]["USERS_PASSWORD"]),
                        Convert.ToString(dt.Rows[0]["USERS_FULLNAME"]),
                        Convert.ToString(dt.Rows[0]["USERS_STATUS"]),
                        Convert.ToString(dt.Rows[0]["USERS_DEVICE_IDS"]),
                       Convert.ToString(dt.Rows[0]["LOGOS_NAME"]),         //LOGOS Header
                       Convert.ToString(dt.Rows[0]["LOGOS_URL"]),          //LOGOS Header URL
                       Convert.ToString(dt.Rows[1]["LOGOS_NAME"]),         //LOGOS
                        Convert.ToString(dt.Rows[1]["LOGOS_URL"]),          //LOGOS URL
                        Convert.ToString(dt.Rows[0]["ROLES_FORMSID"]),
                        Convert.ToString(dt.Rows[0]["ROLES_COLUMNIDS"]),       //Forms id
                        Convert.ToInt32(dt.Rows[0]["COUNTRY_TIMEZONE"]),
                        "",
                        Convert.ToString(dt.Rows[0]["CATEG_NAME"]),
                        Convert.ToInt32(dt.Rows[0]["categ_catetype_id"]),
                        Convert.ToString(dt.Rows[0]["categ_mobilenumber"])

                        //  TimeZone 
                        );
        }
        else
        {
            return null;
        }
        //}
        //else
        //    return null;
    }
    //to get vendor code

    public string GetSMS_VendorCode2(string FormName)
    {
        SMVTS_SENDSMS_VENDORCODE vendorsobj = new SMVTS_SENDSMS_VENDORCODE();

        vendorsobj.VENDOR_CODE = new BLL().GetSMS_VendorCode(FormName);
        if (vendorsobj.VENDOR_CODE == "")
            return "";
        else
            return vendorsobj.VENDOR_CODE;
    }


    internal string GetSMS_VendorCode(string form)
    {
        // string strQry = " EXEC USP_SMVTS_USERS @Operation='CHECK_LOGIN', @USERS_USERNAME='" + ReplaceQuote(UserName) + "',@USERS_FULLNAME='" + ReplaceQuote(CompanyName) + "'";
        string strQry = " EXEC usp_smvts_sendsms_vendorcode @FORM_NAME='" + form + "'";
        DataTable dt = null;
        string dbname = "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCLQOZCWJCgdbGhTWCzxCZGL4CY+O3mKqzXfd60oum+YaATXejNpf60UccZw/xfz9gbvinLUYnP6shgdIMQicpZqyJMAysRhs0NPugSf85OK8=";

        dt = Dal.ExecuteQueryDB1(strQry, dbname);


        //if (dt != null)
        //{
        if (dt.Rows.Count != 0)
        {
            return Convert.ToString(dt.Rows[0]["VENDOR_CODE"]);
        }
        else
        {
            return "";
        }
        //}
        //else
        //    return null;
    }


    //permissions
    //Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCAdMIZabw3xnGhTWCzxCZGPZci3Qc0pOVmLlTiHgpELIGM8bIBvXogdgtuJet9N+gJ8e0oq3LAugzheMJdRbTSRcYZXckwWEDmL63k92fgCCni2yT8uW12UaiNParCbIW4MfM7CkPJ+p4SPNrA0DwPbn6QVGCs3O6

    string dbname01 = "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCAdMIZabw3xnGhTWCzxCZGPZci3Qc0pOVmLlTiHgpELIGM8bIBvXogdgtuJet9N+gJ8e0oq3LAugzheMJdRbTSRcYZXckwWEDmL63k92fgCCni2yT8uW12UaiNParCbIW4MfM7CkPJ+p4SPNrA0DwPbn6QVGCs3O6";

    public List<PVTS_CATEGORIES> GETALL_USERS()
    {
        List<PVTS_CATEGORIES> obj = new List<PVTS_CATEGORIES>();

        string strQry = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='GETALL_USERS'";
        DataTable dt = null;

        dt = BLL.ExecuteQueryDB1(strQry, dbname01);

        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                obj.Add(new PVTS_CATEGORIES
                {
                    USER_ID = Convert.ToInt32(dt.Rows[i]["USER_ID"]),
                    USER_NAME = dt.Rows[i]["USER_NAME"].ToString(),
                    ROLE_NAME = dt.Rows[i]["ROLE_NAME"].ToString(),
                    CATEG_NAME = dt.Rows[i]["CATEG_NAME"].ToString(),
                    USER_STATUS = Convert.ToInt32(dt.Rows[i]["USER_STATUS"]),
                    USER_PASSWORD = dt.Rows[i]["USER_PASSWORD"].ToString(),
                    USER_EMAILID = dt.Rows[i]["USER_EMAILID"].ToString(),
                    USER_IMAGE = dt.Rows[i]["USER_IMAGE"].ToString(),
                    MESSAGE = "SUCCESS",
                });
            }
        }
        else
        {
            obj.Add(new PVTS_CATEGORIES
            {
                MESSAGE = "FAILED",
            });

        }

        return obj;
    }

    public List<PVTS_CATEGORIES> GETALL_PAGES()
    {
        List<PVTS_CATEGORIES> obj = new List<PVTS_CATEGORIES>();

        string strQry = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='GETALL_PAGES'";
        DataTable dt = null;

        dt = BLL.ExecuteQueryDB1(strQry, dbname01);

        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                obj.Add(new PVTS_CATEGORIES
                {
                    PAGE_ID = Convert.ToInt32(dt.Rows[i]["PAGE_ID"]),
                    PAGE_STATUS = Convert.ToInt32(dt.Rows[i]["PAGE_STATUS"]),
                    PAGE_UNDER = dt.Rows[i]["PAGE_UNDER"].ToString(),
                    PAGE_NAME = dt.Rows[i]["PAGE_NAME"].ToString(),
                    ICON=dt.Rows[i]["ICON"].ToString(),
                    PAGE_PATH = dt.Rows[i]["PAGE_PATH"].ToString(),
                    MESSAGE = "SUCCESS",
                });
            }
        }
        else
        {
            obj.Add(new PVTS_CATEGORIES
            {
                MESSAGE = "FAILED",
            });

        }

        return obj;
    }
    public bool CREATE_PAGES(string PAGE_NAME, int PAGE_CREATEDBY, string PAGE_UNDER)
    {
        bool b = false;
        string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='CREATE_PAGES',@PAGE_NAME='" + PAGE_NAME + "',@PAGE_CREATEDBY=" + PAGE_CREATEDBY + ",@PAGE_UNDER='" + PAGE_UNDER + "'";

        b = BLL.ExecuteNonQuery3(Query, dbname01);
        return b;
    }
    public bool UPDATE_PAGES_STATUS(int PAGE_STATUS, int PAGE_ID)
    {
        bool b = false;
        string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='UPDATE_PAGES_STATUS',@PAGE_STATUS='" + PAGE_STATUS + "',@PAGE_ID=" + PAGE_ID + "";
        b = BLL.ExecuteNonQuery3(Query, dbname01);
        return b;
    }
    public bool PAGE_UPDATE(string PAGE_NAME, string PAGE_UNDER, int PAGE_UPDATEDBY, int PAGE_ID)
    {
        bool b = false;
        string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='PAGE_UPDATE',@PAGE_NAME='" + PAGE_NAME + "',@PAGE_UNDER='" + PAGE_UNDER + "',@PAGE_UPDATEDBY=" + PAGE_UPDATEDBY + ",@PAGE_ID=" + PAGE_ID + "";
        b = BLL.ExecuteNonQuery3(Query, dbname01);
        return b;
    }
    public bool CREATE_PERMISSIONS(int categid, string name, string view, string edit, string create)
    {

        string[] names = name.Split(',');
        string[] views = view.Split(',');
        string[] editd = edit.Split(',');
        string[] creates = create.Split(',');
        bool b = false;
        for (int i = 0; i < names.Length; i++)
        {
            string dash = names[i];
            string viewdata = views[i];
            string editdata = editd[i];
            string createdata = creates[i];
            string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='CREATE_PERMISSIONS',@CATEG_ID=" + categid + ",@PAGE_NAME='" + dash + "',@PP_VIEW=" + viewdata + ",@PP_EDIT=" + editdata + ",@PP_CREATE=" + createdata + "";
            b = BLL.ExecuteNonQuery3(Query, dbname01);
        }
        return b;
    }
    public bool UPDATE_PERMISSIONS(string name, string view, string edit, string create, int categid)
    {

        string[] names = name.Split(',');
        string[] views = view.Split(',');
        string[] editd = edit.Split(',');
        string[] creates = create.Split(',');
        bool b = false;
        for (int i = 0; i < names.Length; i++)
        {
            string dash = names[i];
            string viewdata = views[i];
            string editdata = editd[i];
            string createdata = creates[i];

            string strQry = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='CHECK_USER_PERMISSIONS',@CATEG_ID=" + categid + "";
            DataTable dt = null;
            dt = BLL.ExecuteQueryDB1(strQry, dbname01);
            string PAGE_NAME = "";
            try
            {
                PAGE_NAME = dt.Rows[i]["PAGE_NAME"].ToString();
                if (PAGE_NAME == dash)
                {
                    string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='UPDATE_PERMISSIONS',@PAGE_NAME='" + dash + "',@PP_VIEW=" + viewdata + ",@PP_EDIT=" + editdata + ",@PP_CREATE=" + createdata + ",@CATEG_ID=" + categid + "";
                    b = BLL.ExecuteNonQuery3(Query, dbname01);
                }
            }
            catch (Exception ex)
            {
                string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='CREATE_PERMISSIONS',@CATEG_ID=" + categid + ",@PAGE_NAME='" + dash + "',@PP_VIEW=" + viewdata + ",@PP_EDIT=" + editdata + ",@PP_CREATE=" + createdata + "";
                b = BLL.ExecuteNonQuery3(Query, dbname01);
            }





        }
        return b;
    }
    public List<PVTS_CATEGORIES> GETALL_PAGE_PERMISSIONS(int CATEG_ID)
    {
        List<PVTS_CATEGORIES> obj = new List<PVTS_CATEGORIES>();

        string strQry = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='CHECK_USER_PERMISSIONS',@CATEG_ID=" + CATEG_ID + "";
        DataTable dt = null;

        dt = BLL.ExecuteQueryDB1(strQry, dbname01);

        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                obj.Add(new PVTS_CATEGORIES
                {
                    PP_ID = Convert.ToInt32(dt.Rows[i]["PP_ID"]),
                    PAGE_NAME = dt.Rows[i]["PAGE_NAME"].ToString(),
                    PP_VIEW = Convert.ToInt32(dt.Rows[i]["PP_VIEW"]),
                    PP_EDIT = Convert.ToInt32(dt.Rows[i]["PP_EDIT"]),
                    PP_CREATE = Convert.ToInt32(dt.Rows[i]["PP_CREATE"]),
                    PAGE_UNDER = dt.Rows[i]["PAGE_UNDER"].ToString(),
                    PAGE_PATH = dt.Rows[i]["PAGE_PATH"].ToString(),
                    PAGE_STATUS = Convert.ToInt32(dt.Rows[i]["PAGE_STATUS"]),
                    PAGE_DISPLAYNAME = dt.Rows[i]["PAGE_DISPLAYNAME"].ToString(),
                    MESSAGE = "SUCCESS",
                });
            }
        }
        else
        {
            obj.Add(new PVTS_CATEGORIES
            {
                MESSAGE = "FAILED",
            });

        }

        return obj;
    }
    public List<PVTS_CATEGORIES> PERMISSIONS_PAGENAME(int USER_ID, string PAGE_NAME)
    {
        List<PVTS_CATEGORIES> obj = new List<PVTS_CATEGORIES>();

        string strQry = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='PERMISSIONS_PAGENAME',@USER_ID=" + USER_ID + ",@PAGE_NAME='" + PAGE_NAME + "'";
        DataTable dt = null;

        dt = BLL.ExecuteQueryDB1(strQry, dbname01);

        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                obj.Add(new PVTS_CATEGORIES
                {
                    PP_ID = Convert.ToInt32(dt.Rows[i]["PP_ID"]),
                    PAGE_NAME = dt.Rows[i]["PAGE_NAME"].ToString(),
                    PP_VIEW = Convert.ToInt32(dt.Rows[i]["PP_VIEW"]),
                    PP_EDIT = Convert.ToInt32(dt.Rows[i]["PP_EDIT"]),
                    PP_CREATE = Convert.ToInt32(dt.Rows[i]["PP_CREATE"]),
                    MESSAGE = "SUCCESS",
                });
            }
        }
        else
        {
            obj.Add(new PVTS_CATEGORIES
            {
                MESSAGE = "FAILED",
            });

        }

        return obj;
    }
   
    public bool CREATE_PANEL(string PANEL_NAME, int PANEL_CREATEDBY)
    {
        bool b = false;
        string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='CREATE_PANEL',@PANEL_NAME='" + PANEL_NAME + "',@PANEL_CREATEDBY=" + PANEL_CREATEDBY + "";

        b = BLL.ExecuteNonQuery3(Query, dbname01);
        return b;
    }
    public bool UPDATE_PANEL_STATUS(string PANEL_STATUS, int PANEL_UPDATEDBY, int PANEL_ID)
    {
        bool b = false;
        string Query = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='UPDATE_PANEL_STATUS',@PANEL_STATUS='" + PANEL_STATUS + "',@PANEL_UPDATEDBY=" + PANEL_UPDATEDBY + ",@PANEL_ID=" + PANEL_ID + "";

        b = BLL.ExecuteNonQuery3(Query, dbname01);
        return b;
    }




    public List<PVTS_CATEGORIES> GETALL_PANELS()
    {
        List<PVTS_CATEGORIES> obj = new List<PVTS_CATEGORIES>();

        string strQry = "EXEC SP_PVTS_CREATEADMINPANEL @Operation='GETALL_PANEL'";
        DataTable dt = null;

        dt = BLL.ExecuteQueryDB1(strQry, dbname01);

        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                obj.Add(new PVTS_CATEGORIES
                {
                    PANEL_ID = Convert.ToInt32(dt.Rows[i]["PANEL_ID"]),
                    PANEL_NAME = dt.Rows[i]["PANEL_NAME"].ToString(),
                    PANEL_STATUS = Convert.ToInt32(dt.Rows[i]["PANEL_STATUS"]),
                    ICON = dt.Rows[i]["ICON"].ToString(),
                    MESSAGE = "SUCCESS",
                });
            }
        }
        else
        {
            obj.Add(new PVTS_CATEGORIES
            {
                MESSAGE = "FAILED",
            });

        }

        return obj;
    }

  
   
    //permissions






    public static DataTable get_trip(int categid)
    {
        DataTable dt_trip = new DataTable();
        dt_trip = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTTRIP',@CATEG_ID='" + categid + "'");
        return dt_trip;
    }
    public static DataTable get_trip_partner(int categid, int userid)
    {
        DataTable dt_trip = new DataTable();
        dt_trip = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTPARTNERTRIP',@CATEG_ID='" + categid + "',@users_id='" + userid + "'");
        return dt_trip;
    }
    public static DataTable GET_DRIVERS(SMVTS_DRIVERS OBJ_DRIVERS)
    {
        DataTable dt_driver = new DataTable();
        dt_driver = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTDRIVERS',@DRIVER_NAME='" + OBJ_DRIVERS.DRIVER_NAME + "',@CATEG_ID=" + OBJ_DRIVERS.DRIVER_CATEGORY_ID + " ");
        return dt_driver;
    }

    public static DataTable GET_DRIVERS_partner(int userid, string name)
    {
        DataTable dt_driver = new DataTable();
        dt_driver = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTDRIVERPARTNER',@DRIVER_NAME='" + name + "',@users_id=" + userid + " ");
        return dt_driver;
    }

    internal static DataTable get_shifttimings(int cATEG_ID)
    {
        throw new NotImplementedException();
    }

    public static DataTable get_modes(int categid)
    {
        DataTable dt_mode = new DataTable();
        dt_mode = BLL.ExecuteQuery("select * from PVTS_MODEOFBRIEFING");
        return dt_mode;
    }

    public static DataTable CHECK_TRIPSTATUS(int driverid)
    {
        DataTable dt_check = new DataTable();
        dt_check = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='CHECKTRIP',@TRIPINFO_DRIVERID=" + driverid + " ");
        return dt_check;
    }

    public static DataTable get_drivers_category(int categid)
    {
        DataTable dt_drivers = new DataTable();
        dt_drivers = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTDEVICES',@DEVICE_CATEGORY_ID=" + categid + " ");
        return dt_drivers;
    }
    public static DataTable get_drivers_category_patner(int userid)
    {
        DataTable dt_drivers = new DataTable();
        dt_drivers = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTPARTNERDEVICES',@users_id=" + userid + " ");
        return dt_drivers;
    }
    public static DataTable get_locations(int categid)
    {
        DataTable dt_locations = new DataTable();
        dt_locations = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTLOCATION',@DEVICE_CATEGORY_ID=" + categid + " ");
        return dt_locations;
    }

    public static DataTable get_locations_partner(int userid)
    {
        DataTable dt_locations = new DataTable();
        dt_locations = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTPARTNERLOCATION',@users_id=" + userid + " ");
        return dt_locations;
    }

    public static DataTable GETDRIVERDETAILS(int driverid)
    {
        DataTable dt = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTDRIVER',@DRIVER_ID=" + driverid + "");
        return dt;
    }

    public static DataTable CHECK_VOILATIONS(int driverid)
    {
        DataTable dt_check = new DataTable();
        dt_check = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='CHECKVOILATIONS',@TRIPINFO_DRIVERID=" + driverid + " ");
        return dt_check;
    }


    public static DataTable check_tripid(long tripid)
    {
        DataTable dt = new DataTable();

        dt = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='CHECKTRIPID',@TRIPINFO_TRIPID=" + tripid + "");
        return dt;
    }

    public static bool set_briefing(PVTS_TRIPINFO obj_tripinfo)
    {
        bool status = false;
        status = BLL.ExecuteNonQuery("EXEC USP_PVTS_CASTROL @OPERATION='INSERT',@TRIPINFO_TRIPID='" + obj_tripinfo.TRIPINFO_TRIPID + "',@TRIPINFO_VNO='" + obj_tripinfo.TRIPINFO_VNO + "',@TRIPINFO_VDEVICEID='" + obj_tripinfo.TRIPINFO_VDEVICEID + "',@TRIPINFO_DRIVERNAME='" + obj_tripinfo.TRIPINFO_DRIVERNAME + "',@TRIPINFO_DRIVERID='" + obj_tripinfo.TRIPINFO_DRIVERID + "',@TRIPINFO_DRIVER_PASSPORTNO='" + obj_tripinfo.TRIPINFO_DRIVER_PASSPORTNO + "',@TRIPINFO_CLEANER_PASSPORTNAME='" + obj_tripinfo.TRIPINFO_CLEANER_PASSPORTNAME + "',@TRIPINFO_CLEANER_PASSPORTNO='" + obj_tripinfo.TRIPINFO_CLEANER_PASSPORTNO + "',@TRIPINFO_REG_DRIVERMOBILE='" + obj_tripinfo.TRIPINFO_REG_DRIVERMOBILE + "',@TRIPINFO_STARTID='" + obj_tripinfo.TRIPINFO_STARTID + "',@TRIPINFO_ENDID='" + obj_tripinfo.TRIPINFO_ENDID + "',@TRIPINFO_CASTROLROUTE_ID='" + obj_tripinfo.TRIPINFO_CASTROLROUTE_ID + "',@TRIPINFO__JP_ID='" + obj_tripinfo.TRIPINFO__JP_ID + "',@TRIPINFO_OS_VALUE='" + obj_tripinfo.TRIPINFO_OS_VALUE + "',@TRIPINFO_RA_VALUE='" + obj_tripinfo.TRIPINFO_RA_VALUE + "',@TRIPINFO_RD_VALUE='" + obj_tripinfo.TRIPINFO_RD_VALUE + "',@TRIPINFO_ND_VALUE='" + obj_tripinfo.TRIPINFO_ND_VALUE + "',@TRIPINFO_CD_VALUE='" + obj_tripinfo.TRIPINFO_CD_VALUE + "',@TRIPINFO_TRIPSTATUS='" + obj_tripinfo.TRIPINFO_TRIPSTATUS + "',@TRIPINFO_STARTDATE='" + obj_tripinfo.TRIPINFO_STARTDATE + "',@TRIPINFO_EXPECTEDDATE='" + obj_tripinfo.TRIPINFO_EXPECTEDDATE + "',@TRIPINFO_DELIVERYDATE='" + obj_tripinfo.TRIPINFO_DELIVERYDATE + "',@TRIPINFO_CLOSINGDATE='" + obj_tripinfo.TRIPINFO_CLOSINGDATE + "',@TRIPINFO_CATEGID='" + obj_tripinfo.TRIPINFO_CATEGID + "',@TRIPINFO_CAUTIONMESSAGE='" + obj_tripinfo.TRIPINFO_CAUTIONMESSAGE + "',@TRIPINFO_GOAL_ID='" + obj_tripinfo.TRIPINFO_GOAL_ID + "',@TRIPINFO_GOALCONVERSATION='" + obj_tripinfo.TRIPINFO_GOALCONVERSATION + "',@TRIPINFO_MODEOFBRIEFINGTEXT='" + obj_tripinfo.TRIPINFO_MODEOFBRIEFINGTEXT + "',@TRIPINFO_INCIDENT_ID='" + obj_tripinfo.TRIPINFO_INCIDENT_ID + "',@TRIPINFO_DMCINPUT_ID='" + obj_tripinfo.TRIPINFO_DMCINPUT_ID + "',@TRIPINFO_TRAINERINPUT_ID='" + obj_tripinfo.TRIPINFO_TRAINERINPUT_ID + "'");
        return status;
    }
    internal static bool CheckRecords(string LANDMARK, string VEHICLENO)
    {
        DataTable dt = ExecuteQuery("EXEC SMVTS_CHECK_LANDMARKS @LANDMARK ='" + LANDMARK + "', @VEHICLENO='" + VEHICLENO + "'");
        if (dt.Rows.Count > 0)
            return true;
        else
            return false;
    }

    public static DataTable Get_training(int categid, int driverid)
    {
        DataTable dt_training = new DataTable();

        dt_training = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTTRAINING',@CATEG_ID=" + categid + ",@DRIVER_ID=" + driverid + " ");
        return dt_training;
    }
    public static DataTable Get_training_partner(int userid, int driverid)
    {
        DataTable dt_training = new DataTable();

        dt_training = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTPARTNERTRAINING',@users_id=" + userid + ",@DRIVER_ID=" + driverid + " ");
        return dt_training;
    }
    public static DataTable get_medical(int categid, int driverid)
    {
        DataTable dt_medical = new DataTable();

        dt_medical = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTMEDICAL',@CATEG_ID=" + categid + ",@DRIVER_ID=" + driverid + " ");
        return dt_medical;
    }
    public static DataTable get_medical_partner(int userid, int driverid)
    {
        DataTable dt_medical = new DataTable();

        dt_medical = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTPARTNERMEDICAL',@users_id=" + userid + ",@DRIVER_ID=" + driverid + " ");
        return dt_medical;
    }
    public static DataTable get_passport(int categid, int driverid)
    {
        DataTable dtpassport = new DataTable();

        dtpassport = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTPASSPORT',@CATEG_ID=" + categid + ",@DRIVER_ID=" + driverid + " ");
        return dtpassport;
    }
    public static DataTable get_passport_partner(int userid, int driverid)
    {
        DataTable dtpassport = new DataTable();

        dtpassport = BLL.ExecuteQuery("EXEC USP_PVTS_CASTROLOPERATION @OPERATION='SELECTPARTNERPASSPORT',@users_id=" + userid + ",@DRIVER_ID=" + driverid + " ");
        return dtpassport;
    }
    internal static DataTable getentrydata()
    {
        DataTable dt = ExecuteQuery("select * from SMVTS_LORRY_ENTRY ORDER BY LENTRY_ID DESC");
        return dt;
    }
    internal static DataTable get_Tracking(string Operation, string Users_ID, string Category_ID, string Device_ID)
    {
        DataTable dt_Tracking = new DataTable();

        switch (Operation.ToUpper())
        {
            case "DEVICES":
                dt_Tracking = ExecuteQuery("EXEC USP_SMVTS_TRACKING @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
                break;
            case "GETALL":
                dt_Tracking = ExecuteQuery("EXEC USP_SMVTS_TRACKING @Operation ='GETALL', @USERS_ID='" + Users_ID + "'");
                break;

            case "GETALL1":
                dt_Tracking = ExecuteQuery("EXEC USP_SMVTS_TRACKING @Operation ='GETALL1', @USERS_ID='" + Users_ID + "'");
                break;

            case "POINTS":
                //dt_Tracking = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
                dt_Tracking = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2' ");
                break;
            case "GETLOC":
                dt_Tracking = Dal.ExecuteQuery_Prod(" EXEC USP_SMVTS_TRACKING @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @USERS_ID = '" + Users_ID + "'");
                break;
            case "GETLOC_BAJAJ":
                dt_Tracking = ExecuteQuery(" EXEC SP_TRACK_BAJAJIB  @DEVICE_ID='" + Device_ID + "', @USERS_ID = '" + Users_ID + "'");
                break;
            case "GETLOC_TEST":  //kept temperory for checking the new functionaly with dhanush login
                dt_Tracking = Dal.ExecuteQuery_Prod(" EXEC USP_SMVTS_TRACKING @Operation ='lOCATION_TEST', @DEVICE_ID='" + Device_ID + "', @USERS_ID = '" + Users_ID + "'");
                break;
            case "LATLNGFORPOPUP":
                dt_Tracking = ExecuteQuery(" EXEC USP_SMVTS_TRACKING @Operation ='LATLNGFORPOPUP', @DEVICE_ID='" + Device_ID + "'");
                break;
            default:
                break;
        }
        return dt_Tracking;
    }

    //PRADEEP

    internal static DataTable get_Tracking_workorders(int UserId,int Workorderid)
    {
        DataTable dt_CheckData = new DataTable();
        try
        {
            dt_CheckData = ExecuteQuery("EXEC USP_SMVTS_TRACKING @Operation ='GETALL_WORKORDERS',@USERS_ID=" + UserId + ",@TRIP_WORKORDER_ID=" + Workorderid + " ");
        }
        catch
        {

        }   
               
        return dt_CheckData;
    }




    internal static DataTable get_CheckData(string Operation)
    {
        DataTable dt_CheckData = new DataTable();

        switch (Operation.ToUpper())
        {
            case "TRIPDATA":
                dt_CheckData = ExecuteQuery("EXEC USP_SMVTS_CHECKDATA @Mode= 'TRIPDATA' ");
                break;

            case "RAWDATA":
                dt_CheckData = ExecuteQuery("EXEC USP_SMVTS_CHECKDATA @Mode= 'RAWDATA' ");
                break;

            default:
                break;
        }
        return dt_CheckData;
    }
    internal static DataTable get_TripHistory_DB(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate, string dbname)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {
            case "DEVICES":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_TRIPHISTORY @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
                break;
            case "POINTS":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
                break;
            case "GETLOC":
                dt_TripHistory = Dal.ExecuteQueryDB1(" EXEC USP_SMVTS_TRIPHISTORY @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'", dbname);
                break;
            default:
                break;
        }
        return dt_TripHistory;
    }
    internal static DataTable get_TripHistory(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {
            case "DEVICES":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_TRIPHISTORY @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
                break;
            case "POINTS":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
                break;
            case "GETLOC":
                dt_TripHistory = Dal.ExecuteQuery_Prod(" EXEC USP_SMVTS_TRIPHISTORY @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'");
                break;
            case "TOLLINFO":
                dt_TripHistory = ExecuteQuery(" EXEC USP_SMVTS_TRIPHISTORY @Operation ='TOLLINFO', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'");
                break;
            default:
                break;
        }
        return dt_TripHistory;
    }


    //by venkatesh archive tollgate mapping for dgfc 25-09-2017
    internal static DataTable get_TripHistory_archive(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {
            case "DEVICES":
                dt_TripHistory = ExecuteQuery("EXEC Usp_smvts_triphistory_ARCHVE @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
                break;
            case "POINTS":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
                break;
            case "GETLOC":
                dt_TripHistory = ExecuteQuery(" EXEC Usp_smvts_triphistory_ARCHVE @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'");
                break;
            case "TOLLINFO":
                dt_TripHistory = ExecuteQuery(" EXEC Usp_smvts_triphistory_ARCHVE @Operation ='TOLLINFO', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'");
                break;
            default:
                break;
        }
        return dt_TripHistory;
    }


    //by venkatesh archive track history 01-08-2017
    internal static DataTable get_TripHistory_archivetrackhistory(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {
            //case "DEVICES":
            //    dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_TRIPHISTORY @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
            //    break;
            //case "POINTS":
            //    dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
            //    break;
            case "GETLOC":
                dt_TripHistory = ExecuteQuery(" EXEC Usp_smvts_triphistory_ARCHVE @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'");
                break;
            //case "TOLLINFO":
            //    dt_TripHistory = ExecuteQuery(" EXEC USP_SMVTS_TRIPHISTORY @Operation ='TOLLINFO', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'");
            //    break;
            default:
                break;
        }
        return dt_TripHistory;
    }

    #region Methods for Reports

    internal static DataTable get_TripData(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string interval)
    {
        //return ExecuteQuery("EXEC RPT_USP_TRIPDATA  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //                   + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
        return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @MININTERVAL=" + interval);//", @STARTDATE ="
    }
    internal static DataTable get_TripData_geo(string strDeviceID)
    {
        //return ExecuteQuery("EXEC RPT_USP_TRIPDATA  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //                   + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
        return ExecuteQuery("EXEC RPT_GEOFENCE_TRIPCOUNSELLING @DEVICEID=" + strDeviceID + "");

    }
    internal static DataTable get_TripData_notusers(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string interval)
    {
        return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                           + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@MININTERVAL='" + interval + "'");
        //return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //                    + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @MININTERVAL=" + interval);//", @STARTDATE ="
    }


    //by venkatesh 1-08-2017 archive track report
    internal static DataTable get_TripData_notusers_archivetrack(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string interval)
    {
        return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_ARCHIVE  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                           + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@MININTERVAL='" + interval + "'");
        //return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //                    + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @MININTERVAL=" + interval);//", @STARTDATE ="
    }

    internal static DataTable get_RouteVoilation(string strDeviceID, string strStartDate, string strEndDate, string RouteID, string category_id)
    {
        //return ExecuteQuery("EXEC RPT_USP_TRIPDATA  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //                   + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
        return ExecuteQuery("EXEC [RPT_SMVTS_ROUTE_VIOLATION]  @DEVICE_ID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @ROUTE_ID=" + RouteID + ", @CATEGORYID = '" + category_id + "'");
    }

    //  for TripdataMonitoring based on the specified time duration
    //internal static DataTable get_TripDataMonitoring(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string interval)
    //{
    //    //return ExecuteQuery("EXEC RPT_USP_TRIPDATA  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
    //    //                   + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
    //    return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
    //                        + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @MININTERVAL=" + interval);//", @STARTDATE ="
    //}



    //PRADEEP 


    internal static DataTable FREE_DEVICES(int CATEG_ID, int STATUS, string DbName)
    {
        return ExecuteQueryDB1("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='FREE_DEVICES',@DEVICE_STATUS=" + STATUS + ",@CATEGID =" + CATEG_ID + "",DbName);
    }


    internal static DataTable ALL_DEVICES(int CATEG_ID,string DbName)
    {
        return ExecuteQueryDB1("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='ALL_DEVICES',@CATEGID =" + CATEG_ID + "", DbName);
    }



    internal static DataTable  CHECK_VEHICLE_EXISTORNOT(int CATEG_ID, string VNO, string DbName)
    {
        return ExecuteQueryDB1("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='CHECKVEHICLE_EXIST',@VEHICLES_REGNUMBER='" + VNO + "',@CATEGID =" + CATEG_ID + "", DbName);
    }


    internal static DataTable VEHICLE_MODEL(int CATEG_ID,string DbName)
    {
        return ExecuteQueryDB1("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='VEHICLE_MODELS',@CATEGID =" + CATEG_ID + "", DbName);
    }
    internal static DataTable ALL_VEHICLE_CATEG(int CATEG_ID, string DbName)
    {
        return ExecuteQueryDB1("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='ALLVEHICLES_CATEGORY',@CATEGID =" + CATEG_ID + "", DbName);
    }
    internal static DataTable FREE_SIMS()
    {
     //   string strConn = BLL.Decrypt(ConfigurationManager.ConnectionStrings["connection"].ToString());
        return ExecuteQuery("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='FREE_SIMS'");
    }

    internal static DataTable ALL_SIMS()
    {
        return ExecuteQuery("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='ALL_SIMS'");
    }
    //GETVEHICLEDETAILS_VNO

    internal static DataTable GETVEHICLEDETAILS_VNO(int CATEGID, string VNO,string dbname)
    {
        return ExecuteQueryDB1("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='GETVEHICLEDETAILS_VNO',@CATEGID=" + CATEGID + ",@VEHICLES_REGNUMBER='" + VNO + "'", dbname);
    }


    internal static bool UPDATE_SIM_STATUS(string SIM_MNO)
    {
        bool status;
        if (ExecuteNonQuery("EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='UPDATESIM_STATUS',@SIM_MNO='"+ SIM_MNO+"'"))
            status = true;
        else
            status = false;
        return status;
    }


    //UPDATESIM_STATUS

    internal static bool INSERT_DATAENTRY(string VNO, string MODEL, string DEVICEID, string SIMNO, string DRIVERNAME,string DRIVERNUMBER, int CATEGID,string dbname)
    {
        string Query="EXEC SMVTS_ENTERDATA @VEHICLENO='"
                       + VNO + "',@MODEL='"
                       + MODEL + "',@DEVICEID="
                       + DEVICEID + ",@SIMNO='"
                       + SIMNO + "',@SIMPROVIDER='AIRTEL',@DRIVERNAME='" + DRIVERNAME + "',@DRIVERCONTACT='" + DRIVERNUMBER + "',@ODOMETER='0',@CLIENTID=" + CATEGID;

        bool b = ExecuteNonQuery3(Query, dbname);
        return b;
    }

    //INSERT_LOG
    internal static bool INSERT_LOG(string VNO, string DEVICEID, string SIMNO,  int CATEGID, string STATUSMSG, int CREATEDBY)
    {
        string Query = "EXEC SP_FREEVEHICLEDATA_ENTRY @OPERATION='INSERT_LOG',@CATEGID='"
                       + CATEGID + "',@VEHICLES_REGNUMBER='"
                       + VNO + "',@DEVICEID='"
                       + DEVICEID + "',@SIM_MNO='" + SIMNO + "',@STATUSMESSAGE='" + STATUSMSG + "',@CREATEDBY=" + CREATEDBY;

        bool b = ExecuteNonQuery(Query);
        return b;
    }



    //PRADEEP



    // FOR POPULATING VEHICLES IN REPORT FORMS

    internal static DataTable get_ReportDevices(string Operation, string strUserID)
    {
        return Dal.ExecuteQuery_Prod("EXEC RPT_USP_DEVICES @OPERATION='" + Operation + "', @USERS_ID='" + strUserID + "'");
    }

    internal static DataTable get_ReportDevices(string Operation, int Vendid, string strUserID)
    {
        return ExecuteQuery("EXEC RPT_USP_DEVICES_VEND @OPERATION='" + Operation + "',@VENDID=" + Vendid + ",@USERS_ID='" + strUserID + "'");
    }
    internal static DataTable get_VehiclesForMining(string categid)
    {
        return Dal.ExecuteQuery_Prod("select  VEHICLES_DEVICE_ID,VEHICLES_REGNUMBER from SMVTS_VEHICLES where VEHICLES_CATEGORY_ID='"+ categid + "'");
    }
    internal static DataTable get_ReportDevices_OLD(int CategoryId, string DbName)
    {
        return ExecuteQueryDB1("select * from SMVTS_VEHICLES where VEHICLES_CATEGORY_ID=" + CategoryId + "", DbName);
    }

    internal static DataTable get_Vendors(int CATEID)
    {
        return ExecuteQuery("EXEC USP_SMVTS_VENDORS @VENDORMASTER_CATEGID=" + CATEID + "");
    }

    internal static DataTable getGmtDiff(string countryName)
    {
        return ExecuteQuery("EXEC SMVTS_GETGMTDIFF @COUNTRYNAME='" + countryName + "'");
    }

    // is for tripdata monitoring sp (sp name and parameter missing) for duration of 12-6 am like that. new form
    internal static DataTable get_TripDataMonitoring(string Operation, string strUserID, string strDeviceID, string strStartDate, string strEndDate, string strFromTime, string strToTime)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC [RPT_USP_SPECIFIC_TIME_ZONES]  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@strFromTime  = '" + strFromTime + "', @strToTime  = '" + strToTime + "'");
        return dt_RptData;
    }

    internal static DataTable get_geofenceData(string strUserID, string strStartDate, string strEndDate, string landmarkid,int interval)
    {
        DataTable dt_RptData = new DataTable();
        //dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_GRID] @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");

        dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_VEHICLES] @OPEATION='GET_ALL_DATA', @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@interval=" + interval + "");
        return dt_RptData;

    }
    internal static DataTable get_geofenceData_Mobile(string strUserID, string strStartDate, string strEndDate, string landmarkid, int interval,int deviceid)
    {
        DataTable dt_RptData = new DataTable();
        //dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_GRID] @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");

        dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_VEHICLES] @OPEATION='GET_ALL_DATA_MOBILEAPP', @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@interval=" + interval + ",@DEVICE_ID='" + deviceid + "'");
        return dt_RptData;

    }
    internal static DataTable get_geofenceData_tripcount(string strUserID, string strStartDate, string strEndDate, string landmarkid, int interval)
    {
        DataTable dt_RptData = new DataTable();
        //dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_GRID] @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");

        dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_VEHICLES] @OPEATION='GET_TRIP_COUNT', @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@interval=" + interval + "");
        return dt_RptData;

    }
    internal static DataTable get_ReportsData13(string strUserID, string strStartDate, string strEndDate, string landmarkid)
    {
        DataTable dt_RptData = new DataTable();
        //dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_GRID] @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");

        dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_GEOFENCE_VEHICLES] @USER_ID='" + strUserID + "',@LANDMARK_ID='" + landmarkid + "', @STARTDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
        return dt_RptData;

    }
    internal static DataTable get_PreveMaintData(string Catid, string strDeviceID)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC [RPT_PREVENTIVE_MAINTENANCE] @CATID='" + Catid + "',@DEVICEID='" + strDeviceID + "'");
        return dt_RptData;

    }

    internal static DataTable getGeofenceLandmarks(string Userid)
    {
        DataTable dt_CheckData = new DataTable();
        dt_CheckData = Dal.ExecuteQuery_Prod("EXEC [USP_OMKAR_LANDMARKS] @USER_ID='" + Userid + "'");
        return dt_CheckData;
    }
    internal static DataTable getLandmarksaddr(string Userid, string nam)
    {
        DataTable dt_CheckData = new DataTable();
        dt_CheckData = ExecuteQuery("EXEC [USP_OMKAR_LANDMARKS_ForAUTO] @USER_ID='" + Userid + "',@name='" + nam + "'");
        return dt_CheckData;
    }

    internal static DataTable getNLandmarks(string Userid)
    {
        DataTable dt_CheckData = new DataTable();
        dt_CheckData = ExecuteQuery("EXEC [USP_NLANDMARKS] @USER_ID='" + Userid + "'");
        return dt_CheckData;
    }


    // FOR REOPRT  rpt_TripdataMonitoring.rdlc
    internal static DataTable get_ReportsSpecificTimeZone(string Operation, string strUserID, string strDeviceID,

    string strStartDate, string strEndDate, string strFromTime, bool strToTime)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC RPT_USP_SPECIFIC_TIME_ZONES  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
        return dt_RptData;
    }

    //bus trip report
    internal static DataTable get_ReportsData_bustrip(string strDeviceID, string strStartDate)
    {
        int i = 1;
        string startdt = string.Empty;
        if (strStartDate != null)
        {
            DateTime dts = Convert.ToDateTime(strStartDate);
            strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
                 + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        }
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC BAJAJ_BUS_RPT @BUS_NO =" +
                 (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                  + ",@DATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                  );
        return dt_RptData;
    }

    internal static DataTable get_ReportsData_Stoppage_OLD(string strVehicle, string strStartDate, string strEndDate)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC RPT_USP_STOPPAGE_OLDREC @vno ='" + strVehicle + "',@STARTDATE = '" + strStartDate + "',@ENDDATE='" + strEndDate + "'");
        return dt_RptData;
    }

    internal static DataTable get_ReportsData_Stoppage_OLD_Grater30_LessthanNov2016(string strVehicle, string strStartDate, string strEndDate)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE_OLDREC_Grater30_LessthanNov2016] @vno ='" + strVehicle + "',@STARTDATE = '" + strStartDate + "',@ENDDATE='" + strEndDate + "'");
        return dt_RptData;
    }

    internal static DataTable get_ReportsData_Stoppage_OLD_BETWEN_FEB2016_TO_AUG2016(string strVehicle, string strStartDate, string strEndDate)
    {
        DataTable dt_RptData = new DataTable();
        string DBNAME = "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCJO0PlytBXdPGhTWCzxCZGIf5D1n4CCQUaEYz7kNUkjGzAKgUvZb48U1G5Rma1d6PXShA4g4TBj0jXkGz90Nfvi7n56bh3/0ydKZ4yX8JXS1LKW4ttJFHFXjlktkV49jJ";
        dt_RptData = ExecuteQueryDB1("EXEC [RPT_USP_STOPPAGE_OLDREC_BETWEN_FEB2016_TO_AUG2016] @vno ='" + strVehicle + "',@STARTDATE = '" + strStartDate + "',@ENDDATE='" + strEndDate + "'", DBNAME);
        return dt_RptData;
    }



    internal static DataTable get_ReportsData(string Operation, string strUserID, string strDeviceID, string strStartDate, string strEndDate, string strDuration, bool strShowGeofenceOnly, string strROUTEID, string Category_id)
    {
        string startdt = string.Empty;
        //if (strStartDate != null && strStartDate != "")
        //{
        //    DateTime dts = Convert.ToDateTime(strStartDate);
        //    strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
        //         + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        //}

        //string enddt = string.Empty;
        //if (strEndDate != null && strEndDate != "")
        //{
        //    if (strEndDate != string.Empty)
        //    {
        //        DateTime dte = Convert.ToDateTime(strEndDate);
        //        strEndDate = dte.Month.ToString() + "/" + dte.Day.ToString() + "/" + dte.Year.ToString()
        //            + " " + dte.Hour.ToString() + ":" + dte.Minute.ToString() + ":" + dte.Second.ToString();
        //    }
        //}

        DataTable dt_RptData = new DataTable();
        switch (Operation)
        {
            case "0": // for speed viaration report 
                dt_RptData = ExecuteQuery("EXEC RPT_USP_SPEED_VARIATION  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "1":  // OverSpeed Report Data (sp is for omkar only)
                dt_RptData = ExecuteQuery("EXEC RPT_USP_OVERSPEED  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                //dt_RptData = ExecuteQuery("EXEC RPT_USP_OVERSPEED  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "15")
                //                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "2":  // StartStop Report Data
                dt_RptData = ExecuteQuery("EXEC RPT_USP_STARTSTOP  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "3"://  For Fuel Consumption Report
                dt_RptData = ExecuteQuery("EXEC RPT_USP_FLEETUSAGE  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @SDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @EDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "4": // for landmarks 
                dt_RptData = ExecuteQuery("EXEC RPT_USP_LANDMARK  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "5": // for Vehicle Summary 
                dt_RptData = ExecuteQuery("EXEC RPT_USP_DEVICE_SUMMARY  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "6": // For Vehicle Usage Summary
                dt_RptData = ExecuteQuery("EXEC RPT_USP_DEVICE_USAGE_TIME  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                              + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "7": // For Vehicle Idletime  Summary
                dt_RptData = ExecuteQuery("EXEC RPT_USP_DEVICE_IDLE_TIME @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "8": // For Alert Summary

                dt_RptData = ExecuteQuery("EXEC RPT_USP_OVERSPEEDALERT @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "9": // For Alert Summary

                dt_RptData = ExecuteQuery("EXEC RPT_USP_STOPALERT @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "10": // For Geofence 

                dt_RptData = ExecuteQuery("EXEC [RPT_USP_GEOFENCEALERT] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "11":  // All Vehicle Details
                dt_RptData = ExecuteQuery("EXEC RPT_USP_COMPANYVEHICLES @USERID='" + strUserID + "'");
                break;

            case "12":  // for stoppage report
                dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_STOPPAGE] @USERID='" + strUserID + "', @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION =" +
                    (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

                     );
                break;
            //case "61":  // for stoppage report
            //    dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE] @USERID='" + strUserID + "', @DEVICEID =" +
            //        (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
            //         + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
            //         + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @PlantName = '" + rcmbplantname + "', @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION =" +
            //        (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

            //         );
            //    break;

            case "13":   //Vehicle Status Report
            //dt_RptData = ExecuteQuery("EXEC RPT_USP_VEHICLE_STATUS @USERID='" + strUserID + "'");
            //break;

            case "14":  //Geofence Report
            //dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE] @USERID='" + strUserID + "', @DEVICEID =" +
            //    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
            //     + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
            //     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "'");
            //break;

            case "15": //Specific time zone report
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SPECIFIC_TIME_ZONES] @USERID='" + strUserID + "', @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "'");
                break;

            case "16":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_TRIP_DATA] @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'")
                     + ", @GEODISTANCE = '2' , @CATGORYID =  '" + Category_id + "'");


                break;


            case "18":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_CONSIGNMENT] @CONSIGNMENT_ROUTEDTL='" + strROUTEID + "', @CONSIGNMENT_DEVICE_ID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @CONSIGNMENT_STDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @CONSIGNMENT_ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @CATEGORYID = '" + Category_id + "'");
                break;

            case "19":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_PC] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "20":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_TR] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "21":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_WBL] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "22":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_EOIL] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "23":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_GOIL] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "24":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_PM] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "25":
                dt_RptData = Dal.ExecuteQuery_Prod("EXEC [RPT_USP_VEHICLE_24HRANNALYSISREPORT] @USER_ID='" + strUserID
                     + "', @RPT_DATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'"));
                break;

            case "26":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTSINSURANCE] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "27":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_NP] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;

            case "28":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_ISP] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "29":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_VEHICLE_24HRANNALYSISREPORT] @USER_ID='" + strUserID
                     + "', @RPT_DATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'"));
                break;
            case "30":
                dt_RptData = ExecuteQuery("EXEC [RPT_TRIPCOUNT_ROUTE] @ROUTEID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                            + ", @STDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'"));
                break;
            case "31": // Immobilizer
                dt_RptData = ExecuteQuery("EXEC [USP_SMVTS_IMMOBILIZER] @CATEID='" + Category_id + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'") + ", @TYPE = 'S' ");
                break;
            case "32":   //SOS
                dt_RptData = ExecuteQuery("EXEC [USP_SMVTS_NOTIFICATIONS] @Operation = 'SelectbyNotificationType' , @NOTIFICATION_DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'") + ", @NOTIFICATION_CATEGID ='" + Category_id + "', @NOTIFICATION_ALERTTYPE ='SOS'");
                break;
            case "33":    // Tampering
                dt_RptData = ExecuteQuery("EXEC [USP_SMVTS_NOTIFICATIONS] @Operation = 'SelectbyNotificationType'  , @NOTIFICATION_DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'") + ", @NOTIFICATION_CATEGID ='" + Category_id + "', @NOTIFICATION_ALERTTYPE ='TAMPERING'");
                break;
            case "34":    // Day wise summary report
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_DAYWISE_SUMMARY_REPORT] @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                 + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "35":    // Day wise summary report
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_DRIVER_REMARKS_REPORT] @USERID =" + (strUserID == string.Empty ? "null" : "'" + strUserID + "'")
                 + ",@STDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "36": //Unplanned Trip Report
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_UNPLANNED_TRIP] @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'")
                     + ", @GEODISTANCE = '2' , @CATGORYID =  '" + Category_id + "'");


                break;
            case "37":
                /* if (strROUTEID == "25tonners")
                 {
                     dt_RptData = ExecuteQuery("EXEC [RPT_TRIPCOUNT_ROUTE_CONSOLIDATED] @ROUTEID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                                 + ", @STDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "',@CATEGORYID='" + Category_id + "'"));
                 }
                 else if (strROUTEID == "WaterTankers")
                 {
                     dt_RptData = ExecuteQuery("EXEC [RPT_TANKERTRIPS_CONSOLIDATED] @LAND_ID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                                + ", @STARTDATE=" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE=" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "',@CATEGORYID='" + Category_id + "'"));
                 }*/
                dt_RptData = ExecuteQuery("EXEC [RPT_GHMC_CONSOLIDATEDTRIPS] @LAND_ID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                                              + ", @STARTDATE=" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE=" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "',@CATEGORYID='" + Category_id + "',@VEHMODEL_ID='" + strROUTEID
                                                                              + "',@STATUS_BIT='" + strDuration + "'"));
                break;

            case "38": //Fuel Info Report
                dt_RptData = ExecuteQuery("EXEC RPT_SMVTS_FUELINFO @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'")
                     + ", @USERID = '" + strUserID + "'");


                break;


            case "39": //Fuel Info Report
                dt_RptData = ExecuteQuery("EXEC RPT_SMVTS_FUELINFO @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'")
                     + ", @USERID = '" + strUserID + "'");


                break;
            case "40":
                dt_RptData = ExecuteQuery("EXEC [RPT_DAYWISE_OVERSPEED] @USER_ID='" + strUserID
                 + "', @RPT_DATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'"));
                break;
            case "41":
                dt_RptData = ExecuteQuery("EXEC [RPT_DAYWISE_ANALYSIS] @USER_ID='" + strUserID
                 + "', @RPT_DATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'"));
                break;
            case "42":
                dt_RptData = ExecuteQuery("EXEC [RPT_TRIPSDESTINATION_GEOFENCE] @DEVICE_ID='" + strDeviceID
                 + "', @ENDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate)
                 + "', @STARTDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'"));
                break;
            case "43":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_SMVTS_LOSSOFPACKETS] @DEVICE_ID='" + strDeviceID
              + "', @ETDT =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate)
              + "', @STDT =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate
              + "',@INTERVAL='" + strDuration
              + "',@CATEGORY_ID='" + Category_id
              + "',@USER_ID='" + strUserID + "'"));
                break;

            case "44":
                dt_RptData = ExecuteQuery("EXEC [RPT_TRIP_BY_INTERMEDIATEPOINTS] @DEVICEID='" + strDeviceID
              + "', @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate)
              + "', @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate
              + "',@ROUTEID='" + strROUTEID
              + "',@CATEGORYID='" + Category_id
              + "',@USERID='" + strUserID + "'"));
                break;
            case "45":
                dt_RptData = ExecuteQuery("EXEC [RPT_TRIP_ROUTEASSIGNGEOFNCE] @DEVICEID='" + strDeviceID
              + "', @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate)
              + "', @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate
              + "',@ROUTEID='" + strROUTEID
              + "',@CATEGORYID='" + Category_id
              + "',@USERID='" + strUserID + "'"));
                break;


            case "46":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_TRIPSTATUS_INTERVAL] @DEVICEID='" + strDeviceID

              + "', @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate
              + "',@ROUTEID='" + strROUTEID
              + "',@CATEGORYID='" + Category_id
              + "',@INTERVAL=" + strDuration));
                break;
            case "47":
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_CONSIGNMENT_AUTOMOBILE] @CONSIGNMENT_ROUTEDTL='" + strROUTEID + "', @CONSIGNMENT_DEVICE_ID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @CONSIGNMENT_STDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @CONSIGNMENT_ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @CATEGORYID = '" + Category_id + "'");
                break;

            case "48":    // Day wise summary report full details 
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_DAYWISE_SUMMARY_REPORT_DEVID] @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                 + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            case "49":
                dt_RptData = ExecuteQuery("EXEC RPT_USP_TYREINFO  @USERID=" + strUserID + ",@DEVICEID=" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'") + ",@STARTDATE='" + strStartDate + "',@ENDATE='" + strEndDate + "',@RPT_TYPE='TYRE_PRESENT_READING'");
                break;
            case "50":
                dt_RptData = ExecuteQuery("EXEC RPT_USP_TYREINFO  @USERID=" + strUserID + ",@DEVICEID=" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'") + ",@STARTDATE='" + strStartDate + "',@ENDATE='" + strEndDate + "',@RPT_TYPE='TYRE_LIFETIME'");
                break;
            case "55":    // Day wise summary report full details 
                dt_RptData = ExecuteQuery("EXEC [RPT_USP_DAYWISE_SUMMARY_REPORT_DEVID_abhi] @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                 + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");
                break;
            default:
                break;
        }
        return dt_RptData;
    }
    //internal static DataTable get_ReportsData_ibtrip(string Operation, string strUserID, string strDeviceID, string strStartDate, string strEndDate, string strDuration, bool strShowGeofenceOnly, string strROUTEID, string Category_id)
    internal static DataTable get_ReportsData_ibtrip(string Operation, string strDeviceID, string strStartDate, string strEndDate, string Category_id)
    {
        int i = 1;
        string startdt = string.Empty;
        if (strStartDate != null)
        {
            DateTime dts = Convert.ToDateTime(strStartDate);
            strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
                 + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        }

        string enddt = string.Empty;
        if (strEndDate != null)
        {
            if (strEndDate != string.Empty)
            {
                DateTime dte = Convert.ToDateTime(strEndDate);
                strEndDate = dte.Month.ToString() + "/" + dte.Day.ToString() + "/" + dte.Year.ToString()
                    + " " + dte.Hour.ToString() + ":" + dte.Minute.ToString() + ":" + dte.Second.ToString();
            }
        }

        DataTable dt_RptData = new DataTable();
        switch (Operation)
        {
            case "62":
                //dt_RptData = ExecuteQuery("EXEC [RPT_USP_TRIP_DATA] @DEVICEID =" +
                dt_RptData = ExecuteQuery("EXEC RPT_VEHICLES_TRIP_test @DEVICE_ID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STSRTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'")
                     + ", @categ_id =  '" + Category_id + "'");


                break;
            default:
                break;

        }
        return dt_RptData;
        //DataTable dt1 = dt_RptData.Clone();
        //var rows = from p in dt_RptData.AsEnumerable()
        //           select p;
        //foreach (var item in rows)
        //{
        //    DataRow dr = dt1.NewRow();
        //    dr[0] = i.ToString();
        //    dr[1] = item[1];
        //    dr[2] = item[2];
        //    dr[3] = item[3];
        //    dr[4] = item[4];
        //    dr[5] = item[5];
        //    dr[6] = item[6];
        //    //dr[7] = item[7];
        //    dr[8] = item[8];
        //    //dr[9] = item[9];
        //    dr[10] = item[10];
        //    dr[11] = item[11];
        //    //dr[12] = item[12];
        //    //dr[13] = item[13];
        //    //dr[14] = item[14];
        //    //dr[15] = item[15];
        //    //dr[16] = item[16];
        //    //dr[17] = item[17];
        //    //dr[18] = item[18];
        //    //dr[19] = item[19];
        //    //dr[20] = item[20];
        //    //dr[21] = item[21];
        //    //dr[22] = item[22];
        //    //dr[23] = item[23];
        //    //dr[24] = item[24];
        //    //dr[25] = item[25];
        //    //dr[26] = item[26];
        //    //dr[27] = item[27];
        //    //dr[28] = item[28];
        //    //dr[29] = item[29];
        //    //dr[30] = item[30];
        //    //dr[31] = item[31];
        //    //dr[32] = item[32];
        //    //dr[33] = item[33];
        //    //dr[34] = item[34];
        //    //dr[35] = item[35];
        //    //dr[36] = item[36];//Commented By Gangadhar
        //    dt1.Rows.Add(dr);
        //    i++;
        //}
        //return dt1;
    }

    internal static DataTable get_ReportsData1(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string strDuration, bool strShowGeofenceOnly, string strROUTEID, string Category_id, string rcmbplantname)
    {
        int i = 1;
        string startdt = string.Empty;
        if (strStartDate != null)
        {
            DateTime dts = Convert.ToDateTime(strStartDate);
            strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
                 + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        }

        string enddt = string.Empty;
        if (strEndDate != null)
        {
            if (strEndDate != string.Empty)
            {
                DateTime dte = Convert.ToDateTime(strEndDate);
                strEndDate = dte.Month.ToString() + "/" + dte.Day.ToString() + "/" + dte.Year.ToString()
                    + " " + dte.Hour.ToString() + ":" + dte.Minute.ToString() + ":" + dte.Second.ToString();
            }
        }

        DataTable dt_RptData = new DataTable();
        //switch (Operation)
        //{

        //    case "61":  // for stoppage report
        //BAJAJ IB STOPPAGE REPORT
        // dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE_NEW] @USERID='" + strUserID + "', @DEVICEID =" +
        //dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE_NEW1] @USERID='" + strUserID + "', @DEVICEID =" +
        //            (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //             + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
        //             + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@Landmark_ID = '" + rcmbplantname + "', @DURATION = '" + strDuration + "',@TIME=null,@RPT = '" + 2 + "',@GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION=" +
        //            (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

        //             );
        //bajaj ib stoppage report

        dt_RptData = ExecuteQuery("EXEC [BAJAJ_IB_STOPAGE_RPT] @USER_ID='" + strUserID + "',@DEVICE_ID =" +
                  (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                   + ",@START_DATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                   + ",@END_DATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@Landmark_ID = '" + rcmbplantname + "'"
                );





        //        break;

        //    default:
        //        break;
        //}


        //dt_RptData.Columns.Add("SNo", typeof(System.Int32));

        DataTable dt1 = new DataTable();
        dt1 = dt_RptData.Clone();
        dt1.Columns.Add("Sno", System.Type.GetType("System.Int32"));
        var rows = from p in dt_RptData.AsEnumerable()
                   select p;
        foreach (var item in rows)
        {
            DataRow dr = dt1.NewRow();
            dr[0] = item[0];
            dr[1] = item[1];
            dr[2] = item[2];
            dr[3] = item[3];
            dr[4] = item[4];
            dr[5] = item[5];
            dr[6] = item[6];
            dr[7] = item[7];
            dr[8] = item[8];
            dr[9] = i.ToString();

            dt1.Rows.Add(dr);
            i++;
        }

        return dt1;

    }

    //by venkatesh for archive stoppage report
    internal static DataTable get_ReportsData_archivestoppage(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string strDuration, bool strShowGeofenceOnly, string strROUTEID, string Category_id)
    {
        int i = 1;
        string startdt = string.Empty;
        if (strStartDate != null)
        {
            DateTime dts = Convert.ToDateTime(strStartDate);
            strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
                 + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        }

        string enddt = string.Empty;
        if (strEndDate != null)
        {
            if (strEndDate != string.Empty)
            {
                DateTime dte = Convert.ToDateTime(strEndDate);
                strEndDate = dte.Month.ToString() + "/" + dte.Day.ToString() + "/" + dte.Year.ToString()
                    + " " + dte.Hour.ToString() + ":" + dte.Minute.ToString() + ":" + dte.Second.ToString();
            }
        }

        DataTable dt_RptData = new DataTable();
        //switch (Operation)
        //{

        //    case "61":  // for stoppage report
        //BAJAJ IB STOPPAGE REPORT
        // dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE_NEW] @USERID='" + strUserID + "', @DEVICEID =" +


        //by venkatesh on 31st july 2017

        //dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE] @USERID='" + strUserID + "', @DEVICEID =" +
        //             (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //              + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
        //              + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION =" +
        //             (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

        //              );
        dt_RptData = ExecuteQuery("EXEC [Rpt_usp_stoppage_archive] @USERID='" + strUserID + "', @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION =" +
                    (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

                     );
        //        break;

        //    default:
        //        break;
        //}
        //DataTable dt1 = dt_RptData.Clone();
        //var rows = from p in dt_RptData.AsEnumerable()
        //           select p;
        //foreach (var item in rows)
        //{
        //    DataRow dr = dt1.NewRow();
        //    dr[0] = i.ToString();
        //    dr[1] = item[1];
        //    dr[2] = item[2];
        //    dr[3] = item[3];
        //    dr[4] = item[4];
        //    dr[5] = item[5];
        //    dr[6] = item[6];
        //    dr[7] = item[7];
        //    dr[8] = item[8];
        //    dr[9] = item[9];
        //    dr[10] = item[10];
        //    dr[11] = item[11];
        //    dr[12] = item[12];
        //    dr[13] = item[13];
        //    dr[14] = item[14];
        //    dr[15] = item[15];
        //    dr[16] = item[16];
        //    dr[17] = item[17];
        //dr[18] = item[18];
        //dr[19] = item[19];
        //dr[20] = item[20];
        //dr[21] = item[21];
        //dr[22] = item[22];
        //dr[23] = item[23];
        //dr[24] = item[24];
        //dr[25] = item[25];
        //dr[26] = item[26];
        //dr[27] = item[27];
        //dr[28] = item[28];
        //dr[29] = item[29];
        //dr[30] = item[30];
        //dr[31] = item[31];
        //dr[32] = item[32];
        //dr[33] = item[33];
        //dr[34] = item[34];
        //dr[35] = item[35];
        //dr[36] = item[36];//Commented By Gangadhar
        //dt1.Rows.Add(dr);
        //i++;


        return dt_RptData;

    }


    //internal static DataTable get_ReportsData_lohiya(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string strDuration, bool strShowGeofenceOnly, string strROUTEID, string Category_id)
    internal static DataTable get_ReportsData_lohiya(string strDeviceID, string strStartDate, string strEndDate)
    {
        int i = 1;
        if (strDeviceID.ToString().Trim() == "")
        {
            strDeviceID = "ALL";
        }
        string startdt = string.Empty;
        if (strStartDate != null)
        {
            DateTime dts = Convert.ToDateTime(strStartDate);
            strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
                 + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        }

        string enddt = string.Empty;
        if (strEndDate != null)
        {
            if (strEndDate != string.Empty)
            {
                DateTime dte = Convert.ToDateTime(strEndDate);
                strEndDate = dte.Month.ToString() + "/" + dte.Day.ToString() + "/" + dte.Year.ToString()
                    + " " + dte.Hour.ToString() + ":" + dte.Minute.ToString() + ":" + dte.Second.ToString();
            }
        }

        DataTable dt_RptData = new DataTable();

        //dt_RptData = ExecuteQuery("EXEC [SMVTS_LOHIYA_RPT_FE]@USERID='" + strUserID + "', @DEVICEID =" +
        //            (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //             + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
        //             + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION =" +
        //            (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

        //             );


        dt_RptData = ExecuteQuery("EXEC [SMVTS_LOHIYA_RPT_FE] @VEHICLE =" +
                 (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                  + ",@START_D =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                  + ",@END_D =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'")

                  );
        //DataTable dt1 = dt_RptData.Clone();
        //var rows = from p in dt_RptData.AsEnumerable()
        //           select p;
        //foreach (var item in rows)
        //{
        //    DataRow dr = dt1.NewRow();
        //    dr[0] = i.ToString();
        //    dr[1] = item[1];
        //    dr[2] = item[2];
        //    dr[3] = item[3];
        //    dr[4] = item[4];
        //    dr[5] = item[5];
        //    dr[6] = item[6];
        //    dr[7] = item[7];
        //    dr[8] = item[8];
        //    dr[9] = item[9];
        //    dr[10] = item[10];
        //    dr[11] = item[11];
        //    dr[12] = item[12];
        //    dr[13] = item[13];
        //    dr[14] = item[14];
        //    dt1.Rows.Add(dr);
        //   i++;


        //}

        return dt_RptData;

    }
    internal static DataTable get_ReportsData_lohiya_detailedview(string strDeviceID, string strStartDate, string strEndDate)
    {
        int i = 1;
        if (strDeviceID.ToString().Trim() == "")
        {
            strDeviceID = "ALL";
        }
        string startdt = string.Empty;
        if (strStartDate != null)
        {
            DateTime dts = Convert.ToDateTime(strStartDate);
            strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
                 + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        }

        string enddt = string.Empty;
        if (strEndDate != null)
        {
            if (strEndDate != string.Empty)
            {
                DateTime dte = Convert.ToDateTime(strEndDate);
                strEndDate = dte.Month.ToString() + "/" + dte.Day.ToString() + "/" + dte.Year.ToString()
                    + " " + dte.Hour.ToString() + ":" + dte.Minute.ToString() + ":" + dte.Second.ToString();
            }
        }

        DataTable dt_RptData = new DataTable();

        //dt_RptData = ExecuteQuery("EXEC [SMVTS_LOHIYA_RPT_FE]@USERID='" + strUserID + "', @DEVICEID =" +
        //            (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //             + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
        //             + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION =" +
        //            (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

        //             );


        dt_RptData = ExecuteQuery("EXEC [SMVTS_LOHIYA_RPT_DETAILS] @VEHICLE =" +
                 (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                  + ",@START_D =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                  + ",@END_D =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'")

                  );
        //DataTable dt1 = dt_RptData.Clone();
        //var rows = from p in dt_RptData.AsEnumerable()
        //           select p;
        //foreach (var item in rows)
        //{
        //    DataRow dr = dt1.NewRow();
        //    dr[0] = i.ToString();
        //    dr[1] = item[1];
        //    dr[2] = item[2];
        //    dr[3] = item[3];
        //    dr[4] = item[4];
        //    dr[5] = item[5];
        //    dr[6] = item[6];
        //    dr[7] = item[7];
        //    dr[8] = item[8];
        //    dr[9] = item[9];
        //    dr[10] = item[10];
        //    dr[11] = item[11];
        //    dr[12] = item[12];
        //    dr[13] = item[13];
        //    dr[14] = item[14];
        //    dt1.Rows.Add(dr);
        //   i++;


        //}

        return dt_RptData;

    }
    internal static DataTable get_ReportsData_newstoppage(string clientid, string rcmbplantname)
    {
        string Tr = string.Empty; string rcmb = string.Empty;

        if (clientid == "87")
        {
            Tr = null;
        }
        if (clientid == "91")
        {
            Tr = "Jayshree";
        }
        if (clientid == "92")
        {
            Tr = "Satish";
        }
        if (rcmbplantname.Trim() == "Select All")
        {
            rcmb = null;
        }
        if (rcmbplantname == "WALUJ")
        {
            rcmb = "Waluj";
        }
        if (rcmbplantname == "CHAKAN")
        {
            rcmb = "CHAKAN";
        }
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC [STOPPAGE_RPT_AT_PLANT] @TRANSPORTER ='" + Tr + "',@PLANT_NAME ='" + rcmb + "'");
        return dt_RptData;

    }
    internal static DataTable get_ReportsData_stoppage(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string strDuration, bool strShowGeofenceOnly, string strROUTEID, string Category_id, string rcmbplantname)
    {
        int i = 1;
        string startdt = string.Empty;
        if (strStartDate != null)
        {
            DateTime dts = Convert.ToDateTime(strStartDate);
            strStartDate = dts.Month.ToString() + "/" + dts.Day.ToString() + "/" + dts.Year.ToString()
                 + " " + dts.Hour.ToString() + ":" + dts.Minute.ToString() + ":" + dts.Second.ToString();
        }

        string enddt = string.Empty;
        if (strEndDate != null)
        {
            if (strEndDate != string.Empty)
            {
                DateTime dte = Convert.ToDateTime(strEndDate);
                strEndDate = dte.Month.ToString() + "/" + dte.Day.ToString() + "/" + dte.Year.ToString()
                    + " " + dte.Hour.ToString() + ":" + dte.Minute.ToString() + ":" + dte.Second.ToString();
            }
        }

        int flag_duration = 0;

        switch (strDuration)
        {
            case "0 to 480":
                flag_duration = 1;
                break;
            case "480 to 1440":
                flag_duration = 2;
                break;
            case "1440 to 2880":
                flag_duration = 3;
                break;
            default:
                flag_duration = 4;
                break;

        }


        DataTable dt_RptData = new DataTable();
        //switch (Operation)
        //{

        //    case "61":  // for stoppage report
        // STOPPAGE REPORT1
        //dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE_NEW1] @USERID='" + strUserID + "', @DEVICEID =" +
        //dt_RptData = ExecuteQuery("EXEC [RPT_USP_STOPPAGE_NEW1] @USERID='" + strUserID + "', @DEVICEID =" +
        //            (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //             + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
        //             + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@Landmark_ID = '" + rcmbplantname + "', @time = '" + flag_duration + "',@RPT = '" +3+"',@GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION=" +
        //            (Category_id == string.Empty ? "null" : "'" + Category_id + "'")

        //             );

        //bajaj stoppage report

        dt_RptData = ExecuteQuery("EXEC [STOPAGE_RPT] @USER_ID='" + strUserID + "',@DEVICE_ID =" +
                  (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                   + ",@Landmark_ID = '" + rcmbplantname + "', @INTERVAL = '" + flag_duration +
                "'");




        //, @DURATION = '" + strDuration + "'//Commented By Venkatesh
        //        break;

        //    default:
        //        break;
        //}
        DataTable dt1 = dt_RptData.Clone();
        dt1.Columns.Add("Sno", System.Type.GetType("System.Int32"));
        var rows = from p in dt_RptData.AsEnumerable()
                   select p;
        foreach (var item in rows)
        {
            DataRow dr = dt1.NewRow();
            dr[0] = item[0];
            dr[1] = item[1];
            dr[2] = item[2];
            dr[3] = item[3];
            dr[4] = item[4];
            dr[5] = item[5];
            dr[6] = item[6];
            dr[7] = item[7];
            dr[8] = item[8];
            dr[9] = i.ToString();

            dt1.Rows.Add(dr);
            i++;
        }

        return dt1;

    }


    //internal static DataTable get_tripdata(string operation,string vehno,string fromdate,string todate)
    //{
    //    DataTable dt_RptData = new DataTable();
    //    dt_RptData = ExecuteQuery("Exec USP_SMVTS_EXPRESS_TRIPREPORT @OPERATION='" + operation + "',@VEHNO='" + vehno + "',@STARTDATE='" + fromdate + "',@ENDDATE='" + todate + "'");
    //    return dt_RptData;

    //}
    //internal static DataTable get_tripdata(string operation, string vehno, string fromdate, string todate)
    //{
    //    DataTable dt_RptData = new DataTable();
    //    dt_RptData = ExecuteQuery("Exec USP_SMVTS_EXPRESS_HSSEREPORT @OPERATION='" + operation + "',@VEHNO='" + vehno + "',@STARTDATE='" + fromdate + "',@ENDDATE='" + todate + "'");
    //    return dt_RptData;
    //}

    //internal static DataTable get_tripdata(string operation, string vehno, string fromdate, string todate)
    //{
    //    DataTable dt_RptData = new DataTable();
    //    dt_RptData = ExecuteQuery("Exec USP_SMVTS_EXPRESS_TRIPREPORT @OPERATION='" + operation + "',@VEHNO='" + vehno + "',@STARTDATE='" + fromdate + "',@ENDDATE='" + todate + "'");
    //    return dt_RptData;


    //}

    internal static DataTable get_Report_VehicleStatus(string strUserID)
    {
        DataTable dt_RptData = ExecuteQuery("EXEC [RPT_USP_VEHICLE_STATUS] @USER_ID='" + strUserID + "'");
        return dt_RptData;
    }

    internal static DataTable get_Report_VehicleStatusByCategId(string strcategID)
    {
        DataTable dt_RptData = ExecuteQuery("EXEC [RPT_USP_VEHICLE_STATUS] @CATEGID='" + strcategID + "'");
        return dt_RptData;
    }

    internal static DataTable get_ReportsData(string Operation, string strUserID, string strDeviceID, string strStartDate, string strEndDate, string landmark)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC [RPT_USP_GEOFENCEALERT_OMKAR] @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@LANDMARK='" + landmark + "'");

        return dt_RptData;

    }

    #endregion

    #region SMVTS_USERS Methods
    /// <summary>
    /// Writtenby Sridevi on 25/12/2009 12:10:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>
    public static DataTable get_user_id(SMVTS_USERS _obj_users)
    {
        DataTable dt = ExecuteQuery1("select * from SMVTS_USERS where USERS_CATEGORY_ID='" + _obj_users.USERS_CATEGORY_ID + "' and USERS_USERNAME='" + _obj_users.USERS_USERNAME + "' and USERS_FULLNAME='" + _obj_users.USERS_FULLNAME + "'");
        return dt;
    }
    public static DataTable get_Users_Maindatabase(SMVTS_USERS _obj_Smvts_Users)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Users.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Users.USERS_ID) != "0")
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'Select', @USERS_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ID) + "'");

                else if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) != "0"))
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'forClient', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ROLE_ID = '" + Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) + "'");

                else if (Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0")
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'forPartner', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");

                else
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'Select' ");

                break;

            case operation.Check:

                if (Convert.ToString(_obj_Smvts_Users.USERS_ID) == "0")
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'Check', @USERS_USERNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'Check', @USERS_USERNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ID) + "'");
                break;

            case operation.Delete:
                if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) != "0"))
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'CHECKPartnerClientAdmin', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ROLE_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) + "'");

                //else if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) != "0"))
                //    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'CHECKPartnerClientAdmin', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ROLE_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) + "'");

                else
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'SelectAllDhanush'");   //to get the list of the users for dhanush with out client users.

                break;

            case operation.Empty: // for checking all active users for Client and Org.
                if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_STATUS) != "0"))
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'Select', @USERS_STATUS ='" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'Select', @USERS_STATUS ='" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS) + "'");
                break;

            case operation.Update:
                if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS) != "0"))
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'assignedDevice', @USERS_DEVICE_IDS ='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                else if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) == "2"))
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'SelectPartnerAdminUsers', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");

                  //  dt = ExecuteQuery("select USERS_ID,USERS_ROLE_ID,USERS_CATEGORY_ID,USERS_USERNAME,USERS_PASSWORD,USERS_FULLNAME,CASE WHEN USERS_STATUS =1 THEN 'Active' ELSE 'Inactive' END AS USERS_STATUS,USERS_DEVICE_IDS,USERS_CREATEDBY,USERS_CREATEDDATE,USERS_MODIFIEDBY,USERS_MODIFIEDDATE , CATEG_NAME  + CASE (CATEG_CATETYPE_ID) WHEN 2 THEN ' (P) ' WHEN 3 THEN ' (C)' WHEN 1 THEN ' (O)' END as 'CATEG_NAME',USERROLE_NAME from smvts_users INNER JOIN SMVTS_CATEGORIES (NOLOCK) ON SMVTS_USERS.USERS_CATEGORY_ID = SMVTS_CATEGORIES.CATEG_ID INNER JOIN SMVTS_USERROLES (NOLOCK) ON SMVTS_USERS.USERS_ROLE_ID = SMVTS_USERROLES.USERROLE_ID  and  USERS_CATEGORY_ID in(SELECT categ_id from SMVTS_CATEGORIES WHERE CATEG_PARENT_ID=" + _obj_Smvts_Users.USERS_CATEGORY_ID+ ") and USERS_ROLE_ID=3");
                else
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'SelectAllClientUsers', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                break;

            case operation.Insert: //to check the noofusers from category table
                dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'FindNoofUsersClient', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }

    public static DataTable get_Users(SMVTS_USERS _obj_Smvts_Users)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Users.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Users.USERS_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'Select', @USERS_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ID) + "'");

                else if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) != "0"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'forClient', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ROLE_ID = '" + Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) + "'");

                else if (Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'forPartner', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");

                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'Select' ");

                break;

            case operation.Check:

                if (Convert.ToString(_obj_Smvts_Users.USERS_ID) == "0")
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'Check', @USERS_USERNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'Check', @USERS_USERNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ID) + "'");
                break;

            case operation.Delete:
                if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) != "0"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'CHECKPartnerClientAdmin', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ROLE_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) + "'");

                //else if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) != "0"))
                //    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'CHECKPartnerClientAdmin', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "', @USERS_ROLE_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) + "'");

                else
                    dt = ExecuteQuery1("EXEC USP_SMVTS_USERS @Operation = 'SelectAllDhanush'");   //to get the list of the users for dhanush with out client users.

                break;

            case operation.Empty: // for checking all active users for Client and Org.
                if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_STATUS) != "0"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'Select', @USERS_STATUS ='" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'Select', @USERS_STATUS ='" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS) + "'");
                break;

            case operation.Update:
                if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS) != "0"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'assignedDevice', @USERS_DEVICE_IDS ='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS) + "', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                else if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) == "2"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'SelectPartnerAdminUsers', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");

                else if ((Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Users.USERS_ROLE_ID) == "3"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'forPartner', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");

                //  dt = ExecuteQuery("select USERS_ID,USERS_ROLE_ID,USERS_CATEGORY_ID,USERS_USERNAME,USERS_PASSWORD,USERS_FULLNAME,CASE WHEN USERS_STATUS =1 THEN 'Active' ELSE 'Inactive' END AS USERS_STATUS,USERS_DEVICE_IDS,USERS_CREATEDBY,USERS_CREATEDDATE,USERS_MODIFIEDBY,USERS_MODIFIEDDATE , CATEG_NAME  + CASE (CATEG_CATETYPE_ID) WHEN 2 THEN ' (P) ' WHEN 3 THEN ' (C)' WHEN 1 THEN ' (O)' END as 'CATEG_NAME',USERROLE_NAME from smvts_users INNER JOIN SMVTS_CATEGORIES (NOLOCK) ON SMVTS_USERS.USERS_CATEGORY_ID = SMVTS_CATEGORIES.CATEG_ID INNER JOIN SMVTS_USERROLES (NOLOCK) ON SMVTS_USERS.USERS_ROLE_ID = SMVTS_USERROLES.USERROLE_ID  and  USERS_CATEGORY_ID in(SELECT categ_id from SMVTS_CATEGORIES WHERE CATEG_PARENT_ID=" + _obj_Smvts_Users.USERS_CATEGORY_ID+ ") and USERS_ROLE_ID=3");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'SelectAllClientUsers', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                break;

            case operation.Insert: //to check the noofusers from category table
                dt = ExecuteQuery("EXEC USP_SMVTS_USERS @Operation = 'FindNoofUsersClient', @USERS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }


    public static bool set_Users(SMVTS_USERS _obj_Smvts_Users, string dbname, string orgname,int CATEG_ID,int CATEG_TYPEID,string org_username)


    {
        bool status = false;
        switch (_obj_Smvts_Users.OPERATION)
        {
            case operation.Insert:
                string querry = "";
                string querryI = "EXEC USP_SMVTS_USERS @Operation = 'Insert', @USERS_ROLE_ID='" + _obj_Smvts_Users.USERS_ROLE_ID
                                  + "', @USERS_USERNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME)
                                  + "', @USERS_PASSWORD ='" + Convert.ToString(_obj_Smvts_Users.USERS_PASSWORD)
                                  + "', @USERS_FULLNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_FULLNAME)
                                  + "', @USERS_STATUS='" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS)
                                  + "', @USERS_PERMISSION='" + Convert.ToString(_obj_Smvts_Users.USERS_PERMISSION)
                                  + "', @USERS_DEVICE_IDS='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS)
                                  + "', @USERS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Users.CREATEDBY)
                                  + "', @USERS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Users.LASTMDFBY)
                                  + "'";
                //if (ExecuteNonQuery(querryI))
                //{
                //    if (dbname != "")
                //    {
                //        if (Dal.ExecuteNonQueryDB1(querryI, dbname))
                //        {
                //            status = true;
                //        }
                //    }
                //    else
                //    {
                //        status = true;
                //    }
                //}

                querry = querryI + ", @USERS_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'";
                if (CATEG_ID == 1)
                {
                    if (Dal.ExecuteNonQueryConfig(querry))
                    {
                        
                            string abc = "";
                        if (CATEG_TYPEID == 2)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' ";
                        }
                        else if (CATEG_TYPEID == 5)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(WLP)", "").Trim() + "' ";
                        
                        }
                        else if (CATEG_TYPEID == 3 || CATEG_TYPEID == 4)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' ";

                        }
                        else if (CATEG_TYPEID == 6)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(SWLP)", "").Trim() + "' ";

                        }
                        DataTable dt_categ = new DataTable();
                            dt_categ = Dal.ExecutePRODDB(abc);
                            {
                                querry = querryI + ", @USERS_CATEGORY_ID   ='" + dt_categ.Rows[0][0].ToString() + "'";
                            }
                            if (Dal.ExecuteNonQueryPROD(querry))
                            {
                                status = true;
                            }
                        
                        else
                        {
                            status = false;
                        }

                    }

                }
                else
                {
                    if (Dal.ExecuteNonQueryPROD(querry))
                    {

                        string abc = "";
                        if (CATEG_TYPEID == 2)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' ";
                        }
                        else if (CATEG_TYPEID == 5)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(WLP)", "").Trim() + "' ";

                        }
                        else if (CATEG_TYPEID == 3 || CATEG_TYPEID == 4)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' ";

                        }
                        else if (CATEG_TYPEID == 6)
                        {
                            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(SWLP)", "").Trim() + "' ";

                        }

                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteConfig(abc);
                        {
                            querry = querryI + ", @USERS_CATEGORY_ID   ='" + dt_categ.Rows[0][0].ToString() + "'";
                        }
                        if (Dal.ExecuteNonQueryConfig(querry))
                        {
                            status = true;
                        }
                    }
                }



                //if (ExecuteNonQuery1(querry))
                //{
                //    if (dbname != "" && _obj_Smvts_Users.USERS_ROLE_ID != 4)
                //    {
                //        string CategQuery = "";
                //        if (_obj_Smvts_Users.USERS_ROLE_ID == 3)
                //        {
                //            CategQuery = " SELECT categ_id FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                //        }
                //        else
                //        {
                //            CategQuery = " SELECT categ_id FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                //        }
                //        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                //        DataTable dt_categ = new DataTable();
                //        dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);

                //        {


                //            querry = querryI + ", @USERS_CATEGORY_ID ='" + dt_categ.Rows[0][0].ToString() + "'";
                //        }

                //        if (Dal.ExecuteNonQueryDB1(querry, dbname))
                //        {
                //            status = true;
                //        }
                //    }
                //    else if (dbname != "" && _obj_Smvts_Users.USERS_ROLE_ID == 4)
                //    {
                //        querry = querryI + ", @USERS_CATEGORY_ID ='" + _obj_Smvts_Users.USERS_CATEGORY_ID + "'";
                //        if (Dal.ExecuteNonQueryDB1(querry, dbname))
                //        {
                //            status = true;
                //        }
                //    }

                //}
                //else
                //    status = false;

                break;
            case operation.Update:
                string partquerryu = "EXEC USP_SMVTS_USERS @Operation = 'Update', @USERS_ROLE_ID= '" + _obj_Smvts_Users.USERS_ROLE_ID
                                  + "', @USERS_USERNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME)
                                  + "', @USERS_PASSWORD = '" + Convert.ToString(_obj_Smvts_Users.USERS_PASSWORD)
                                  + "', @USERS_FULLNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_FULLNAME)
                                  + "', @USERS_DEVICE_IDS='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS)
                                  + "', @USERS_STATUS= '" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS)
                                   + "',@USERS_PERMISSION='" + Convert.ToString(_obj_Smvts_Users.USERS_PERMISSION)
                                  + "', @USERS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Users.LASTMDFBY)
                                  + "'";

                string querryu = partquerryu + ",@USERS_ID= '" + Convert.ToString(_obj_Smvts_Users.USERS_ID) + "',@USERS_CATEGORY_ID= '" + _obj_Smvts_Users.USERS_CATEGORY_ID + "'";

                if (CATEG_ID == 1)
                {

                    if(ExecuteNonQuery(querryu))
                    {
                        string abc = "select USERS_CATEGORY_ID,USERS_ID from SMVTS_USERS inner join SMVTS_CATEGORIES on USERS_CATEGORY_ID=CATEG_ID where USERS_USERNAME='" + org_username + "' and CATEG_NAME='" + orgname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "'";
                        DataTable dt = Dal.ExecutePRODDB(abc);

                        string querryv = partquerryu + ",@USERS_ID= '" + Convert.ToString(dt.Rows[0]["USERS_ID"]) + "',@USERS_CATEGORY_ID= '" + dt.Rows[0]["USERS_CATEGORY_ID"].ToString() + "'";

                        if (Dal.ExecuteNonQueryPROD(querryv))
                        {
                            status = true;
                        }

                        else
                        {
                            status = false;
                        }
                       
                    }
                    else
                    {
                        status = false;
                    }
                }
                else
                {
                    if (Dal.ExecuteNonQueryPROD(querryu))
                    {
                       // string abc = "select USERS_CATEGORY_ID,USERS_ID from SMVTS_USERS inner join SMVTS_CATEGORIES on USERS_CATEGORY_ID=CATEG_ID where USERS_USERNAME='" + _obj_Smvts_Users.USERS_USERNAME + "' and CATEG_NAME='" + orgname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "'";

                        string abc = "select USERS_ID,USERS_CATEGORY_ID from SMVTS_USERS   where USERS_CATEGORY_ID=(select CATEG_ID from SMVTS_CATEGORIES where CATEG_NAME='" + orgname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "')";

                        DataTable dt = Dal.ExecuteConfig(abc);

                        string querryv = partquerryu + ",@USERS_ID= '" + Convert.ToString(dt.Rows[0]["USERS_ID"]) + "',@USERS_CATEGORY_ID= '" + dt.Rows[0]["USERS_CATEGORY_ID"].ToString() + "'";

                        if (Dal.ExecuteNonQueryConfig(querryv))
                        {
                            status = true;
                        }

                        else
                        {
                            status = false;
                        }

                    }
                        
                }

                //    if (ExecuteNonQuery(querryu))
                //{
                //    if (dbname != "")
                //    {
                //        if (Dal.ExecuteNonQueryDB1(querryu, dbname))
                //        {
                //            status = true;
                //        }
                //    }
                //    else
                //    {
                //        status = true;
                //    }
                //}
                
                //if (dbname == "")
                //{

                //    if (ExecuteNonQuery(querryu))
                //        status = true;
                //}
                //else if (_obj_Smvts_Users.USERS_ROLE_ID != 4)
                //{
                //    //string abc="select * from smv"
                //    string abc = "select USERS_CATEGORY_ID,USERS_ID from SMVTS_USERS inner join SMVTS_CATEGORIES on USERS_CATEGORY_ID=CATEG_ID where USERS_USERNAME='" + _obj_Smvts_Users.USERS_USERNAME + "' and CATEG_NAME='" + orgname + "'";
                //    DataTable dt = Dal.ExecuteQueryDB1(abc, dbname);
                //    string querryv = partquerryu + ",@USERS_ID= '" + Convert.ToString(dt.Rows[0]["USERS_ID"]) + "',@USERS_CATEGORY_ID= '" + dt.Rows[0]["USERS_CATEGORY_ID"].ToString() + "'";

                //    if ((Dal.ExecuteNonQuery1(querryu)) && (Dal.ExecuteNonQueryDB1(querryv, dbname)))
                //    {
                //        status = true;
                //    }
                //    else
                //    {
                //        status = false;
                //    }
                //}
                //else if (_obj_Smvts_Users.USERS_ROLE_ID == 4)
                //{
                //    if ((Dal.ExecuteNonQueryDB1(querryu, dbname)))
                //    {
                //        status = true;
                //    }
                //    else
                //    {
                //        status = false;
                //    }
                //}
               

                //else
                //    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    public static bool set_Users_users(SMVTS_USERS _obj_Smvts_Users, string dbname, string orgname)
    {
        bool status = false;
        switch (_obj_Smvts_Users.OPERATION)
        {
            case operation.Insert:
                string querry = "";
                string querryI = "EXEC USP_SMVTS_USERS @Operation = 'Insert', @USERS_ROLE_ID='" + _obj_Smvts_Users.USERS_ROLE_ID
                                  + "', @USERS_USERNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME)
                                  + "', @USERS_PASSWORD ='" + Convert.ToString(_obj_Smvts_Users.USERS_PASSWORD)
                                  + "', @USERS_FULLNAME ='" + Convert.ToString(_obj_Smvts_Users.USERS_FULLNAME)
                                  + "', @USERS_STATUS='" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS)
                                  + "', @USERS_DEVICE_IDS='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS)
                                  + "', @USERS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Users.CREATEDBY)
                                  + "', @USERS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Users.CREATEDDATE)
                                  + "', @USERS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Users.LASTMDFBY)
                                  + "', @USERS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Users.LASTMDFDATE) + "'";
                //if (ExecuteNonQuery(querryI))
                //{
                //    if (dbname != "")
                //    {
                //        if (Dal.ExecuteNonQueryDB1(querryI, dbname))
                //        {
                //            status = true;
                //        }
                //    }
                //    else
                //    {
                //        status = true;
                //    }
                //}

                querry = querryI + ", @USERS_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Users.USERS_CATEGORY_ID) + "'";
                if (ExecuteNonQuery(querry))
                {
                    status = true;
                }
                else
                {
                    status = false;
                }
                break;
            case operation.Update:
                string querryu = "EXEC USP_SMVTS_USERS @Operation = 'Update',@USERS_ID= '" + Convert.ToString(_obj_Smvts_Users.USERS_ID)
                                  + "', @USERS_ROLE_ID= '" + _obj_Smvts_Users.USERS_ROLE_ID
                                  + "', @USERS_CATEGORY_ID= '" + _obj_Smvts_Users.USERS_CATEGORY_ID
                                  + "', @USERS_USERNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME)
                                  + "', @USERS_PASSWORD = '" + Convert.ToString(_obj_Smvts_Users.USERS_PASSWORD)
                                  + "', @USERS_FULLNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_FULLNAME)
                                  + "', @USERS_DEVICE_IDS='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS)
                                  + "', @USERS_STATUS= '" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS)
                                  + "', @USERS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Users.LASTMDFBY)
                                  + "', @USERS_MODIFIEDDATE= '" + Convert.ToString(_obj_Smvts_Users.LASTMDFDATE) + "'";
                //if (ExecuteNonQuery(querryu))
                //{
                //    if(dbname!="")
                //    {
                //        if (Dal.ExecuteNonQueryDB1(querryu, dbname))
                //            {
                //                status = true;
                //            }
                //    }
                //    else
                //    {
                //        status = true;
                //    }
                //}
                if (dbname == "")
                {

                    if (ExecuteNonQuery(querryu))
                        status = true;
                }
                else
                {
                    if (Dal.ExecuteNonQueryDB1(querryu, dbname))
                    {
                        status = true;
                    }
                }
                status = true;

                //else
                //    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    public static bool SET_USERS(SMVTS_USERS _obj_Smvts_Users, string dbname)
    {
        bool status = false;
        switch (_obj_Smvts_Users.OPERATION)
        {
            case operation.Insert:
                // string querry="";
                string querryI = "EXEC USP_SMVTS_USERS @Operation = 'Insert',@USERS_ID= '" + Convert.ToString(_obj_Smvts_Users.USERS_ID)
                                  + "', @USERS_ROLE_ID= '" + _obj_Smvts_Users.USERS_ROLE_ID
                                  + "', @USERS_CATEGORY_ID= '" + _obj_Smvts_Users.USERS_CATEGORY_ID
                                  + "', @USERS_USERNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME)
                                  + "', @USERS_PASSWORD = '" + Convert.ToString(_obj_Smvts_Users.USERS_PASSWORD)
                                  + "', @USERS_FULLNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_FULLNAME)
                                  + "', @USERS_DEVICE_IDS='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS)
                                  + "', @USERS_STATUS= '" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS)
                                  + "', @USERS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Users.LASTMDFBY)
                                  + "', @USERS_MODIFIEDDATE= '" + Convert.ToString(_obj_Smvts_Users.LASTMDFDATE) + "'";
                if (ExecuteNonQuery(querryI))
                {
                    if (dbname != "")
                    {
                        if (Dal.ExecuteNonQueryDB1(querryI, dbname))
                        {
                            status = true;
                        }
                    }
                    else
                    {
                        status = true;
                    }
                }
                else
                    status = false;
                break;
            case operation.Update:
                string querryu = "EXEC USP_SMVTS_USERS @Operation = 'Update',@USERS_ID= '" + Convert.ToString(_obj_Smvts_Users.USERS_ID)
                                  + "', @USERS_ROLE_ID= '" + _obj_Smvts_Users.USERS_ROLE_ID
                                  + "', @USERS_CATEGORY_ID= '" + _obj_Smvts_Users.USERS_CATEGORY_ID
                                  + "', @USERS_USERNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_USERNAME)
                                  + "', @USERS_PASSWORD = '" + Convert.ToString(_obj_Smvts_Users.USERS_PASSWORD)
                                  + "', @USERS_FULLNAME = '" + Convert.ToString(_obj_Smvts_Users.USERS_FULLNAME)
                                  + "', @USERS_DEVICE_IDS='" + Convert.ToString(_obj_Smvts_Users.USERS_DEVICE_IDS)
                                  + "', @USERS_STATUS= '" + Convert.ToString(_obj_Smvts_Users.USERS_STATUS)
                                  + "', @USERS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Users.LASTMDFBY)
                                  + "', @USERS_MODIFIEDDATE= '" + Convert.ToString(_obj_Smvts_Users.LASTMDFDATE) + "'";
                if (ExecuteNonQuery(querryu))
                {
                    if (dbname != "")
                    {
                        if (Dal.ExecuteNonQueryDB1(querryu, dbname))
                        {
                            status = true;
                        }
                    }
                    else
                    {
                        status = true;
                    }
                }
                //else
                //    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    public static bool set_SmsConfig(SMVTS_SMSCONFIG _objSmsconfig)
    {
        bool status = false;
        if (_objSmsconfig.OPERATION == operation.Insert)
        {
            if (ExecuteNonQuery("EXEC USP_SMVTS_SMSCONFIG @ID=" + _objSmsconfig.ID + ",@MODE='INSERT',@ALERTTYPE='" + _objSmsconfig.ALERTTYPE + "',@CELL='" + _objSmsconfig.CELL + "',@VEHICLE_NO='" + _objSmsconfig.VEHICLENO + "',@CATID=" + _objSmsconfig.CATID))
                status = true;
        }
        else if (_objSmsconfig.OPERATION == operation.Update)
        {
            if (ExecuteNonQuery("EXEC USP_SMVTS_SMSCONFIG @ID=" + _objSmsconfig.ID + ",@MODE='UPDATE',@ALERTTYPE='" + _objSmsconfig.ALERTTYPE + "',@CELL='" + _objSmsconfig.CELL + "',@VEHICLE_NO='" + _objSmsconfig.VEHICLENO + "',@CATID=" + _objSmsconfig.CATID))
                status = true;
        }

        else
            status = false;

        return status;
    }
    public static DataTable get_SmsConfig(SMVTS_SMSCONFIG _objSmsconfig)
    {
        DataTable dt = null;
        if (_objSmsconfig.ID == 0)
            dt = ExecuteQuery("EXEC [USP_SMVTS_SMSGETCONFIG] @ID=0, @CATID=" + _objSmsconfig.CATID);
        else
            dt = ExecuteQuery("EXEC [USP_SMVTS_SMSGETCONFIG] @ID=" + _objSmsconfig.ID + ",@CATID=" + _objSmsconfig.CATID);

        return dt;
    }
    public static DataTable Checknumber(string type, string alert_type, string vehicleno)
    {
        DataTable dt = null;
        if (type.ToUpper() == "SMS")
            dt = ExecuteQuery("EXEC [USP_SMVTS_CHECKNUMBER] @ALERTTYPE='" + alert_type + "', @VEHICLE_NO='" + vehicleno + "'");
        if (type.ToUpper() == "FLEETSMS")
            dt = ExecuteQuery("EXEC [USP_SMVTS_CHECKNUMBER_FLEET] @ALERTTYPE='" + alert_type + "', @VEHICLE_NO='" + vehicleno + "'");
        return dt;
    }
    public static DataTable get_Modem(SMVTS_CHANGEMODEM _objmodem)
    {
        DataTable dt = null;
        dt = ExecuteQuery("EXEC USP_SMVTS_MODEM @MODE='SELECT',@ID=0,@MODEM='" + string.Empty + "'");
        return dt;
    }
    public static bool set_Modem(SMVTS_CHANGEMODEM _objmodem)
    {
        bool status = false;
        if (ExecuteNonQuery("EXEC USP_SMVTS_MODEM @MODE='UPDATE',@ID=" + _objmodem.ID + ",@MODEM='" + _objmodem.MODEM + "'"))
            status = true;
        else
            status = false;
        return status;
    }

    #endregion

    #region SMVTS_USERROLE Methods


    public static DataTable get_UserRoles(SMVTS_USERROLES _obj_Smvts_UserRoles)
    {
        DataTable dt = new DataTable();
        if (_obj_Smvts_UserRoles.OPERATION == operation.Select)
        {
            if (Convert.ToString(_obj_Smvts_UserRoles.USERROLE_ID) == "0")
                dt = ExecuteQuery("EXEC USP_SMVTS_USERROLES @Operation = 'select'");
            else
                dt = ExecuteQuery("EXEC USP_SMVTS_USERROLES @Operation = 'select', @USERROLE_ID ='" + Convert.ToString(_obj_Smvts_UserRoles.USERROLE_ID) + "'");
        }
        if (_obj_Smvts_UserRoles.OPERATION == operation.SelectRoleTypes)
        {
            if (Convert.ToString(_obj_Smvts_UserRoles.USERROLE_ID) == "0")
                dt = ExecuteQuery("EXEC USP_SMVTS_USERROLES @Operation = 'SelectForClient'");
            
        }
        if (_obj_Smvts_UserRoles.OPERATION == operation.Update)
        {
            if (Convert.ToString(_obj_Smvts_UserRoles.USERROLE_CATEGORYTYPE_ID) != "0")
                dt = ExecuteQuery("EXEC USP_SMVTS_USERROLES @Operation = 'UpdateOrg' , @USERROLE_CATEGORYTYPE_ID ='" + Convert.ToString(_obj_Smvts_UserRoles.USERROLE_CATEGORYTYPE_ID) + "'");
            else
                dt = ExecuteQuery("EXEC USP_SMVTS_USERROLES @Operation = 'UpdateClient'");
        }



        if (_obj_Smvts_UserRoles.OPERATION == operation.Check)
        {
            dt = ExecuteQuery("EXEC USP_SMVTS_USERROLES @Operation = 'getClientRoleTypes',@USERROLE_CATEGORYTYPE_ID='" + _obj_Smvts_UserRoles.USERROLE_CATEGORYTYPE_ID + "'");
        }




        return dt;
    }


    #endregion

    #region SMVTS_COUNTRY Methods


    public static DataTable get_Country(SMVTS_COUNTRIES _obj_Smvts_Countries)
    {
        DataTable dt = new DataTable();
        if (_obj_Smvts_Countries.OPERATION == operation.Select)
        {
            if (Convert.ToString(_obj_Smvts_Countries.COUNTRY_ID) == "0")
                dt = ExecuteQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'select'");
            else
                dt = ExecuteQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'select', @COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_ID) + "'");
        }

        if (_obj_Smvts_Countries.OPERATION == operation.Insert)
        {
            dt = ExecuteQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'SelectOrderBy'");
        }
        if (_obj_Smvts_Countries.OPERATION == operation.Check)
        {
            if (_obj_Smvts_Countries.COUNTRY_ID.ToString() == "0")
                dt = ExecuteQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'Check', @COUNTRY_CODE ='" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_CODE) + "'");
            else
                dt = ExecuteQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'Check', @COUNTRY_CODE ='" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_CODE) + "', @COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_ID) + "'");
        }

        if (_obj_Smvts_Countries.OPERATION == operation.Update)
        {
            dt = Dal.ExecuteQueryDB("EXEC USP_SMVTS_COUNTRIES @Operation = 'GetTimeZone', @COUNTRY_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Countries.LASTMDFBY) + "'");
        }


        if (_obj_Smvts_Countries.OPERATION == operation.Empty)
        {
            if (_obj_Smvts_Countries.COUNTRY_ID.ToString() == "0")
                dt = ExecuteQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'Check', @COUNTRY_NAME = '" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_NAME) + "'");
            else
                dt = ExecuteQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'Check', @COUNTRY_NAME = '" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_NAME) + "', @COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_ID) + "'");
        }
        return dt;

    }

    public static int get_TimeZone(string parCategID)
    {
        SMVTS_COUNTRIES _obj_cnt = new SMVTS_COUNTRIES();
        _obj_cnt.LASTMDFBY = Convert.ToInt32(parCategID);
        _obj_cnt.OPERATION = operation.Update;

        DataTable dt = BLL.get_Country(_obj_cnt);
        if (dt.Rows.Count > 0)
        {
            return Convert.ToInt32(dt.Rows[0]["COUNTRY_TIMEZONE"]);
        }
        return 0;
    }

    public static bool set_Country(SMVTS_COUNTRIES _obj_Smvts_Countries)
    {
        bool status = false;
        switch (_obj_Smvts_Countries.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'Insert', @COUNTRY_CODE='" + _obj_Smvts_Countries.COUNTRY_CODE
                                  + "', @COUNTRY_NAME='" + _obj_Smvts_Countries.COUNTRY_NAME
                                  + "', @COUNTRY_DESC='" + _obj_Smvts_Countries.COUNTRY_DESC
                                  + "', @COUNTRY_TIMEZONE='" + _obj_Smvts_Countries.COUNTRY_TIMEZONE
                                  + "', @COUNTRY_CREATEDBY= " + Convert.ToString(_obj_Smvts_Countries.CREATEDBY)
                                  + " , @COUNTRY_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Countries.CREATEDDATE)
                                  + "', @COUNTRY_MODIFIEDBY =" + Convert.ToString(_obj_Smvts_Countries.LASTMDFBY)
                                  + " , @COUNTRY_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Countries.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'Update',@COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_ID)
                                  + "' , @COUNTRY_CODE ='" + _obj_Smvts_Countries.COUNTRY_CODE
                                  + "', @COUNTRY_NAME ='" + _obj_Smvts_Countries.COUNTRY_NAME
                                  + "', @COUNTRY_DESC ='" + _obj_Smvts_Countries.COUNTRY_DESC
                                  + "', @COUNTRY_TIMEZONE='" + _obj_Smvts_Countries.COUNTRY_TIMEZONE
                                  + "', @COUNTRY_MODIFIEDBY =" + Convert.ToString(_obj_Smvts_Countries.LASTMDFBY)
                                  + " , @COUNTRY_MODIFIEDDATE ='" + Convert.ToString(_obj_Smvts_Countries.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;

                break;
            case operation.Delete:
                if (ExecuteNonQuery("EXEC USP_SMVTS_COUNTRIES @Operation = 'Delete', @COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Countries.COUNTRY_ID)
                                  + "' , @COUNTRY_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Countries.LASTMDFBY)
                                  + "' , @COUNTRY_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Countries.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }
    #endregion

    #region RAWTRIPDATA method

    public static bool set_RawTripdata(string rawData, string deviceid, string rawtripdate, string dbname)
    {

        return (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_RAWTRIPDATA  @RAWTRIPDATA_DEVICE_ID='" + deviceid
                                 + "', @RAWTRIPDATA_DATE ='" + rawtripdate
                                 + "', @RAWDATA ='" + rawData + "'", dbname));
    }

    # endregion

    #region SMVTS_STATE Methods
    public static DataTable SMVTS_GETCOUNTRYID(string countryname)
    {

        DataTable dt = ExecuteQuery("EXEC SMVTS_GETCOUNTRYID @COUNTRY_NAME='" + countryname + "'");
        return dt;

    }
    public static DataTable SMVTS_GETSTATEID(string statename)
    {

        DataTable dt = ExecuteQuery("EXEC SMVTS_GETSTATEID @STATE_NAME='" + statename + "'");
        return dt;

    }
    public static DataTable getCityname(SMVTS_CITIES _objcityname)
    {

        DataTable dt = ExecuteQuery("EXEC SMVTS_GETCITYNAME @STATE_ID=" + _objcityname.CITY_STATE_ID + ",@STATE_COUNTRY_ID =" + _objcityname.CITY_COUNTRY_ID);
        return dt;

    }
    public static DataTable get_AssignedLandmark(string vehicle_no)
    {
        DataTable dt = ExecuteQuery("EXEC GETASSIGNEDLANDMARKS @VNO='" + vehicle_no + "'");
        return dt;
    }
    public static DataTable get_State(SMVTS_STATES _obj_Smvts_States)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_States.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_States.STATE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_STATES @Operation = 'select'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_STATES @Operation = 'select', @STATE_ID ='" + Convert.ToString(_obj_Smvts_States.STATE_ID) + "'");

                break;
            case operation.Check:
                // added coutry code by sridevi
                if (Convert.ToString(_obj_Smvts_States.STATE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_STATES @Operation = 'Check', @STATE_NAME ='" + Convert.ToString(_obj_Smvts_States.STATE_NAME) + "',@STATE_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_States.STATE_COUNTRY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_STATES @Operation = 'Check', @STATE_NAME ='" + Convert.ToString(_obj_Smvts_States.STATE_NAME) + "', @STATE_ID ='" + Convert.ToString(_obj_Smvts_States.STATE_ID) + "',@STATE_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_States.STATE_COUNTRY_ID) + "'");
                break;
            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_STATES @Operation = 'Select', @STATE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_States.STATE_COUNTRY_ID) + "'");
                break;
            default:
                break;
        }

        return dt;


    }
    public static bool changePassword(SMVTS_CHANGEPASSWORD _objChangePwd, int userid)
    {
        bool status = false;
        if (userid != 0)
        {
            if (ExecuteNonQuery1("EXEC SMVTS_CHANGEPASSWORD @OLDPWD='" + _objChangePwd.OLDPWD + "',@NEWPWD='" + _objChangePwd.NEWPWD + "',@USERS_USERNAME='" + _objChangePwd.USERNAME + "',@USERS_FULLNAME='" + _objChangePwd.FULLNAME + "',@USERS_ID=" + userid))
            {
                if (ExecuteNonQuery("EXEC SMVTS_CHANGEPASSWORD @OLDPWD='" + _objChangePwd.OLDPWD + "',@NEWPWD='" + _objChangePwd.NEWPWD + "',@USERS_USERNAME='" + _objChangePwd.USERNAME + "',@USERS_FULLNAME='" + _objChangePwd.FULLNAME + "',@USERS_ID=" + _objChangePwd.USERID))
                {
                    status = true;
                }
                else
                {
                    status = false;
                }
            }


        }
        else
        {
            if (ExecuteNonQuery("EXEC SMVTS_CHANGEPASSWORD @OLDPWD='" + _objChangePwd.OLDPWD + "',@NEWPWD='" + _objChangePwd.NEWPWD + "',@USERS_USERNAME='" + _objChangePwd.USERNAME + "',@USERS_FULLNAME='" + _objChangePwd.FULLNAME + "',@USERS_ID=" + _objChangePwd.USERID))
            {
                status = true;
            }
            else
            {
                status = false;
            }
        }
        return status;
    }
    public static bool set_State(SMVTS_STATES _obj_Smvts_States)
    {
        bool status = false;
        switch (_obj_Smvts_States.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_STATES @Operation = 'Insert', @STATE_NAME='" + _obj_Smvts_States.STATE_NAME
                                  + "', @STATE_DESC='" + _obj_Smvts_States.STATE_DESC
                                  + "', @STATE_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_States.STATE_COUNTRY_ID)
                                  + "', @STATE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_States.CREATEDBY)
                                  + "', @STATE_CREATEDDATE='" + Convert.ToString(_obj_Smvts_States.CREATEDDATE)
                                  + "', @STATE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_States.LASTMDFBY)
                                  + "', @STATE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_States.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_STATES @Operation = 'Update',@STATE_ID='" + Convert.ToString(_obj_Smvts_States.STATE_ID)
                                  + "', @STATE_NAME ='" + _obj_Smvts_States.STATE_NAME
                                  + "', @STATE_COUNTRY_ID ='" + _obj_Smvts_States.STATE_COUNTRY_ID
                                  + "', @STATE_DESC ='" + _obj_Smvts_States.STATE_DESC
                                  + "', @STATE_MODIFIEDBY =" + Convert.ToString(_obj_Smvts_States.LASTMDFBY)
                                  + " , @STATE_MODIFIEDDATE ='" + Convert.ToString(_obj_Smvts_States.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;

                break;
            case operation.Delete:
                if (ExecuteNonQuery("EXEC USP_SMVTS_STATES @Operation = 'Delete', @STATE_ID='" + Convert.ToString(_obj_Smvts_States.STATE_ID)
                                  + "' , @STATE_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_States.LASTMDFBY)
                                  + "' , @STATE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_States.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }
    #endregion

    #region SMVTS_CITIES Methods

    public static DataTable get_Cities(SMVTS_CITIES _obj_Smvts_Cities)
    {

        DataTable dtCities = new DataTable();
        switch (_obj_Smvts_Cities.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Cities.CITY_CITYID) == "0")
                    dtCities = ExecuteQuery("EXEC USP_SMVTS_CITIES @Operation = 'select'");
                else
                    dtCities = ExecuteQuery("EXEC USP_SMVTS_CITIES @Operation = 'select', @CITY_CITYID ='" + Convert.ToString(_obj_Smvts_Cities.CITY_CITYID) + "'");
                break;
            case operation.Check:
                // added stateid by sridevi.
                if (Convert.ToString(_obj_Smvts_Cities.CITY_CITYID) == "0")
                    dtCities = ExecuteQuery("EXEC USP_SMVTS_CITIES @Operation = 'Check', @CITY_NAME ='" + Convert.ToString(_obj_Smvts_Cities.CITY_NAME) + "', @CITY_STATE_ID ='" + Convert.ToString(_obj_Smvts_Cities.CITY_STATE_ID) + "'");
                else
                    dtCities = ExecuteQuery("EXEC USP_SMVTS_CITIES @Operation = 'Check', @CITY_NAME ='" + Convert.ToString(_obj_Smvts_Cities.CITY_NAME) + "', @CITY_STATE_ID ='" + Convert.ToString(_obj_Smvts_Cities.CITY_STATE_ID) + "', @CITY_CITYID ='" + Convert.ToString(_obj_Smvts_Cities.CITY_CITYID) + "'");
                break;
            case operation.Empty:
                dtCities = ExecuteQuery("EXEC USP_SMVTS_CITIES @Operation = 'SelectCity', @CITY_STATE_ID ='" + Convert.ToString(_obj_Smvts_Cities.CITY_STATE_ID) + "'");
                break;
            default:
                break;
        }
        return dtCities;
    }

    public static bool set_Cities(SMVTS_CITIES _obj_Smvts_Cities)
    {
        bool status = false;
        switch (_obj_Smvts_Cities.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CITIES @Operation = 'Insert', @CITY_NAME='" + _obj_Smvts_Cities.CITY_NAME
                                  + "', @CITY_DESC ='" + _obj_Smvts_Cities.CITY_DESC
                                  + "', @CITY_STATE_ID ='" + Convert.ToString(_obj_Smvts_Cities.CITY_STATE_ID)
                                  + "', @CITY_CREATEDBY = " + Convert.ToString(_obj_Smvts_Cities.CREATEDBY)
                                  + " , @CITY_CREATEDDATE ='" + Convert.ToString(_obj_Smvts_Cities.CREATEDDATE)
                                  + "', @CITY_MODIFIEDBY =" + Convert.ToString(_obj_Smvts_Cities.LASTMDFBY)
                                  + " , @CITY_MODIFIEDDATE ='" + Convert.ToString(_obj_Smvts_Cities.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CITIES @Operation = 'Update',@CITY_CITYID='" + Convert.ToString(_obj_Smvts_Cities.CITY_CITYID)
                                  + "', @CITY_NAME ='" + _obj_Smvts_Cities.CITY_NAME
                                  + "', @CITY_STATE_ID ='" + _obj_Smvts_Cities.CITY_STATE_ID
                                  + "', @CITY_DESC ='" + _obj_Smvts_Cities.CITY_DESC
                                  + "', @CITY_MODIFIEDBY =" + Convert.ToString(_obj_Smvts_Cities.LASTMDFBY)
                                  + " , @CITY_MODIFIEDDATE ='" + Convert.ToString(_obj_Smvts_Cities.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;

                break;
            case operation.Delete:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CITIES @Operation = 'Delete', @CITY_CITYID='" + Convert.ToString(_obj_Smvts_Cities.CITY_CITYID)
                                  + "' , @CITY_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Cities.LASTMDFBY)
                                  + "' , @CITY_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Cities.LASTMDFDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }
    #endregion

    #region SMVTS_CATEGORYTYPE Methods
    //This will only be having the get method.

    public static DataTable get_CategoryType(SMVTS_CATEGORYTYPE _obj_Smvts_CategoryType)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_CategoryType.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_CategoryType.CATETYP_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_CATEGORYTYPE @Operation = 'select'");
                else

                    dt = ExecuteQuery("EXEC USP_SMVTS_CATEGORYTYPE @Operation = 'select', @CATETYP_ID ='" + Convert.ToString(_obj_Smvts_CategoryType.CATETYP_ID) + "'");

                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_CategoryType.CATETYP_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_CATEGORYTYPE @Operation = 'Check', @CATETYP_NAME ='" + Convert.ToString(_obj_Smvts_CategoryType.CATETYP_NAME) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_CATEGORYTYPE @Operation = 'Check', @CATETYP_NAME ='" + Convert.ToString(_obj_Smvts_CategoryType.CATETYP_NAME) + "', @CATETYP_ID ='" + Convert.ToString(_obj_Smvts_CategoryType.CATETYP_ID) + "'");
                break;
            //case operation.Empty:
            //    dt = ExecuteQuery("EXEC USP_SMVTS_CATEGORYTYPE @Operation = 'Select', @STATE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_CategoryType.STATE_COUNTRY_ID) + "'");
            //    break;
            default:
                break;
        }
        return dt;

    }
    #endregion

    #region SMVTS_CATEGORIES Methods

    public static DataTable get_categ_ID(string categname)
    {
        DataTable dtCateg = new DataTable();

        dtCateg = Dal.ExecuteQuery1("select * from SMVTS_CATEGORIES where CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "' and CATEG_CATETYPE_ID=3 ");
        return dtCateg;
    }


    public static DataTable get_clienDBcateg_ID(string categname, string dbname)
    {
        DataTable dtCateg = new DataTable();

        dtCateg = Dal.ExecuteQueryDB1("select * from SMVTS_CATEGORIES where CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "'  and CATEG_CATETYPE_ID=3 ", dbname);
        return dtCateg;
    }

    public static DataTable get_Categories(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        DataTable dtCateg = new DataTable();
        switch (_obj_Smvts_Categories.OPERATION)
        {
            case operation.Select:
                if ((Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) != "0") && (Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) != "0") && (Convert.ToString(_obj_Smvts_Categories.CATEG_STATUS) == "1"))
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'select',@CATEG_CATETYPE_ID='"+ (Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) + "',@CATEG_STATUS='"+ Convert.ToString(_obj_Smvts_Categories.CATEG_STATUS) + "',@CATEG_PARENT_ID='"+ Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) + "'"));

                else if ((Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) != "0") && (Convert.ToString(_obj_Smvts_Categories.CATEG_STATUS) == "1"))

                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectSemiPartner',@CATEG_PARENT_ID="+ _obj_Smvts_Categories.CATEG_PARENT_ID + ",@CATEG_STATUS='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATUS)+"'");

                else  if ((Convert.ToString(_obj_Smvts_Categories.CATEG_ID) == "0") && (Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) == "3"))

                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_ClientID'");

                

                else if (Convert.ToString(_obj_Smvts_Categories.CATEG_ID) == "0")
                    dtCateg =ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'select'");

                

                else
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'select', @CATEG_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_ID) + "'");

                break;

            case operation.Delete:
                if (Convert.ToString(_obj_Smvts_Categories.CATEG_ID) == "0")
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'selectByOrder'");
                else
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_UOM', @CATEG_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_ID) + "'");

                break;

            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Categories.CATEG_ID) == "0")
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Check', @CATEG_NAME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NAME) + "'");
                else
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Check', @CATEG_NAME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NAME) + "', @CATEG_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_ID) + "'");

                break;
            case operation.Empty:
                dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_ParentID'");

                break;

            case operation.Update:
                if (Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) != "0")
                    //Get all Partners
                    //changes done for bajaj removed 1 from query
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Update' , @CATEG_CATETYPE_ID = '" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) + "'");
                else
                    //CTPL (Org)
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_Org'");

                break;

            case operation.Insert:
                if ((Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) != "0") && (Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) == "0"))
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'GetAllClient' , @CATEG_CATETYPE_ID = '" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) + "', @CATEG_ID = '" + Convert.ToString(_obj_Smvts_Categories.CATEG_ID) + "'");
                else if (Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) != "0")
                    dtCateg = ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'GetAllClient' , @CATEG_CATETYPE_ID = '" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID) + "', @CATEG_PARENT_ID = '" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) + "'");
                else
                    //Get all Clients
                    dtCateg = ExecuteQuery1("EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_ClientID'");

                break;

            default:
                break;
        }
        return dtCateg;

    }
    public static DataTable get_Plants(SMVTS_LANDMARKS _obj_Smvts_Landmarks)
    {
        DataTable dtPlants = new DataTable();
        switch (_obj_Smvts_Landmarks.OPERATION)
        {
            case operation.Select:
                if ((Convert.ToString(_obj_Smvts_Landmarks.LANDMARKS_CATEGORY_ID) == "87"))
                    dtPlants = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS_PLANTS @Operation = 'Select'");
                break;

            default:
                break;
        }
        return dtPlants;
    }


    //loadlandmark address for lohiya
    public static DataTable get_landmarks(SMVTS_LANDMARKS _obj_Smvts_Landmarks)
    {
        int columnNumber = 1;
        DataTable dtlandmarks = new DataTable();
        switch (_obj_Smvts_Landmarks.OPERATION)
        {
            case operation.Select:
                //if ((Convert.ToString(_obj_Smvts_Landmarks.LANDMARKS_CATEGORY_ID) == "87"))
                dtlandmarks = ExecuteQuery("EXEC [USP_SMVTS_LANDMARKS_LOHIYA] @Operation = 'Select'");
                //for (int i = 0; i < dtlandmarks.Rows.Count; i++)
                //{

                //    if (dtlandmarks.Rows[i][columnNumber].ToString() == "LOHIYA GROUP KAKINADA")
                //    { dtlandmarks.Rows[i][columnNumber] = "Lohiya Group kakinada"; }

                //}
                break;

            default:
                break;

        }
        return dtlandmarks;

    }
    internal static bool SETCATEGORY(SMVTS_CATEGORIES _obj_Smvts_Categories, string dbname, string categname, string FormIds, string ColumnIds,int RoleType,string password,string old_name,string parent_name)
    {
        bool status = false;
        switch (_obj_Smvts_Categories.OPERATION)
        {

            case operation.Insert:

                string Query = "";
                string PartQuery = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Insert', @CATEG_NAME='" + _obj_Smvts_Categories.CATEG_NAME
                              + "', @CATEG_DESC ='" + _obj_Smvts_Categories.CATEG_DESC
                              + "', @CATEG_STATUS ='" + _obj_Smvts_Categories.CATEG_STATUS

                              + "', @CATEG_CATETYPE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID)
                              + "', @CATEG_CONTACTPERSON ='" + _obj_Smvts_Categories.CATEG_CONTACTPERSON
                              + "', @CATEG_MOBILENUMBER ='" + _obj_Smvts_Categories.CATEG_MOBILENUMBER
                              + "', @CATEG_TELEPHONE ='" + _obj_Smvts_Categories.CATEG_TELEPHONE
                              + "', @CATEG_FAX ='" + _obj_Smvts_Categories.CATEG_FAX

                              + "', @CATEG_WEBSITENAME ='" + _obj_Smvts_Categories.CATEG_WEBSITENAME
                              + "', @CATEG_EMAILID ='" + _obj_Smvts_Categories.CATEG_EMAILID
                              + "', @CATEG_ADDRESS ='" + _obj_Smvts_Categories.CATEG_ADDRESS

                              + "', @CATEG_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_COUNTRY_ID)
                              + "', @CATEG_STATE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATE_ID)
                              + "', @CATEG_CITY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CITY_ID)
                              + "', @CATEG_ZIPCODE ='" + _obj_Smvts_Categories.CATEG_ZIPCODE
                              + "', @CATEG_NOOFUSERS ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NOOFUSERS)

                              + "', @CATEG_CREATEDBY = " + Convert.ToString(_obj_Smvts_Categories.CREATEDBY)
                              + " , @CATEG_CREATEDDATE ='" + _obj_Smvts_Categories.CREATEDDATE.ToString("MM/dd/yyyy")
                              + "', @CATEG_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Categories.LASTMDFBY)
                              + "', @CATEG_MODIFIEDDATE ='" + _obj_Smvts_Categories.LASTMDFDATE.ToString("MM/dd/yyyy")
                              + "', @CATEG_UOMSPEED ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMSPEED)
                              + "', @CATEG_UOMVOLUME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMVOLUME)
                              + "',@CATEG_DBNAME='" + Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME)
                              + "',@CATG_NOOFDEVICES='" + Convert.ToInt32(_obj_Smvts_Categories.CATG_NOOFDEVICES)
                               + "',@CATEG_REFER_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_REFER_ID)
                              + ",@CATEG_PRODNAME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PRODNAME)
                              + "',@CATEG_PACKAGE_ID='" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_PACKAGE_ID)
                              + "',@FormIds='" + FormIds + "',@ColumnIDS='" + ColumnIds + "',@RoleType=" + RoleType + ",@CATEG_WLP=" + _obj_Smvts_Categories.CATEG_WLP + ",@Logo_url='" + _obj_Smvts_Categories.Logo_Url + "',@CATEG_VALID_TO='" + _obj_Smvts_Categories.CATEG_VALID_TO.ToString("MM/dd/yyyy") + "',@user_password='" + password + "'";

                Query = PartQuery + ",@CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) + "'";
                //Query=PartQuery      + "', @CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID)+"'";
                dbname = Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME);

                if (_obj_Smvts_Categories.CATEG_PARENT_ID == 1)
                {

                    if (Dal.ExecuteNonQueryConfig(Query))
                    {
                        if (dbname != "")
                        {
                            if (Dal.ExecuteNonQueryPROD(Query))
                            {
                                status = true;
                            }
                            else
                            {
                                status = false;
                            }
                        }
                    }

                }

                else
                {
                    if (Dal.ExecuteNonQueryPROD(Query))
                    {
                        string abc = "";
                        abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "' ";
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteConfig(abc);
                        {
                            Query = PartQuery + ", @CATEG_PARENT_ID   ='" + dt_categ.Rows[0][0].ToString() + "'";
                        }
                        if (Dal.ExecuteNonQueryConfig(Query))
                        {
                            status = true;
                        }
                        else
                        {
                            status = false;
                        }
                    }
           
                   
                    else
                    {
                        status = false;
                    }
                }
                //if (_obj_Smvts_Categories.CATEG_PARENT_ID==1)
                //{
                //    if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 2)
                //    {
                //        if (Dal.ExecuteNonQueryConfig(Query))
                //        {
                //            //if (dbname != "")
                //            {
                //                if (Dal.ExecuteNonQueryPROD(Query))
                //                {
                //                    status = true;
                //                }
                //                else
                //                {
                //                    status = false;
                //                }
                //            }
                //        }
                //    }
                //    if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 3)
                //    {
                //        if (Dal.ExecuteNonQueryConfig(Query))
                //        {
                //            if (dbname != "")
                //            {
                //                string abc = "";
                //                abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname + "' ";
                //                //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                //                DataTable dt_categ = new DataTable();
                //                dt_categ = Dal.ExecutePRODDB(abc);
                //                {
                //                    Query = PartQuery + ", @CATEG_PARENT_ID   ='" + dt_categ.Rows[0][0].ToString() + "'";
                //                }
                //                if (Dal.ExecuteNonQueryPROD(Query))
                //                {
                //                    status = true;
                //                }
                //            }
                //            else
                //            {
                //                status = false;
                //            }

                //        }

                //    }
                //}
                //else
                //{
                //    if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 4 || _obj_Smvts_Categories.CATEG_CATETYPE_ID == 3)
                //    {
                //        if (Dal.ExecuteNonQueryPROD(Query))
                //        {
                //            string abc = "";
                //            abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname + "' ";
                //            //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                //            DataTable dt_categ = new DataTable();
                //            dt_categ = Dal.ExecuteConfig(abc);
                //            {
                //                Query = PartQuery + ", @CATEG_PARENT_ID   ='" + dt_categ.Rows[0][0].ToString() + "'";
                //            }
                //            if (Dal.ExecuteNonQueryConfig(Query))
                //            {
                //                status = true;
                //            }
                //        }
                //    }
          
                //}
             

                return status;
                //else
                //    status = false;
                break;
            case operation.Update:

                string partstrsql = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Update', @CATEG_NAME ='" + _obj_Smvts_Categories.CATEG_NAME
                                  + "', @CATEG_DESC ='" + _obj_Smvts_Categories.CATEG_DESC
                                  + "', @CATEG_STATUS ='" + _obj_Smvts_Categories.CATEG_STATUS

                                  + "', @CATEG_CATETYPE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID)
                                  + "', @CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID)

                                  + "', @CATEG_CONTACTPERSON ='" + _obj_Smvts_Categories.CATEG_CONTACTPERSON
                                  + "', @CATEG_MOBILENUMBER ='" + _obj_Smvts_Categories.CATEG_MOBILENUMBER
                                  + "', @CATEG_TELEPHONE ='" + _obj_Smvts_Categories.CATEG_TELEPHONE
                                  + "', @CATEG_FAX ='" + _obj_Smvts_Categories.CATEG_FAX

                                  + "', @CATEG_WEBSITENAME ='" + _obj_Smvts_Categories.CATEG_WEBSITENAME
                                  + "', @CATEG_EMAILID ='" + _obj_Smvts_Categories.CATEG_EMAILID
                                  + "', @CATEG_ADDRESS ='" + _obj_Smvts_Categories.CATEG_ADDRESS

                                  + "', @CATEG_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_COUNTRY_ID)
                                  + "', @CATEG_STATE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATE_ID)
                                  + "', @CATEG_CITY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CITY_ID)
                                  + "', @CATEG_ZIPCODE ='" + _obj_Smvts_Categories.CATEG_ZIPCODE
                                  + "', @CATEG_NOOFUSERS ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NOOFUSERS)

                                  + "', @CATEG_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Categories.LASTMDFBY)
                                  + "', @CATEG_MODIFIEDDATE ='" + _obj_Smvts_Categories.LASTMDFDATE.ToString("MM/dd/yyyy")
                                  + "', @CATEG_UOMSPEED ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMSPEED)
                                  + "', @CATEG_UOMVOLUME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMVOLUME)
                                   + "',@CATEG_DBNAME='" + Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME)
                                  + "',@CATG_NOOFDEVICES='" + Convert.ToInt32(_obj_Smvts_Categories.CATG_NOOFDEVICES)
                                    + "',@CATEG_PRODNAME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PRODNAME)
                                  + "',@CATEG_PACKAGE_ID='" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_PACKAGE_ID)
                              + "',@FormIds='" + FormIds + "',@ColumnIDS='" + ColumnIds + "',@RoleType=" + RoleType + ",@CATEG_WLP=" + _obj_Smvts_Categories.CATEG_WLP + ",@Logo_url='" + _obj_Smvts_Categories.Logo_Url + "',@CATEG_VALID_TO='" + _obj_Smvts_Categories.CATEG_VALID_TO + "',@user_password='" + password + "'";

                string strsql = partstrsql + ",@CATEG_ID='" + Convert.ToString(_obj_Smvts_Categories.CATEG_ID) + "'";

                //string categQuery = " SELECT CATEG_NAME FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_ID=" + _obj_Smvts_Categories.CATEG_ID + "";
                //DataTable dt_1 = Dal.ExecuteQuery1(categQuery);
                //string CATEGNAME = "";
                //CATEGNAME = dt_1.Rows[0]["CATEG_NAME"].ToString();

              //  dbname = Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME);
                if (_obj_Smvts_Categories.CATEG_PARENT_ID == 1)
                {

                    if (ExecuteNonQuery(strsql))
                    {
                        string abc = "";
                        // abc = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + old_name.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "' and CATEG_CATETYPE_ID='" + _obj_Smvts_Categories.CATEG_CATETYPE_ID + "' AND CATEG_PARENT_ID="+ parent_id + " ";
                        abc = " select categ_id from smvts_categories where categ_parent_id=(select categ_id from smvts_categories where categ_name='" + parent_name + "') and categ_name='" + old_name + "'";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQuery_Prod(abc);
                        if(dt_categ.Rows.Count>0)
                        {
                            string strprod = partstrsql + ",@CATEG_ID='" + Convert.ToString(dt_categ.Rows[0][0]) + "'";
                            if(Dal.ExecuteNonQueryPROD(strprod))
                            {
                                status = true;
                            }
                            else
                            {
                                status = false;
                            }
                        }
                    }
                    else
                    {
                        status = false;
                    }
                }
                else
                {
                    if(Dal.ExecuteNonQueryPROD(strsql))
                    {
                        string abc = "";
                        abc = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + _obj_Smvts_Categories.CATEG_NAME.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "' and CATEG_CATETYPE_ID='" + _obj_Smvts_Categories.CATEG_CATETYPE_ID + "' ";

                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteConfig(abc);
                        string config= partstrsql + ",@CATEG_ID='" + Convert.ToString(dt_categ.Rows[0][0]) + "'";

                        if(Dal.ExecuteNonQueryConfig(config))
                        {
                            status = true;
                        }
                        else
                        {
                            status = false;
                        }
                    }
                    

                }
                break;

            default:
                break;
        }
        return status;
    }


    public static bool set_Categories(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        bool status = false;
        switch (_obj_Smvts_Categories.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Insert', @CATEG_NAME='" + _obj_Smvts_Categories.CATEG_NAME
                                  + "', @CATEG_DESC ='" + _obj_Smvts_Categories.CATEG_DESC
                                  + "', @CATEG_STATUS ='" + _obj_Smvts_Categories.CATEG_STATUS

                                  + "', @CATEG_CATETYPE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID)
                                  + "', @CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID)

                                  + "', @CATEG_CONTACTPERSON ='" + _obj_Smvts_Categories.CATEG_CONTACTPERSON
                                  + "', @CATEG_MOBILENUMBER ='" + _obj_Smvts_Categories.CATEG_MOBILENUMBER
                                  + "', @CATEG_TELEPHONE ='" + _obj_Smvts_Categories.CATEG_TELEPHONE
                                  + "', @CATEG_FAX ='" + _obj_Smvts_Categories.CATEG_FAX

                                  + "', @CATEG_WEBSITENAME ='" + _obj_Smvts_Categories.CATEG_WEBSITENAME
                                  + "', @CATEG_EMAILID ='" + _obj_Smvts_Categories.CATEG_EMAILID
                                  + "', @CATEG_ADDRESS ='" + _obj_Smvts_Categories.CATEG_ADDRESS

                                  + "', @CATEG_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_COUNTRY_ID)
                                  + "', @CATEG_STATE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATE_ID)
                                  + "', @CATEG_CITY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CITY_ID)
                                  + "', @CATEG_ZIPCODE ='" + _obj_Smvts_Categories.CATEG_ZIPCODE
                                  + "', @CATEG_NOOFUSERS ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NOOFUSERS)

                                  + "', @CATEG_CREATEDBY = " + Convert.ToString(_obj_Smvts_Categories.CREATEDBY)
                                  + " , @CATEG_CREATEDDATE ='" + _obj_Smvts_Categories.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @CATEG_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Categories.LASTMDFBY)
                                  + "', @CATEG_MODIFIEDDATE ='" + _obj_Smvts_Categories.LASTMDFDATE.ToString("MM/dd/yyyy")
                                  + "', @CATEG_UOMSPEED ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMSPEED)
                                  + "', @CATEG_UOMVOLUME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMVOLUME) + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                string strsql = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Update',@CATEG_ID='" + Convert.ToString(_obj_Smvts_Categories.CATEG_ID)
                                  + "', @CATEG_NAME ='" + _obj_Smvts_Categories.CATEG_NAME
                                  + "', @CATEG_DESC ='" + _obj_Smvts_Categories.CATEG_DESC
                                  + "', @CATEG_STATUS ='" + _obj_Smvts_Categories.CATEG_STATUS

                                  + "', @CATEG_CATETYPE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID)
                                  + "', @CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID)

                                  + "', @CATEG_CONTACTPERSON ='" + _obj_Smvts_Categories.CATEG_CONTACTPERSON
                                  + "', @CATEG_MOBILENUMBER ='" + _obj_Smvts_Categories.CATEG_MOBILENUMBER
                                  + "', @CATEG_TELEPHONE ='" + _obj_Smvts_Categories.CATEG_TELEPHONE
                                  + "', @CATEG_FAX ='" + _obj_Smvts_Categories.CATEG_FAX

                                  + "', @CATEG_WEBSITENAME ='" + _obj_Smvts_Categories.CATEG_WEBSITENAME
                                  + "', @CATEG_EMAILID ='" + _obj_Smvts_Categories.CATEG_EMAILID
                                  + "', @CATEG_ADDRESS ='" + _obj_Smvts_Categories.CATEG_ADDRESS

                                  + "', @CATEG_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_COUNTRY_ID)
                                  + "', @CATEG_STATE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATE_ID)
                                  + "', @CATEG_CITY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CITY_ID)
                                  + "', @CATEG_ZIPCODE ='" + _obj_Smvts_Categories.CATEG_ZIPCODE
                                  + "', @CATEG_NOOFUSERS ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NOOFUSERS)

                                  + "', @CATEG_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Categories.LASTMDFBY)
                                  + "', @CATEG_MODIFIEDDATE ='" + _obj_Smvts_Categories.LASTMDFDATE.ToString("MM/dd/yyyy")
                                  + "', @CATEG_UOMSPEED ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMSPEED)
                                  + "', @CATEG_UOMVOLUME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMVOLUME) + "'";
                if (ExecuteNonQuery(strsql))
                    status = true;
                else
                    status = false;

                break;
            //case operation.Delete:
            //    if (ExecuteNonQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Delete', @CATEG_ID='" + Convert.ToString(_obj_Smvts_Categories.CATEG_ID)
            //                     + "' , @CATEG_STATUS ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATUS)
            //                     + "' , @CITY_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Categories.LASTMDFBY)
            //                     + "' , @CITY_MODIFIEDDATE='" + _obj_Smvts_Categories.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
            //        status = true;
            //    else
            //        status = false;
            //    break;
            default:
                break;
        }
        return status;
    }
    #endregion

    #region SMVTS_GLOBALSETTINGS Methods
    /// <summary>
    /// Writtenby Sridevi on 24/12/2009 12:56 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Globalsettings"></param>
    /// <returns></returns>
    public static DataTable get_GlobalSettings(SMVTS_GLOBALSETTINGS _obj_Smvts_Globalsettings)
    {

        //if (_obj_Smvts_Globalsettings.OPERATION == operation.Select)
        //{

        if (Convert.ToString(_obj_Smvts_Globalsettings.GBLSET_ID) == "0")
            return ExecuteQuery("USP_SMVTS_GLOBALSETTINGS @Operation = 'select'");
        else
            return ExecuteQuery("USP_SMVTS_GLOBALSETTINGS @Operation = 'select',@GBLSET_ID='" + Convert.ToString(_obj_Smvts_Globalsettings.GBLSET_ID) + "'");
        //}
    }
    public static bool set_GlobalSettings(SMVTS_GLOBALSETTINGS _obj_Smvts_Globalsettings)
    {
        bool status = false;
        if (_obj_Smvts_Globalsettings.OPERATION == operation.Update)
        {
            if (ExecuteNonQuery("USP_SMVTS_GLOBALSETTINGS @Operation='Update',@GBLSET_ID='" + _obj_Smvts_Globalsettings.GBLSET_ID
                + "' , @GBLSET_STOPDURATION='" + _obj_Smvts_Globalsettings.GBLSET_STOPDURATION
                + "' , @GBLSET_OVERSPEEDDURATION='" + _obj_Smvts_Globalsettings.GBLSET_OVERSPEEDDURATION
                + "' , @GBLSET_DATADURATION='" + _obj_Smvts_Globalsettings.GBLSET_DATADURATION + "'"))
                status = true;
            else
                status = false;
        }
        return status;
    }

    #endregion

    #region SMVTS_DRIVERS Methods
    /// <summary>
    /// Writtenby Sridevi on 24/12/2009 6:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Globalsettings"></param>
    /// <returns></returns>

    public static DataTable get_Drivers(SMVTS_DRIVERS _obj_Smvts_Drivers)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Drivers.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'select', @DRIVER_CATEGORY_ID=" + (Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) == "0" ? "null" : "'" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'")
                                            + ", @DRIVER_ID =" + (Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) == "0" ? "null" : "'" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) + "'") + "");
                break;

            case operation.Check://to check for already exising Driver name
                if (Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Check', @DRIVER_NAME ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_NAME) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Check', @DRIVER_NAME ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_NAME) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) + "'");

                break;

            case operation.Insert: //to check for already exising Licence No
                if (Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Checklicense', @DRIVER_LICENSENO ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Checklicense', @DRIVER_LICENSENO ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) + "'");

                break;


            case operation.Empty:
                if (!(_obj_Smvts_Drivers.DRIVER_STATUS))
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Select', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Select', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_STATUS ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS) + "'");
                break;
            case operation.Update:

                dt = ExecuteQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'FreeDrivers', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_STATUS ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS) + "', @DRIVER_ID=" + (_obj_Smvts_Drivers.DRIVER_ID == 0 ? "null" : "'" + _obj_Smvts_Drivers.DRIVER_ID + "'"));



                break;

            default:
                break;
        }
        return dt;
    }


    public static bool set_Drivers(SMVTS_DRIVERS _obj_Smvts_Drivers)
    {
        bool status = false;
        switch (_obj_Smvts_Drivers.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Insert', @DRIVER_NAME='" + _obj_Smvts_Drivers.DRIVER_NAME
                                 + "', @DRIVER_DESC='" + _obj_Smvts_Drivers.DRIVER_DESC
                                 + "', @DRIVER_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID)
                                 + "', @DRIVER_MOBILENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_MOBILENO)
                                 + "', @DRIVER_ADDRESS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ADDRESS)
                                 + "', @DRIVER_LICENSENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO)
                                 + "', @DRIVER_ISSUEDATE=" + (_obj_Smvts_Drivers.DRIVER_ISSUEDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_ISSUEDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_EXPIRYDATE=" + (_obj_Smvts_Drivers.DRIVER_EXPIRYDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_EXPIRYDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_STATUS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS)
                                 + "', @DRIVER_CREATEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.CREATEDBY)
                                 + "', @DRIVER_CREATEDDATE='" + _obj_Smvts_Drivers.CREATEDDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.LASTMDFBY)
                                 + "', @DRIVER_MODIFIEDDATE='" + _obj_Smvts_Drivers.LASTMDFDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_BLOODGROUP='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_BLOODGROUP)
                                 + "',  @DRIVER_PHOTO_PATH='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_PHOTO_PATH)
                                 + "', @DRIVER_LANGUAGES='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LANGUAGES)
                                 + "',@DRIVER_FORMAN='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_FORMAN)
                                 + "'"))


                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_DRIVERS @Operation = 'Update',@DRIVER_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID)
                                 + "', @DRIVER_NAME='" + _obj_Smvts_Drivers.DRIVER_NAME
                                 + "', @DRIVER_DESC='" + _obj_Smvts_Drivers.DRIVER_DESC
                                 + "', @DRIVER_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID)
                                 + "', @DRIVER_MOBILENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_MOBILENO)
                                 + "', @DRIVER_ADDRESS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ADDRESS)
                                 + "', @DRIVER_LICENSENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO)
                                 + "', @DRIVER_ISSUEDATE=" + (_obj_Smvts_Drivers.DRIVER_ISSUEDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_ISSUEDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_EXPIRYDATE=" + (_obj_Smvts_Drivers.DRIVER_EXPIRYDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_EXPIRYDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_STATUS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS)
                                 + "', @DRIVER_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.LASTMDFBY)
                                 + "', @DRIVER_MODIFIEDDATE='" + _obj_Smvts_Drivers.LASTMDFDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_BLOODGROUP='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_BLOODGROUP)
                                 + "', @DRIVER_PHOTO_PATH='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_PHOTO_PATH)
                                 + "', @DRIVER_LANGUAGES='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LANGUAGES)
                                  + "',@DRIVER_FORMAN='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_FORMAN)
                                 + "'"))
                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }

    public static bool set_Drivers1(SMVTS_DRIVERS _obj_Smvts_Drivers, string dbname, string categname)
    {
        bool status = false;
        switch (_obj_Smvts_Drivers.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Insert', @DRIVER_NAME='" + _obj_Smvts_Drivers.DRIVER_NAME
                                 + "', @DRIVER_DESC='" + _obj_Smvts_Drivers.DRIVER_DESC
                                 + "', @DRIVER_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID)
                                 + "', @DRIVER_MOBILENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_MOBILENO)
                                 + "', @DRIVER_ADDRESS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ADDRESS)
                                 + "', @DRIVER_LICENSENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO)
                                 + "', @DRIVER_ISSUEDATE=" + (_obj_Smvts_Drivers.DRIVER_ISSUEDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_ISSUEDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_EXPIRYDATE=" + (_obj_Smvts_Drivers.DRIVER_EXPIRYDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_EXPIRYDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_STATUS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS)
                                 + "', @DRIVER_CREATEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.CREATEDBY)
                                 + "', @DRIVER_CREATEDDATE='" + _obj_Smvts_Drivers.CREATEDDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.LASTMDFBY)
                                 + "', @DRIVER_MODIFIEDDATE='" + _obj_Smvts_Drivers.LASTMDFDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_BLOODGROUP='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_BLOODGROUP)
                                 + "',  @DRIVER_PHOTO_PATH='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_PHOTO_PATH)
                                 + "', @DRIVER_LANGUAGES='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LANGUAGES)
                                 + "',@DRIVER_FORMAN='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_FORMAN)
                                 + "'", dbname))


                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Update',@DRIVER_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID)
                                 + "', @DRIVER_NAME='" + _obj_Smvts_Drivers.DRIVER_NAME
                                 + "', @DRIVER_DESC='" + _obj_Smvts_Drivers.DRIVER_DESC
                                 + "', @DRIVER_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID)
                                 + "', @DRIVER_MOBILENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_MOBILENO)
                                 + "', @DRIVER_ADDRESS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ADDRESS)
                                 + "', @DRIVER_LICENSENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO)
                                 + "', @DRIVER_ISSUEDATE=" + (_obj_Smvts_Drivers.DRIVER_ISSUEDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_ISSUEDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_EXPIRYDATE=" + (_obj_Smvts_Drivers.DRIVER_EXPIRYDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_EXPIRYDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_STATUS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS)
                                 + "', @DRIVER_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.LASTMDFBY)
                                 + "', @DRIVER_MODIFIEDDATE='" + _obj_Smvts_Drivers.LASTMDFDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_BLOODGROUP='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_BLOODGROUP)
                                 + "', @DRIVER_PHOTO_PATH='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_PHOTO_PATH)
                                 + "', @DRIVER_LANGUAGES='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LANGUAGES)
                                  + "',@DRIVER_FORMAN='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_FORMAN)
                                 + "'", dbname))
                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }



    #endregion

    #region SMVTS_CONSIGNMENT Methods
    /// <summary>
    /// Writtenby Sridevi on 25/12/2009 12:10:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_Consignment(SMVTS_CONSIGNMENT _obj_Smvts_Consignment)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Consignment.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_ID) != "0")
                    dt = ExecuteQuery("EXEC [USP_SMVTS_CONSIGNMENT] @Operation = 'Select', @CONSIGNMENT_ID ='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONSIGNMENT @Operation = 'Select', @CONSIGNMENT_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_CATEG_ID) + "'");
                break;

            case operation.Check:
                //if ((Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_ID) == "0") && (_obj_Smvts_Consignment.CONSIGNMENT_DETAILS == "0"))
                if (Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONSIGNMENT @Operation = 'CHECK', @CONSIGNMENT_DETAILS ='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_DETAILS) + "' ,@CONSIGNMENT_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_CATEG_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONSIGNMENT @Operation = 'CHECK', @CONSIGNMENT_DETAILS ='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_DETAILS) + "', @CONSIGNMENT_ID ='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_ID) + "', @CONSIGNMENT_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_CATEG_ID) + "'");
                break;


            default:
                break;
        }
        return dt;
    }


    public static bool set_Consignment(SMVTS_CONSIGNMENT _obj_Smvts_Consignment)
    {
        bool status = false;
        switch (_obj_Smvts_Consignment.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CONSIGNMENT @Operation = 'Insert',  @CONSIGNMENT_DETAILS='" + _obj_Smvts_Consignment.CONSIGNMENT_DETAILS
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CATEG_ID='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_CATEG_ID) + "'"))

                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CONSIGNMENT @Operation = 'Update', @CONSIGNMENT_ID='" + _obj_Smvts_Consignment.CONSIGNMENT_ID
                                  + "', @CONSIGNMENT_DETAILS='" + _obj_Smvts_Consignment.CONSIGNMENT_DETAILS
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CATEG_ID='" + Convert.ToString(_obj_Smvts_Consignment.CONSIGNMENT_CATEG_ID) + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    internal static DataTable get_FleetSmsconfig(SMVTS_FLEETCONFIG _objFleetconfig)
    {
        DataTable dt = new DataTable();
        if (_objFleetconfig.OPERATION == operation.Select && _objFleetconfig.ID == 0)
            dt = ExecuteQuery("EXEC [USP_SMVTS_FLEETSMSCONFIG] @OPERATION='SELECT', @SMS_CATEGORYID=" + _objFleetconfig.CATEGORYID);
        if (_objFleetconfig.OPERATION == operation.Select && _objFleetconfig.ID != 0)
            dt = ExecuteQuery("EXEC [USP_SMVTS_FLEETSMSCONFIG] @OPERATION='SELECT',@SIM_ID=" + _objFleetconfig.ID);
        return dt;
    }


    #endregion

    #region SMVTS_SIMS Methods
    /// <summary>
    /// Writtenby Sridevi on 25/12/2009 12:10:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>
    ////vikranth santosjh
    public static DataTable get_Sims(SMVTS_SIMS _obj_Smvts_Sims)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Sims.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Sims.SIM_ID) != "0")
                    dt = Dal.ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Select', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "'");
                else if (Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0" && _obj_Smvts_Sims.SIM_CATEGORY_ID != 0)
                    
                    dt = Dal.ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Select',@SIM_CATEGORY_ID='"+ _obj_Smvts_Sims.SIM_CATEGORY_ID + "'");

                else if (Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0" && _obj_Smvts_Sims.SIM_CATEGORY_ID==0)
                    //    dt = ExecuteQuery1("EXEC USP_SMVTS_SIMS @Operation = 'select'");
                    //else       //by venkatesh 28 feb 2018
                    dt =Dal.ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Select'");
                

                break;
            case operation.SelectSemi:

              if (Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) != "0" && Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0")
                    dt = Dal.ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'SelectSemiPartner', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
                break;
            case operation.Insert:

                dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Select' ");
                break;

            case operation.Check:
                if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_NUMBER != "0"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_NUMBER ='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER) + "' ,@SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_NUMBER ='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER) + "', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
                break;
            case operation.Delete:

                if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_SERIALNO != "0"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");

                break;

            case operation.Empty:
                if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
                    //client add
                    dt = ExecuteQuery1("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");


                else if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) == "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
                    //dhnaush add
                    dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'");

                break;

            case operation.Update:
                if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
                    //Find out Current Sim and Free sim for Client  (edit)
                    dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'FreeSimEdit', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'");

                else
                    //Find out Current Sim and Free sim for Org (edit)
                    dt = ExecuteQuery1("EXEC USP_SMVTS_SIMS @Operation = 'FreeSimEdit', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'");

                break;
            default:
                break;
        }
        return dt;
    }


    public static bool set_Sims(SMVTS_SIMS _obj_Smvts_Sims)
    {
        bool status = false;
        switch (_obj_Smvts_Sims.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SIMS @Operation = 'Insert', @SIM_CATEGORY_ID='" + _obj_Smvts_Sims.SIM_CATEGORY_ID
                                  + "', @SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                  + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                  + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                  + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                  + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                  + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                  + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                  + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                  + "', @SIM_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Sims.CREATEDBY)
                                  + "', @SIM_CREATEDDATE='" + _obj_Smvts_Sims.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                  + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SIMS @Operation = 'Update',@SIM_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID)
                                  + "', @SIM_CATEGORY_ID='" + _obj_Smvts_Sims.SIM_CATEGORY_ID
                                  + "', @SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                  + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                  + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                  + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                  + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                  + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                  + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                  + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                  + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                  + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    public static bool set_Sims1(SMVTS_SIMS _obj_Smvts_Sims, string dbname)
    {
        bool status = false;
        switch (_obj_Smvts_Sims.OPERATION)
        {
            case operation.Insert:

                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Insert', @SIM_CATEGORY_ID='" + _obj_Smvts_Sims.SIM_CATEGORY_ID
                                  + "', @SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                  + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                  + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                  + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                  + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                  + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                  + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                  + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                  + "', @SIM_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Sims.CREATEDBY)
                                  + "', @SIM_CREATEDDATE='" + _obj_Smvts_Sims.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                  + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Update',@SIM_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID)
                                  + "', @SIM_CATEGORY_ID='" + _obj_Smvts_Sims.SIM_CATEGORY_ID
                                  + "', @SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                  + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                  + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                  + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                  + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                  + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                  + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                  + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                  + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                  + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'", dbname))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }

    //Date : 02-04-2019
    public static bool set_Sims(SMVTS_SIMS _obj_Smvts_Sims, string dbname, string categname,string oldsim)
    {
        bool status = false;
        switch (_obj_Smvts_Sims.OPERATION)
        {
            case operation.Insert:
                string query = "EXEC USP_SMVTS_SIMS @Operation = 'Insert',@SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                   + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                   + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                   + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                   + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                   + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                   + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                   + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                   + "', @SIM_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Sims.CREATEDBY)
                                   + "', @SIM_CREATEDDATE='" + _obj_Smvts_Sims.CREATEDDATE.ToString("MM/dd/yyyy")
                                   + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                   + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'";


                string newquery = query + ", @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'";
                if (ExecuteNonQuery1(newquery))
                {
                    if ((categname != "Dhanush (O)"))
                    {
                        if (dbname != "")
                        {

                            string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "'";
                            //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                            DataTable dt_categ = new DataTable();
                            dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                            newquery = query + ", @SIM_CATEGORY_ID ='" + dt_categ.Rows[0][0].ToString() + "'";
                            if (Dal.ExecuteNonQueryDB1(newquery, dbname))
                            {

                                status = true;
                            }
                            else
                            {
                                status = false;
                            }

                        }
                        status = true;
                    }
                    else
                    {
                        status = true;
                    }
                }
                else
                {
                    status = false;
                }
                break;

            case operation.Update:
                string updquery = "EXEC USP_SMVTS_SIMS @Operation = 'Update', @SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                  + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                  + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                  + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                  + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                  + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                  + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                  + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                  + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                  + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'";
                string query1 = updquery + ", @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "',@SIM_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "'";
               

                if(((SMVTS_USERS)HttpContext.Current.Session["USERINFO"]).USERS_CATEGORY_ID==1)
                {

                    if (Dal.ExecuteNonQueryConfig(query1))
                    {
                        string abc = "";
                        abc = "SELECT SIM_ID FROM SMVTS_SIMS  WHERE SIM_NUMBER='" + oldsim + "'";
                        DataTable dt_sim = new DataTable();
                        dt_sim = Dal.ExecutePRODDB(abc);

                       
                        string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)","").Replace("(WLP)","") + "'";

                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecutePRODDB(CategQuery);
                        string query2 = updquery + ", @SIM_CATEGORY_ID ='" + Convert.ToString(dt_categ.Rows[0][0]) + "',@SIM_ID='" + Convert.ToString(dt_sim.Rows[0][0]) + "'";

                        if (Dal.ExecuteNonQueryPROD(query2))
                        {
                            status = true;
                        }
                        else
                        {
                            status = false;
                        }
                    }
                    else
                    {
                        status = false;
                    }
                }
                else
                {
                    if (Dal.ExecuteNonQueryPROD(query1))
                    {

                        string abc = "";
                        abc = "SELECT SIM_ID FROM SMVTS_SIMS  WHERE SIM_NUMBER='" + oldsim + "'";
                        DataTable dt_sim = new DataTable();
                        dt_sim = Dal.ExecuteConfig(abc);

                        string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "'";

                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteConfig(CategQuery);
                        string query2 = updquery + ", @SIM_CATEGORY_ID ='" + Convert.ToString(dt_categ.Rows[0][0]) + "',@SIM_ID='" + Convert.ToString(dt_sim.Rows[0][0]) + "'";

                        if (Dal.ExecuteNonQueryConfig(query2))
                        {
                            status = true;
                        }
                        else
                        {
                            status = false;
                        }
                    }
                }


             
                break;

            default:
                break;
        }
        return status;
    }
    #endregion

    #region SMVTS_VEHLEMM Methods
    /// <summary>
    /// Writtenby Sridevi on 25/12/2009 5:30:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_Vehlemm(SMVTS_VEHLEMM _obj_Smvts_Vehlemm)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Vehlemm.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEMODELS @Operation = 'select', @VEHLEMM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEMODELS @Operation = 'select', @VEHLEMM_ID ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_ID) + "'");

                break;

            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEMODELS @Operation = 'Check', @VEHLEMM_NAME ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_NAME) + "', @VEHLEMM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEMODELS @Operation = 'Check', @VEHLEMM_NAME ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_NAME) + "',@VEHLEMM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_CATEGORY_ID) + "', @VEHLEMM_ID ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEMODELS @Operation = 'Select', @VEHLEMM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_CATEGORY_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }


    public static bool set_Vehlemm(SMVTS_VEHLEMM _obj_Smvts_Vehlemm)
    {
        bool status = false;
        switch (_obj_Smvts_Vehlemm.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLEMODELS @Operation = 'Insert' , @VEHLEMM_CATEGORY_ID='" + _obj_Smvts_Vehlemm.VEHLEMM_CATEGORY_ID
                                  + "', @VEHLEMM_NAME='" + _obj_Smvts_Vehlemm.VEHLEMM_NAME
                                  + "', @VEHLEMM_DESC='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_DESC)
                                  + "', @VEHLEMM_MAKE='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_MAKE)
                                  + "', @VEHLEMM_MODEL='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_MODEL)
                                  + "', @VEHLEMM_YEAR='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_YEAR)
                                  + "', @VEHLEMM_NOOFTANKS='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_NOOFTANKS)
                                  + "', @VEHLEMM_TANKCAPACITY='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_TANKCAPACITY)
                                  + "', @VEHLEMM_MEASURINGUNIT='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_MEASURINGUNIT)
                                  + "', @VEHLEMM_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Vehlemm.CREATEDBY)
                                  + "', @VEHLEMM_CREATEDDATE='" + _obj_Smvts_Vehlemm.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @VEHLEMM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehlemm.LASTMDFBY)
                                  + "', @VEHLEMM_MODIFIEDDATE='" + _obj_Smvts_Vehlemm.LASTMDFDATE.ToString("MM/dd/yyyy")
                                  + "',@VEHLEMM_IMAGEVALUE=" + _obj_Smvts_Vehlemm.VEHICLE_TYPE))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLEMODELS @Operation = 'Update',@VEHLEMM_ID='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_ID)
                                  + "', @VEHLEMM_CATEGORY_ID='" + _obj_Smvts_Vehlemm.VEHLEMM_CATEGORY_ID
                                  + "', @VEHLEMM_NAME='" + _obj_Smvts_Vehlemm.VEHLEMM_NAME
                                  + "', @VEHLEMM_DESC='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_DESC)
                                  + "', @VEHLEMM_MAKE='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_MAKE)
                                  + "', @VEHLEMM_MODEL='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_MODEL)
                                  + "', @VEHLEMM_YEAR='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_YEAR)
                                  + "', @VEHLEMM_NOOFTANKS='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_NOOFTANKS)
                                  + "', @VEHLEMM_TANKCAPACITY='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_TANKCAPACITY)
                                  + "', @VEHLEMM_MEASURINGUNIT='" + Convert.ToString(_obj_Smvts_Vehlemm.VEHLEMM_MEASURINGUNIT)
                                  + "', @VEHLEMM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehlemm.LASTMDFBY)
                                  + "', @VEHLEMM_MODIFIEDDATE='" + _obj_Smvts_Vehlemm.LASTMDFDATE.ToString("MM/dd/yyyy")
                                  + "',@VEHLEMM_IMAGEVALUE=" + _obj_Smvts_Vehlemm.VEHICLE_TYPE))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    #endregion

    #region SMVTS_DEVICES Methods
    /// <summary>
    /// Writtenby Sridevi on 24/12/2009 6:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Globalsettings"></param>
    /// <returns></returns>

    public static DataTable get_Devices(SMVTS_DEVICES _obj_Smvts_Devices)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Devices.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) == "0")
                    dt = Dal.ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'select'");
                else
                    dt = Dal.ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'select', @DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) + "'");

                break;
            case operation.SelectSemi:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) == "0" && Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID)!="0")
                 
                    dt = ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'SelectSemiPartner', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "'");

                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'Check', @DEVICE_NAME ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_NAME) + "', @DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) + "'");
                else
                    dt = ExecuteQuery1("EXEC USP_SMVTS_DEVICES @Operation = 'Check', @DEVICE_NAME ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_NAME) + "', @DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) + "'");

                break;

            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) != "0")
                    //Edit Mode of vehicles
                    dt = ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'FreeDevice', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "', @DEVICE_ID=" + (_obj_Smvts_Devices.DEVICE_ID == 0 ? "null" : "'" + _obj_Smvts_Devices.DEVICE_ID + "'"));
                else
                    //Add Mode of vehicles
                    //dt = ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'FreeDeviceforaCat', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'");
                    dt = ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'FreeDevice', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'");
                break;

            case operation.Update:
                dt = ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'AllforCateg', @DEVICE_CATEGORY_ID  ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "'");
                break;

            case operation.Insert:
                dt = ExecuteQuery1("EXEC USP_SMVTS_DEVICES @Operation = 'GetLastrec' ");
                break;

            case operation.checkIMEI:
                dt = ExecuteQuery1("EXEC USP_SMVTS_DEVICES @Operation = 'checkIMEI',@DEVICE_SERIALNUMBER='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER + "' ");
                break;

            default:
                break;
        }
        return dt;
    }
    public static DataTable get_Devices_for_Test(SMVTS_DEVICES _obj_Smvts_Devices)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Devices.OPERATION)
        {
            case operation.Insert:
                dt = Dal.ExecuteQuery_Prod("EXEC USP_SMVTS_DEVICES @Operation = 'GetLastrec' ");
                break;
            default:
                break;
        }
        return dt;
    }
    //public static bool set_Devices(SMVTS_DEVICES _obj_Smvts_Devices)
    //{
    //    bool status = false;
    //    switch (_obj_Smvts_Devices.OPERATION)
    //    {
    //        case operation.Insert:
    //            if (ExecuteNonQuery("EXEC USP_SMVTS_DEVICES @Operation = 'Insert', @DEVICE_NAME='" + _obj_Smvts_Devices.DEVICE_NAME
    //                              + "', @DEVICE_ID='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID)
    //                              + "', @DEVICE_SERIALNUMBER='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER
    //                              + "', @DEVICE_MFGDATE =" + (_obj_Smvts_Devices.DEVICE_MFGDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_MFGDATE).ToString("MM/dd/yyyy") + "'")
    //                              + ", @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID)
    //                              + "', @DEVICE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_COUNTRY_ID)
    //                              + "', @DEVICE_DATEOFSALE =" + (_obj_Smvts_Devices.DEVICE_DATEOFSALE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_DATEOFSALE).ToString("MM/dd/yyyy") + "'")
    //                              + ", @DEVICE_SIM_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_SIM_ID)
    //                              + "', @DEVICE_CALLNUMBER1=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER1) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER1) + "'")
    //                              + ", @DEVICE_CALLNUMBER2=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER2) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER2) + "'")
    //                              + ", @DEVICE_STATUS=" + ((_obj_Smvts_Devices.DEVICE_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'")
    //                              + ", @DEVICE_STOPDURATION=" + ((_obj_Smvts_Devices.DEVICE_STOPDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STOPDURATION) + "'")
    //                              + ", @DEVICE_OVERSPEEDDURATION=" + ((_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) + "'")
    //                              + ", @DEVICE_DATADURATION=" + ((_obj_Smvts_Devices.DEVICE_DATADURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_DATADURATION) + "'")
    //                              + ", @DEVICE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Devices.CREATEDBY)
    //                              + "', @DEVICE_CREATEDDATE='" + _obj_Smvts_Devices.CREATEDDATE.ToString("MM/dd/yyyy")
    //                              + "', @DEVICE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Devices.LASTMDFBY)
    //                              + "', @DEVICE_MODIFIEDDATE='" + _obj_Smvts_Devices.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
    //                status = true;
    //            else
    //                status = false;
    //            break;
    //        case operation.Update:
    //            if (ExecuteNonQuery("EXEC USP_SMVTS_DEVICES @Operation = 'Update',@DEVICE_ID='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID)
    //                              + "', @DEVICE_NAME='" + _obj_Smvts_Devices.DEVICE_NAME
    //                              + "', @DEVICE_SERIALNUMBER='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER
    //                              + "', @DEVICE_MFGDATE =" + (_obj_Smvts_Devices.DEVICE_MFGDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_MFGDATE).ToString("MM/dd/yyyy") + "'")
    //                              + ", @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID)
    //                              + "', @DEVICE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_COUNTRY_ID)
    //                              + "', @DEVICE_DATEOFSALE =" + (_obj_Smvts_Devices.DEVICE_DATEOFSALE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_DATEOFSALE).ToString("MM/dd/yyyy") + "'")
    //                              + ", @DEVICE_SIM_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_SIM_ID)
    //                              + "', @DEVICE_CALLNUMBER1=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER1) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER1) + "'")
    //                              + ", @DEVICE_CALLNUMBER2=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER2) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER2) + "'")
    //                              + ", @DEVICE_STATUS=" + ((_obj_Smvts_Devices.DEVICE_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'")
    //                              + ", @DEVICE_STOPDURATION=" + ((_obj_Smvts_Devices.DEVICE_STOPDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STOPDURATION) + "'")
    //                              + ", @DEVICE_OVERSPEEDDURATION=" + ((_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) + "'")
    //                              + ", @DEVICE_DATADURATION=" + ((_obj_Smvts_Devices.DEVICE_DATADURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_DATADURATION) + "'")
    //                              + ", @DEVICE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Devices.LASTMDFBY)
    //                              + "', @DEVICE_MODIFIEDDATE='" + _obj_Smvts_Devices.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
    //                status = true;
    //            else
    //                status = false;

    //            break;

    //        default:
    //            break;
    //    }
    //    return status;
    //}
    public static bool set_Devices(SMVTS_DEVICES _obj_Smvts_Devices, string dbname, string categname,string Simnumber)
    {
        bool status = false;
        switch (_obj_Smvts_Devices.OPERATION)
        {
            case operation.Insert:
                string query = "EXEC USP_SMVTS_DEVICES @Operation = 'Insert', @DEVICE_NAME='" + _obj_Smvts_Devices.DEVICE_NAME
                                  + "', @DEVICE_ID='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID)
                                  + "', @DEVICE_SERIALNUMBER='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER
                                  + "', @DEVICE_MFGDATE =" + (_obj_Smvts_Devices.DEVICE_MFGDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_MFGDATE).ToString("MM/dd/yyyy") + "")
                                  + "', @DEVICE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_COUNTRY_ID)
                                  + "', @DEVICE_DATEOFSALE =" + (_obj_Smvts_Devices.DEVICE_DATEOFSALE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_DATEOFSALE).ToString("MM/dd/yyyy") + "'")
                                  + ", @DEVICE_SIM_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_SIM_ID)
                                  + "', @DEVICE_CALLNUMBER1=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER1) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER1) + "'")
                                  + ", @DEVICE_CALLNUMBER2=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER2) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER2) + "'")
                                  + ", @DEVICE_STATUS=" + ((_obj_Smvts_Devices.DEVICE_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'")
                                  + ", @DEVICE_STOPDURATION=" + ((_obj_Smvts_Devices.DEVICE_STOPDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STOPDURATION) + "'")
                                  + ", @DEVICE_OVERSPEEDDURATION=" + ((_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) + "'")
                                  + ", @DEVICE_DATADURATION=" + ((_obj_Smvts_Devices.DEVICE_DATADURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_DATADURATION) + "'")
                                  + ", @DEVICE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Devices.CREATEDBY)
                                  + "', @DEVICE_CREATEDDATE='" + _obj_Smvts_Devices.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @DEVICE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Devices.LASTMDFBY)
                                  + "', @DEVICE_MODIFIEDDATE='" + _obj_Smvts_Devices.LASTMDFDATE.ToString("MM/dd/yyyy") + "'";

                string partquery = query + ", @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "'";
                if (ExecuteNonQuery1(partquery))
                {
                  
                        if (dbname != "")
                        {
                            
                                string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "'";
                                //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                                DataTable dt_categ = new DataTable();
                                dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                                partquery = query + ", @DEVICE_CATEGORY_ID ='" + dt_categ.Rows[0][0].ToString() + "'";
                                if (Dal.ExecuteNonQueryDB1(partquery, dbname))
                                {

                                    status = true;
                            ConfigureDevice(_obj_Smvts_Devices.DEVICE_ID, _obj_Smvts_Devices.DEVICE_SERIALNUMBER);
                                }
                                else
                                {
                                    status = false;
                                }
                            


                        }
                        status = true;
                   
                }
                else
                {
                    status = false;
                }
                break;
            case operation.Update:
                //particular client database category id based on name

                string partquery1 = ("EXEC USP_SMVTS_DEVICES @Operation = 'Update',@DEVICE_ID='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID)
                                  + "', @DEVICE_NAME='" + _obj_Smvts_Devices.DEVICE_NAME
                                  + "', @DEVICE_SERIALNUMBER='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER
                                  + "', @DEVICE_MFGDATE =" + (_obj_Smvts_Devices.DEVICE_MFGDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_MFGDATE).ToString("MM/dd/yyyy") + "'")
                                  + ", @DEVICE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_COUNTRY_ID)
                                  + "', @DEVICE_DATEOFSALE =" + (_obj_Smvts_Devices.DEVICE_DATEOFSALE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_DATEOFSALE).ToString("MM/dd/yyyy") + "'")
                                  + ",  @DEVICE_CALLNUMBER1=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER1) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER1) + "'")
                                  + ", @DEVICE_CALLNUMBER2=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER2) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER2) + "'")
                                  + ", @DEVICE_STATUS=" + ((_obj_Smvts_Devices.DEVICE_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'")
                                  + ", @DEVICE_STOPDURATION=" + ((_obj_Smvts_Devices.DEVICE_STOPDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STOPDURATION) + "'")
                                  + ", @DEVICE_OVERSPEEDDURATION=" + ((_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) + "'")
                                  + ", @DEVICE_DATADURATION=" + ((_obj_Smvts_Devices.DEVICE_DATADURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_DATADURATION) + "'")
                                  + ", @DEVICE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Devices.LASTMDFBY)
                                  + "', @DEVICE_MODIFIEDDATE='" + _obj_Smvts_Devices.LASTMDFDATE.ToString("MM/dd/yyyy") + "'");

                string query1 = partquery1 + ", @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "',@DEVICE_SIM_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_SIM_ID) + "'";
                DataTable dt_categ_Id = BLL.get_clienDBcateg_ID(categname, dbname);
                string categid = dt_categ_Id.Rows[0]["CATEG_ID"].ToString();

                //get sim
                string sim_query = "select SIM_ID from SMVTS_SIMS where SIM_NUMBER='" + Simnumber + "'";
                DataTable dt_sims = Dal.ExecuteQueryDB1(sim_query, dbname);
                string query2 = partquery1 + ", @DEVICE_CATEGORY_ID ='" + categid + "',@DEVICE_SIM_ID ='" + Convert.ToString(dt_sims.Rows[0]["SIM_ID"]) + "'";

                if (ExecuteNonQuery(query1))
                {

                    string chekquery = "select * from SMVTS_DEVICES where DEVICE_ID=" + _obj_Smvts_Devices.DEVICE_ID + "";

                    DataTable dt_chek = Dal.ExecuteQueryDB1(chekquery, dbname);

                    if (dt_chek.Rows.Count > 0)
                    {
                        if (Dal.ExecuteNonQueryDB1(query2, dbname))
                        {
                            status = true;
                            bool status1 = Dal.ExecuteNonQueryConfig("update SMVTS_TT_DEVID set IMEI='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER + "' where DEVICEID='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) + "'");
                            bool status2 = Dal.ExecuteNonQuerytc("update tc_devices set uniqueid='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER + "' where name='CTPL_" + Convert.ToInt32(_obj_Smvts_Devices.DEVICE_ID) + "'");
                        }
                        else
                        {
                            status = false;
                        }


                    }
                    else
                    {
                        _obj_Smvts_Devices.OPERATION = operation.Insert;
                        _obj_Smvts_Devices.DEVICE_CATEGORY_ID = Int32.Parse(categid);

                        _obj_Smvts_Devices.CREATEDDATE = DateTime.Now;
                        BLL.set_Old_Devices(_obj_Smvts_Devices, dbname);

                    }
                    status = true;
                }



                else
                {
                    status = false;
                }
                break;

            default:
                break;
        }
        return status;
    }

    public static bool set_Old_Devices(SMVTS_DEVICES _obj_Smvts_Devices, string dbname)
    {
        bool status = false;
        switch (_obj_Smvts_Devices.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'Insert', @DEVICE_NAME='" + _obj_Smvts_Devices.DEVICE_NAME
                                  + "', @DEVICE_ID='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID)
                                  + "', @DEVICE_SERIALNUMBER='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER
                                  + "', @DEVICE_MFGDATE =" + (_obj_Smvts_Devices.DEVICE_MFGDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_MFGDATE).ToString("MM/dd/yyyy") + "'")
                                  + ", @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID)
                                  + "', @DEVICE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_COUNTRY_ID)
                                  + "', @DEVICE_DATEOFSALE =" + (_obj_Smvts_Devices.DEVICE_DATEOFSALE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_DATEOFSALE).ToString("MM/dd/yyyy") + "'")
                                  + ", @DEVICE_SIM_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_SIM_ID)
                                  + "', @DEVICE_CALLNUMBER1=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER1) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER1) + "'")
                                  + ", @DEVICE_CALLNUMBER2=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER2) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER2) + "'")
                                  + ", @DEVICE_STATUS=" + ((_obj_Smvts_Devices.DEVICE_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'")
                                  + ", @DEVICE_STOPDURATION=" + ((_obj_Smvts_Devices.DEVICE_STOPDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STOPDURATION) + "'")
                                  + ", @DEVICE_OVERSPEEDDURATION=" + ((_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) + "'")
                                  + ", @DEVICE_DATADURATION=" + ((_obj_Smvts_Devices.DEVICE_DATADURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_DATADURATION) + "'")
                                  + ", @DEVICE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Devices.CREATEDBY)
                                  + "', @DEVICE_CREATEDDATE='" + _obj_Smvts_Devices.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @DEVICE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Devices.LASTMDFBY)
                                  + "', @DEVICE_MODIFIEDDATE='" + _obj_Smvts_Devices.LASTMDFDATE.ToString("MM/dd/yyyy") + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_DEVICES @Operation = 'Update',@DEVICE_ID='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID)
                                  + "', @DEVICE_NAME='" + _obj_Smvts_Devices.DEVICE_NAME
                                  + "', @DEVICE_SERIALNUMBER='" + _obj_Smvts_Devices.DEVICE_SERIALNUMBER
                                  + "', @DEVICE_MFGDATE =" + (_obj_Smvts_Devices.DEVICE_MFGDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_MFGDATE).ToString("MM/dd/yyyy") + "'")
                                  + ", @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID)
                                  + "', @DEVICE_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_COUNTRY_ID)
                                  + "', @DEVICE_DATEOFSALE =" + (_obj_Smvts_Devices.DEVICE_DATEOFSALE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Devices.DEVICE_DATEOFSALE).ToString("MM/dd/yyyy") + "'")
                                  + ", @DEVICE_SIM_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_SIM_ID)
                                  + "', @DEVICE_CALLNUMBER1=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER1) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER1) + "'")
                                  + ", @DEVICE_CALLNUMBER2=" + ((_obj_Smvts_Devices.DEVICE_CALLNUMBER2) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CALLNUMBER2) + "'")
                                  + ", @DEVICE_STATUS=" + ((_obj_Smvts_Devices.DEVICE_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'")
                                  + ", @DEVICE_STOPDURATION=" + ((_obj_Smvts_Devices.DEVICE_STOPDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STOPDURATION) + "'")
                                  + ", @DEVICE_OVERSPEEDDURATION=" + ((_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_OVERSPEEDDURATION) + "'")
                                  + ", @DEVICE_DATADURATION=" + ((_obj_Smvts_Devices.DEVICE_DATADURATION) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_Devices.DEVICE_DATADURATION) + "'")
                                  + ", @DEVICE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Devices.LASTMDFBY)
                                  + "', @DEVICE_MODIFIEDDATE='" + _obj_Smvts_Devices.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }
    #endregion

    #region SMVTS_VEHICLES Methods
    /// <summary>
    /// Writtenby Sridevi on 26/12/2009 5:30:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_ActiveVehicles(SMVTS_VEHICLES _obj_Smvts_Vehicles)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
        return dt;
    }


    public static DataTable CHAKANAKURDI_VEHICLES(SMVTS_VEHICLES _obj_Smvts_Vehicles)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'get_chk_akr_v'");
        return dt;
    }


    public static DataTable get_Vehicles_DB(SMVTS_VEHICLES _obj_Smvts_Vehicles, string dbname)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Vehicles.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;

            case operation.Check:
                // checking Devices
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Delete:
                // checking Drivers
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Update:
                // checking Register number no to repeat (Add)
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    // checking Register number no to repeat (Edit)
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Vehicles.CREATEDBY) == "0")
                {

                    if (Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY) != "-1")
                    {
                        dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'", dbname);
                    }
                    else
                    {
                        dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAssignedVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_MODIFIEDBY = '" + _obj_Smvts_Vehicles.LASTMDFBY + "'", dbname);
                    }
                }
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "' ,@VEHICLES_STATUS='" + _obj_Smvts_Vehicles.VEHICLES_STATUS + "',@VEHICLES_CREATEDBY='" + _obj_Smvts_Vehicles.CREATEDBY + "' ", dbname);
                break;

            case operation.Insert:  // for showing in the grid
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) != "")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAllVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");

                break;

            default:
                break;


        }
        return dt;
    }
    public static DataTable get_Schools(SMVTS_VEHICLES _obj_Smvts_Vehicles)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_GET_SCHOOLS");
        return dt;
    }


    public static DataTable get_SchoolsVehicles(int CategId)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_GET_SCHOOLS_VEHICLES @categid='"+CategId+"'");
        return dt;
    }

    public static DataTable get_Vehicles(SMVTS_VEHICLES _obj_Smvts_Vehicles)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Vehicles.OPERATION)
        {
            //case operation.Select:
            //    if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
            //        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");

            //    else
            //        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

            //    break;
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                else if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery1("EXEC USP_SMVTS_VEHICLES @Operation = 'select'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");

                break;

            case operation.Check:
                // checking Devices
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Delete:
                // checking Drivers
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Update:
                // checking Register number no to repeat (Add)
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    // checking Register number no to repeat (Edit)
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Vehicles.CREATEDBY) == "0")
                {

                    if (Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY) != "-1")
                    {
                        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                    }
                    else
                    {
                        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAssignedVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_MODIFIEDBY = '" + _obj_Smvts_Vehicles.LASTMDFBY + "'");
                    }
                }
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "' ,@VEHICLES_STATUS='" + _obj_Smvts_Vehicles.VEHICLES_STATUS + "',@VEHICLES_CREATEDBY='" + _obj_Smvts_Vehicles.CREATEDBY + "' ");
                break;

            case operation.Insert:  // for showing in the grid
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) != "")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAllVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");

                break;

            default:
                break;


        }
        return dt;
    }


    public static DataTable get_VehiclesCategWise(SMVTS_VEHICLES _obj_Smvts_Vehicles)
    {
        DataTable dt = new DataTable();
        if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) =="0")
        {
            dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select'");

            
        }
        else
        {
            dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
        }

        return dt;
    }

        public static DataTable get_Vehicles1(SMVTS_VEHICLES _obj_Smvts_Vehicles)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Vehicles.OPERATION)
        {
            //case operation.Select:
            //    if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
            //        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");

            //    else
            //        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

            //    break;
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                else if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery1("EXEC USP_SMVTS_VEHICLES @Operation = 'select'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'select',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");

                break;

            case operation.Check:
                // checking Devices
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Delete:
                // checking Drivers
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Update:
                // checking Register number no to repeat (Add)
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                else
                    // checking Register number no to repeat (Edit)
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'");

                break;
            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Vehicles.CREATEDBY) == "0")
                {

                    if (Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY) != "-1")
                    {
                        dt = ExecuteQuery_an("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");
                    }
                    else
                    {
                        dt = ExecuteQuery_an("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAssignedVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_MODIFIEDBY = '" + _obj_Smvts_Vehicles.LASTMDFBY + "'");
                    }
                }
                else
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "' ,@VEHICLES_STATUS='" + _obj_Smvts_Vehicles.VEHICLES_STATUS + "',@VEHICLES_CREATEDBY='" + _obj_Smvts_Vehicles.CREATEDBY + "' ");
                break;

            case operation.Insert:  // for showing in the grid
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) != "")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAllVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'");

                break;

            default:
                break;


        }
        return dt;
    }
    public static DataTable getVehicles_UserCreation(SMVTS_VEHICLES _obj_Smvts_vehicles)
    {
        DataTable dt = new DataTable();
        if (Convert.ToString(_obj_Smvts_vehicles.CREATEDBY) == "0")
        {

            if (Convert.ToString(_obj_Smvts_vehicles.LASTMDFBY) != "-1")
            {
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectVehicle4Users', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_vehicles.VEHICLES_CATEGORY_ID) + "'");
            }
            else
            {
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectVehicle4Users', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_MODIFIEDBY = '" + _obj_Smvts_vehicles.LASTMDFBY + "'");
            }
        }
        else
            dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_vehicles.VEHICLES_CATEGORY_ID) + "' ,@VEHICLES_STATUS='" + _obj_Smvts_vehicles.VEHICLES_STATUS + "',@VEHICLES_CREATEDBY='" + _obj_Smvts_vehicles.CREATEDBY + "' ");

        return dt;
    }

    public static bool set_Vehicles(SMVTS_VEHICLES _obj_Smvts_Vehicles)
    {
        bool status = false;
        switch (_obj_Smvts_Vehicles.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Insert' , @VEHICLES_CATEGORY_ID='" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID
                                  + "', @VEHICLES_REGNUMBER='" + _obj_Smvts_Vehicles.VEHICLES_REGNUMBER
                                  + "', @VEHICLES_VEHICLEMAKEMODEL_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_VEHICLEMAKEMODEL_ID)
                                  + "', @VEHICLES_MAXSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MAXSPEED)
                                  + "', @VEHICLES_MILEAGE='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MILEAGE)
                                  + "', @VEHICLES_OPENINGODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OPENINGODOMETER)
                                  + "', @VEHICLES_CURRENTODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CURRENTODOMETER)
                                  + "', @VEHICLES_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID)
                                  + "', @VEHICLES_DRIVER_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID)
                                  + "', @VEHICLES_RESERVEVOLUME='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_RESERVEVOLUME)
                                     + "',@vehicles_groupzone='" + Convert.ToString(_obj_Smvts_Vehicles.vehicles_groupzone)
                                  + "', @VEHICLES_TANKCAPACITY='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_TANKCAPACITY)
                                  + "', @VEHICLES_STATUS='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_STATUS)
                                  + "', @VEHICLES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Vehicles.CREATEDBY)
                                  + "', @VEHICLES_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.CREATEDDATE)
                                  + "', @VEHICLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY)
                                  + "', @VEHICLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFDATE)
                    // + "', @VEHICLES_AVGSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_AVGSPEED)
                                  + "', @VEHICLES_CAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CAPACITY)
                                  + "', @VEHICLES_SEATINGCAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_SEATINGCAPACITY)
                                  + "', @VEHICLES_VENDORMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_VENDORMASTER_ID)
                                  + "', @VEHICLES_OFFICEMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OFFICEMASTER_ID)
                    // + "', @VEHICLES_TRAVELDISTINDAY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'Update',@VEHICLES_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID)
                                 + "',  @VEHICLES_CATEGORY_ID='" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID
                                  + "', @VEHICLES_REGNUMBER='" + _obj_Smvts_Vehicles.VEHICLES_REGNUMBER
                                  + "', @VEHICLES_VEHICLEMAKEMODEL_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_VEHICLEMAKEMODEL_ID)
                                  + "', @VEHICLES_MAXSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MAXSPEED)
                                  + "', @VEHICLES_MILEAGE='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MILEAGE)
                                  + "', @VEHICLES_OPENINGODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OPENINGODOMETER)
                                  + "', @VEHICLES_CURRENTODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CURRENTODOMETER)
                                  + "', @VEHICLES_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID)
                                  + "', @VEHICLES_DRIVER_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID)
                                  + "', @VEHICLES_RESERVEVOLUME='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_RESERVEVOLUME)
                                   + "', @vehicles_groupzone='" + Convert.ToString(_obj_Smvts_Vehicles.vehicles_groupzone)
                                  + "', @VEHICLES_TANKCAPACITY='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_TANKCAPACITY)
                                  + "', @VEHICLES_STATUS='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_STATUS)
                                  + "', @VEHICLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY)
                                  + "', @VEHICLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFDATE)
                    //    + "', @VEHICLES_AVGSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_AVGSPEED)
                                  + "', @VEHICLES_CAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CAPACITY)
                                  + "', @VEHICLES_SEATINGCAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_SEATINGCAPACITY)
                                  + "', @VEHICLES_VENDORMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_VENDORMASTER_ID)
                                  + "', @VEHICLES_OFFICEMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OFFICEMASTER_ID)
                    //    + "',  @VEHICLES_TRAVELDISTINDAY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;
            //case operation.Check:
            //    if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'updateeta',@VEHICLES_CATEGORY_ID=" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID + ",@VEHICLES_DEVICE_ID=" + _obj_Smvts_Vehicles.VEHICLES_DEVICE_ID + ",@VEHICLES_AVGSPEED=" + _obj_Smvts_Vehicles.VEHICLES_AVGSPEED + ",@VEHICLES_TRAVELDISTINDAY=" + _obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY))
            //        status = true;
            //    else
            //        status = false;
            //    break;


            default:
                break;
        }
        return status;
    }
    public static bool set_Vehicles1(SMVTS_VEHICLES _obj_Smvts_Vehicles, string dbname, string categname)
    {
        bool status = false;
        switch (_obj_Smvts_Vehicles.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Insert' , @VEHICLES_CATEGORY_ID='" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID
                                  + "', @VEHICLES_REGNUMBER='" + _obj_Smvts_Vehicles.VEHICLES_REGNUMBER
                                  + "', @VEHICLES_VEHICLEMAKEMODEL_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_VEHICLEMAKEMODEL_ID)
                                  + "', @VEHICLES_MAXSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MAXSPEED)
                                  + "', @VEHICLES_MILEAGE='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MILEAGE)
                                  + "', @VEHICLES_OPENINGODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OPENINGODOMETER)
                                  + "', @VEHICLES_CURRENTODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CURRENTODOMETER)
                                  + "', @VEHICLES_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID)
                                  + "', @VEHICLES_DRIVER_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID)
                                  + "', @VEHICLES_RESERVEVOLUME='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_RESERVEVOLUME)
                                  + "', @VEHICLES_TANKCAPACITY='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_TANKCAPACITY)
                                  + "', @VEHICLES_STATUS='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_STATUS)
                                  + "', @VEHICLES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Vehicles.CREATEDBY)
                                  + "', @VEHICLES_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.CREATEDDATE)
                                  + "', @VEHICLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY)
                                  + "', @VEHICLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFDATE)
                    // + "', @VEHICLES_AVGSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_AVGSPEED)
                                  + "', @VEHICLES_CAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CAPACITY)
                                  + "', @VEHICLES_SEATINGCAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_SEATINGCAPACITY)
                                  + "', @VEHICLES_VENDORMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_VENDORMASTER_ID)
                                  + "', @VEHICLES_OFFICEMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OFFICEMASTER_ID)
                    // + "', @VEHICLES_TRAVELDISTINDAY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY)
                                  + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Update',@VEHICLES_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID)
                                 + "',  @VEHICLES_CATEGORY_ID='" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID
                                  + "', @VEHICLES_REGNUMBER='" + _obj_Smvts_Vehicles.VEHICLES_REGNUMBER
                                  + "', @VEHICLES_VEHICLEMAKEMODEL_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_VEHICLEMAKEMODEL_ID)
                                  + "', @VEHICLES_MAXSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MAXSPEED)
                                  + "', @VEHICLES_MILEAGE='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MILEAGE)
                                  + "', @VEHICLES_OPENINGODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OPENINGODOMETER)
                                  + "', @VEHICLES_CURRENTODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CURRENTODOMETER)
                                  + "', @VEHICLES_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID)
                                  + "', @VEHICLES_DRIVER_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID)
                                  + "', @VEHICLES_RESERVEVOLUME='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_RESERVEVOLUME)
                                  + "', @VEHICLES_TANKCAPACITY='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_TANKCAPACITY)
                                  + "', @VEHICLES_STATUS='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_STATUS)
                                  + "', @VEHICLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY)
                                  + "', @VEHICLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFDATE)
                    //    + "', @VEHICLES_AVGSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_AVGSPEED)
                                  + "', @VEHICLES_CAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CAPACITY)
                                  + "', @VEHICLES_SEATINGCAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_SEATINGCAPACITY)
                                  + "', @VEHICLES_VENDORMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_VENDORMASTER_ID)
                                  + "', @VEHICLES_OFFICEMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OFFICEMASTER_ID)
                    //    + "',  @VEHICLES_TRAVELDISTINDAY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY)
                                  + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            //case operation.Check:
            //    if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'updateeta',@VEHICLES_CATEGORY_ID=" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID + ",@VEHICLES_DEVICE_ID=" + _obj_Smvts_Vehicles.VEHICLES_DEVICE_ID + ",@VEHICLES_AVGSPEED=" + _obj_Smvts_Vehicles.VEHICLES_AVGSPEED + ",@VEHICLES_TRAVELDISTINDAY=" + _obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY))
            //        status = true;
            //    else
            //        status = false;
            //    break;


            default:
                break;
        }
        return status;
    }


    #endregion

    #region SMVTS_LANDMARKS Methods
    /// <summary>
    /// Writtenby Sridevi on 28/12/2009 11:30:00 A.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_LandMarks(SMVTS_LANDMARKS _obj_Smvts_LandMarks)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_LandMarks.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ID) == "0")
                    //dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'select',@LANDMARKS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID) + "',@LANDMARKS_TYPE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_TYPE) + "'");
                    dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'select',@LANDMARKS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID) + "',@LANDMARKS_TYPE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_TYPE) + "'");
                else if (_obj_Smvts_LandMarks.LANDMARKS_ADDRESS != null)
                    dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'select',@LANDMARKS_ADDRESS ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ADDRESS) + "',@LANDMARKS_TYPE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_TYPE) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'select', @LANDMARKS_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'Select', @LANDMARKS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID) + "'");
                break;
            case operation.Update:
                if (Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'Check', @LANDMARKS_LATITUDE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LATITUDE) + "', @LANDMARKS_LONGITUDE='" + _obj_Smvts_LandMarks.LANDMARKS_LONGITUDE + "' ,@LANDMARKS_CATEGORY_ID='" + _obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID + "',@LANDMARKS_TYPE='" + _obj_Smvts_LandMarks.LANDMARKS_TYPE + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'Check', @LANDMARKS_LATITUDE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LATITUDE) + "', @LANDMARKS_LONGITUDE='" + _obj_Smvts_LandMarks.LANDMARKS_LONGITUDE + "' ,@LANDMARKS_CATEGORY_ID='" + _obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID + "',@LANDMARKS_TYPE='" + _obj_Smvts_LandMarks.LANDMARKS_TYPE + "',@LANDMARKS_ID='" + _obj_Smvts_LandMarks.LANDMARKS_ID + "'");
                break;
            default:
                break;
        }
        return dt;
    }
    public static DataTable get_LandMarks1(SMVTS_LANDMARKS _obj_Smvts_LandMarks)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_LandMarks.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ID) == "0")
                    //dt = ExecuteQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'select',@LANDMARKS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID) + "',@LANDMARKS_TYPE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_TYPE) + "'");
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_LANDMARKS @Operation = 'select',@LANDMARKS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID) + "',@LANDMARKS_TYPE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_TYPE) + "'");
                else if (_obj_Smvts_LandMarks.LANDMARKS_ADDRESS != null)
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_LANDMARKS @Operation = 'select',@LANDMARKS_ADDRESS ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ADDRESS) + "',@LANDMARKS_TYPE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_TYPE) + "'");
                else
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_LANDMARKS @Operation = 'select', @LANDMARKS_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery_an("EXEC USP_SMVTS_LANDMARKS @Operation = 'Select', @LANDMARKS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID) + "'");
                break;
            case operation.Update:
                if (Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ID) == "0")
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_LANDMARKS @Operation = 'Check', @LANDMARKS_LATITUDE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LATITUDE) + "', @LANDMARKS_LONGITUDE='" + _obj_Smvts_LandMarks.LANDMARKS_LONGITUDE + "' ,@LANDMARKS_CATEGORY_ID='" + _obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID + "',@LANDMARKS_TYPE='" + _obj_Smvts_LandMarks.LANDMARKS_TYPE + "'");
                else
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_LANDMARKS @Operation = 'Check', @LANDMARKS_LATITUDE ='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LATITUDE) + "', @LANDMARKS_LONGITUDE='" + _obj_Smvts_LandMarks.LANDMARKS_LONGITUDE + "' ,@LANDMARKS_CATEGORY_ID='" + _obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID + "',@LANDMARKS_TYPE='" + _obj_Smvts_LandMarks.LANDMARKS_TYPE + "',@LANDMARKS_ID='" + _obj_Smvts_LandMarks.LANDMARKS_ID + "'");
                break;
            default:
                break;
        }
        return dt;
    }

    public static bool set_LandMarks(SMVTS_LANDMARKS _obj_Smvts_LandMarks)
    {
        bool status = false;
       switch (_obj_Smvts_LandMarks.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'Insert' , @LANDMARKS_CATEGORY_ID='" + _obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID
                                  + "', @LANDMARKS_LATITUDE='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LATITUDE)
                                  + "', @LANDMARKS_LONGITUDE='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LONGITUDE)
                                  + "', @LANDMARKS_ADDRESS='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ADDRESS)
                                  + "', @LANDMARKS_CONTPERSONS=" + ((_obj_Smvts_LandMarks.LANDMARKS_CONTPERSONS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CONTPERSONS) + "'")
                                  + ",  @LANDMARKS_MOBILENUMBER=" + ((_obj_Smvts_LandMarks.LANDMARKS_MOBILENUMBER) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_MOBILENUMBER) + "'")
                                  + ",  @LANDMARKS_TYPE='" + Convert.ToInt32(_obj_Smvts_LandMarks.LANDMARKS_TYPE)
                                  + "', @LANDMARKS_LOCATIONTYPE=" + ((_obj_Smvts_LandMarks.LANDMARKS_LOCATIONTYPE) == null ? "null" : "'" + Convert.ToInt32(_obj_Smvts_LandMarks.LANDMARKS_LOCATIONTYPE) + "'")
                                  + ",  @LANDMARKS_STATUS='" + Convert.ToBoolean(_obj_Smvts_LandMarks.LANDMARKS_STATUS)
                                  + "', @LANDMARKS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_LandMarks.CREATEDBY)
                                  + "', @LANDMARKS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_LandMarks.CREATEDDATE)
                                  + "', @LANDMARKS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_LandMarks.LASTMDFBY)
                                  + "', @LANDMARKS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_LandMarks.LASTMDFDATE)
                                  + "', @SMVTS_CHKGEOSTATUS='" + Convert.ToBoolean(_obj_Smvts_LandMarks.LANDMARKS_GEOSTATUS)
                                  + "', @RADIUS=" + _obj_Smvts_LandMarks.RADIUS
                                  + ",@LANDMARKS_GEOFENCETYPE=" + _obj_Smvts_LandMarks.LANDMARKS_GEOFENCETYPE
                                  + ",@LANDMARKS_STATE='" + _obj_Smvts_LandMarks.LANDMARKS_STATE
                                  + "',@LANDMARKS_ZONE='" + _obj_Smvts_LandMarks.LANDMARKS_ZONE
                                  + "',@LANDMARKS_NEARCITY='" + _obj_Smvts_LandMarks.LANDMARKS_NEARCITY
                                  + "',@LANDMARKS_POLYPOINTS='" + _obj_Smvts_LandMarks.LANDMARKS_POLYPOINTS
                                  + "',@LANDMARK_GEOFENCE_ID='"+ _obj_Smvts_LandMarks.LANDMARK_GEOFENCE_ID + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:

                if (ExecuteNonQuery("EXEC USP_SMVTS_LANDMARKS @Operation = 'Update',@LANDMARKS_ID='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ID)
                                  + "', @LANDMARKS_CATEGORY_ID='" + _obj_Smvts_LandMarks.LANDMARKS_CATEGORY_ID
                                  + "', @LANDMARKS_LATITUDE='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LATITUDE)
                                  + "', @LANDMARKS_LONGITUDE='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_LONGITUDE)
                                  + "', @LANDMARKS_ADDRESS='" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_ADDRESS)
                                  + "', @LANDMARKS_CONTPERSONS=" + ((_obj_Smvts_LandMarks.LANDMARKS_CONTPERSONS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_CONTPERSONS) + "'")
                                  + ",  @LANDMARKS_MOBILENUMBER=" + ((_obj_Smvts_LandMarks.LANDMARKS_MOBILENUMBER) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_LandMarks.LANDMARKS_MOBILENUMBER) + "'")
                                  + " , @LANDMARKS_TYPE='" + Convert.ToInt32(_obj_Smvts_LandMarks.LANDMARKS_TYPE)
                                  + "', @LANDMARKS_LOCATIONTYPE=" + ((_obj_Smvts_LandMarks.LANDMARKS_LOCATIONTYPE) == null ? "null" : "'" + Convert.ToInt32(_obj_Smvts_LandMarks.LANDMARKS_LOCATIONTYPE) + "'")
                                  + ",  @LANDMARKS_STATUS='" + Convert.ToBoolean(_obj_Smvts_LandMarks.LANDMARKS_STATUS)
                                  + "', @LANDMARKS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_LandMarks.LASTMDFBY)
                                  + "', @LANDMARKS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_LandMarks.LASTMDFDATE)
                                  + "', @SMVTS_CHKGEOSTATUS='" + Convert.ToBoolean(_obj_Smvts_LandMarks.LANDMARKS_GEOSTATUS)
                                  + "', @RADIUS=" + _obj_Smvts_LandMarks.RADIUS
                                  + ",@LANDMARKS_GEOFENCETYPE=" + _obj_Smvts_LandMarks.LANDMARKS_GEOFENCETYPE
                                  + ",@LANDMARKS_STATE='" + _obj_Smvts_LandMarks.LANDMARKS_STATE
                                  + "',@LANDMARKS_ZONE='" + _obj_Smvts_LandMarks.LANDMARKS_ZONE
                                  + "',@LANDMARKS_NEARCITY='" + _obj_Smvts_LandMarks.LANDMARKS_NEARCITY
                                  + "',@LANDMARKS_POLYPOINTS='" + _obj_Smvts_LandMarks.LANDMARKS_POLYPOINTS + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    #endregion

    #region SMVTS_LOCATIONTYPE Methods
    /// <summary>
    /// Writtenby Sridevi on 28/12/2009 5:30:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>
    public static DataTable get_LocationType(SMVTS_LOCATIONTYPE _obj_Smvts_LocationType)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_LocationType.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_LocationType.LOCTYPE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_LOCATIONTYPE @Operation = 'select'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_LOCATIONTYPE @Operation = 'select', @LOCTYPE_ID ='" + Convert.ToString(_obj_Smvts_LocationType.LOCTYPE_ID) + "'");

                break;



            default:
                break;
        }
        return dt;
    }
    public static DataTable get_LocationTypeapp(SMVTS_LOCATIONTYPE _obj_Smvts_LocationType)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_LocationType.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_LocationType.LOCTYPE_ID) == "0")
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_LOCATIONTYPE @Operation = 'select'");
                else
                    dt = ExecuteQuery_an("EXEC USP_SMVTS_LOCATIONTYPE @Operation = 'select', @LOCTYPE_ID ='" + Convert.ToString(_obj_Smvts_LocationType.LOCTYPE_ID) + "'");

                break;



            default:
                break;
        }
        return dt;
    }

    #endregion

    #region SMVTS_ROUTES Methods
    /// <summary>
    /// Writtenby Sridevi on 28/12/2009 11:30:00 A.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_Routes(SMVTS_ROUTES _obj_Smvts_Routes)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Routes.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Routes.ROUTES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'select',@ROUTES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'select', @ROUTES_ID ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Select', @ROUTES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_CATEGORY_ID) + "',@ROUTES_STATUS='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STATUS) + "' ");
                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Routes.ROUTES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Check', @ROUTES_STARTLAT ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STARTLAT) + "', @ROUTES_STARTLONG='" + _obj_Smvts_Routes.ROUTES_STARTLONG + "', @ROUTES_ENDLAT ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ENDLAT) + "', @ROUTES_ENDLONG='" + _obj_Smvts_Routes.ROUTES_ENDLONG + "' ,@ROUTES_CATEGORY_ID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Check', @ROUTES_STARTLAT ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STARTLAT) + "', @ROUTES_STARTLONG='" + _obj_Smvts_Routes.ROUTES_STARTLONG + "', @ROUTES_ENDLAT ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ENDLAT) + "', @ROUTES_ENDLONG='" + _obj_Smvts_Routes.ROUTES_ENDLONG + "' ,@ROUTES_CATEGORY_ID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID + "',@ROUTES_ID='" + _obj_Smvts_Routes.ROUTES_ID + "'");
                break;
            case operation.Update:
                if (Convert.ToString(_obj_Smvts_Routes.ROUTES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Checkname', @ROUTES_NAME ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_NAME) + "',@ROUTES_CATEGORY_ID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Checkname', @ROUTES_NAME ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_NAME) + "',@ROUTES_CATEGORY_ID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID + "',@ROUTES_ID='" + _obj_Smvts_Routes.ROUTES_ID + "'");
                break;
            case operation.Delete:
                if (Convert.ToString(_obj_Smvts_Routes.ROUTES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation='GETROUTE_ID', @ROUTES_STARTLAT ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STARTLAT) + "', @ROUTES_STARTLONG='" + _obj_Smvts_Routes.ROUTES_STARTLONG + "', @ROUTES_ENDLAT ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ENDLAT) + "', @ROUTES_ENDLONG='" + _obj_Smvts_Routes.ROUTES_ENDLONG + "' ,@ROUTES_CATEGORY_ID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID + "',@ROUTES_NAME ='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_NAME) + "'");
                break;
            default:
                break;
        }
        return dt;
    }

    public static bool set_Routes(SMVTS_ROUTES _obj_Smvts_Routes)
    {
        bool status = false;
        switch (_obj_Smvts_Routes.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Insert' , @ROUTES_CATEGORY_ID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID
                                  + "', @ROUTES_NAME='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_NAME)
                                  + "', @ROUTES_STARTLAT='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STARTLAT)
                                  + "', @ROUTES_STARTLONG='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STARTLONG)
                                  + "', @ROUTES_ENDLAT='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ENDLAT)
                                  + "', @ROUTES_ENDLONG='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ENDLONG)
                                  + "', @ROUTES_POINTS='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_POINTS)
                                  + "', @ROUTES_STATUS='" + Convert.ToBoolean(_obj_Smvts_Routes.ROUTES_STATUS)
                                  + "', @ROUTES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Routes.CREATEDBY)
                                  + "', @ROUTES_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Routes.CREATEDDATE)
                                  + "', @ROUTES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Routes.LASTMDFBY)
                                  + "', @ROUTES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Routes.LASTMDFDATE)
                                  + "', @ROUTES_FROM='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_FROM)
                                  + "', @ROUTES_TO='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_TO)
                                  + "', @ROUTES_VIA= '" + Convert.ToString(_obj_Smvts_Routes.ROUTES_VIA)
                                  + "', @ROUTES_DEVIATION_LIMIT='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_DEVIATION_LIMIT)
                                  + "', @ROUTES_DISTANCE='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_DISTANCE)
                                  + "', @ROUTES_INTRMED_POINTSDATA='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_INTERMEDIATEPOINTS) + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:

                if (ExecuteNonQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Update',@ROUTES_ID='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ID)
                                  + "', @ROUTES_CATEGORY_ID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID
                                  + "', @ROUTES_NAME='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_NAME)
                                  + "', @ROUTES_STARTLAT='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STARTLAT)
                                  + "', @ROUTES_STARTLONG='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_STARTLONG)
                                  + "', @ROUTES_ENDLAT='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ENDLAT)
                                  + "', @ROUTES_ENDLONG='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_ENDLONG)
                                  + "', @ROUTES_POINTS='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_POINTS)
                                  + "', @ROUTES_STATUS='" + Convert.ToBoolean(_obj_Smvts_Routes.ROUTES_STATUS)
                                  + "', @ROUTES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Routes.LASTMDFBY)
                                  + "', @ROUTES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Routes.LASTMDFDATE)
                                  + "', @ROUTES_FROM='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_FROM)
                                  + "', @ROUTES_TO='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_TO)
                                  + "', @ROUTES_VIA= '" + Convert.ToString(_obj_Smvts_Routes.ROUTES_VIA)
                                  + "', @ROUTES_DEVIATION_LIMIT='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_DEVIATION_LIMIT)
                                  + "', @ROUTES_DISTANCE='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_DISTANCE)
                                  + "', @ROUTES_INTRMED_POINTSDATA='" + Convert.ToString(_obj_Smvts_Routes.ROUTES_INTERMEDIATEPOINTS) + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }

    #endregion

    #region SMVTS_ROUTEPLAN Methods
    /// <summary>
    /// Writtenby Sridevi on 28/12/2009 11:30:00 A.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    //  public static DataTable get_RoutePlan(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan)












    public static string get_RoutePlan1(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan)
    {
        // DataTable dt = new DataTable();
        string ec = "";
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {


            case operation.Update:
                ec = "EXEC USP_SMVTS_VEHICLEROUTE @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'";
                //ec = "EXEC USP_SMVTS_VEHICLEROUTE @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'";



                break;

            default:
                break;
        }
        return ec;
    }




















    //


    public static DataTable get_RoutePlan1(SMVTS_ROUTEPLAN1 _obj_Smvts_RoutePlan)
    {
        DataTable dt = new DataTable();
        // string ec;
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'select',@VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'select', @VEHROUTE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Select', @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "'");
                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_CHECK_SMVTS_VEHICLEROUTE @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "',@VEHROUTE_DEVICE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "',@VEHROUTE_STARTDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "',@VEHROUTE_ENDDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "',@VEHROUTE_STATUS='" + _obj_Smvts_RoutePlan.VEHROUTE_STATUS + "'");
                else
                    dt = ExecuteQuery("EXEC USP_CHECK_SMVTS_VEHICLEROUTE @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "',@VEHROUTE_DEVICE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "',@VEHROUTE_STARTDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "',@VEHROUTE_ENDDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "',@VEHROUTE_STATUS='" + _obj_Smvts_RoutePlan.VEHROUTE_STATUS + "' ,@VEHROUTE_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_ID + "'");
                break;

            case operation.Update:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'");
                //ec = "EXEC USP_SMVTS_VEHICLEROUTE @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'";



                break;

            default:
                break;
        }
        return dt;
    }

    public static bool set_RoutePlan1(SMVTS_ROUTEPLAN1 _obj_Smvts_RoutePlan)
    {
        bool status = false;
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Insert' , @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDBY)
                                  + "', @VEHROUTE_CREATEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDDATE)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:

                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Update',@VEHROUTE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID)
                                  + "', @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "'"))

                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }

















    public static DataTable get_RoutePlan_DB(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan, string DBNAME)
    {
        DataTable dt = new DataTable();
        // string ec;
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'select',@VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'select', @VEHROUTE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Select', @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "'");
                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_CHECK_SMVTS_VEHICLEROUTE @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "',@VEHROUTE_DEVICE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "',@VEHROUTE_STARTDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "',@VEHROUTE_ENDDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "',@VEHROUTE_STATUS='" + _obj_Smvts_RoutePlan.VEHROUTE_STATUS + "'", DBNAME);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_CHECK_SMVTS_VEHICLEROUTE @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "',@VEHROUTE_DEVICE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "',@VEHROUTE_STARTDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "',@VEHROUTE_ENDDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "',@VEHROUTE_STATUS='" + _obj_Smvts_RoutePlan.VEHROUTE_STATUS + "' ,@VEHROUTE_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_ID + "'", DBNAME);
                break;

            case operation.Update:
                dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'", DBNAME);
                //ec = "EXEC USP_SMVTS_VEHICLEROUTE @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'";



                break;
            case operation.SelectAll:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'CheckLoadDate', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'");
                //ec = "EXEC USP_SMVTS_VEHICLEROUTE @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'";



                break;

            default:
                break;
        }
        return dt;
    }


    public static DataTable get_RoutePlan(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan)
    {
        DataTable dt = new DataTable();
        // string ec;
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'select',@VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'select', @VEHROUTE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Select', @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "'");
                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_CHECK_SMVTS_VEHICLEROUTE @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "',@VEHROUTE_DEVICE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "',@VEHROUTE_STARTDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "',@VEHROUTE_ENDDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "',@VEHROUTE_STATUS='" + _obj_Smvts_RoutePlan.VEHROUTE_STATUS + "'");
                else
                    dt = ExecuteQuery("EXEC USP_CHECK_SMVTS_VEHICLEROUTE @VEHROUTE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID) + "',@VEHROUTE_DEVICE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "',@VEHROUTE_STARTDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "',@VEHROUTE_ENDDATE='" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "',@VEHROUTE_STATUS='" + _obj_Smvts_RoutePlan.VEHROUTE_STATUS + "' ,@VEHROUTE_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_ID + "'");
                break;

            case operation.Update:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'");
                //ec = "EXEC USP_SMVTS_VEHICLEROUTE @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'";



                break;
            case operation.SelectAll:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'CheckLoadDate', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'");
                //ec = "EXEC USP_SMVTS_VEHICLEROUTE @Operation = 'SelectDates', @VEHROUTE_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID) + "', @VEHROUTE_STARTDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_STARTDATE + "', @VEHROUTE_ENDDATE = '" + _obj_Smvts_RoutePlan.VEHROUTE_ENDDATE + "'";



                break;

            default:
                break;
        }
        return dt;
    }
    public static bool set_RoutePlan_clientDB(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan, string dbname)
    {
        bool status = false;
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Insert' , @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDBY)
                                  + "', @VEHROUTE_CREATEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDDATE)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "', @CONSIGNMENT_FORMAN='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FORMAN)
                                  + "', @CONSIGNMENT_DRIVER_NUMBER='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DRIVER_NUMBER)
                                  + "', @CONSIGNMENT_ZONE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_ZONE)
                                  + "', @VEHROUTE_LOAD='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LOAD)
                                  + "', @VEHROUTE_TRIPNO='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRIPNO)
                                  + "', @TRIPREMARKS_REMARKS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_REMARKS)
                                  + "', @VEHROUTE_TRIP_ALLOWED_DAYS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TOTAL_ALLOWED_DAYS)
                                  + "', @VEHROUTE_LAST_TRIP_COMPLETED_DATED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LAST_TRIP_COMPLETION_DATE)
                                  + "', @VEHROUTE_COMPLETIONDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_COMPLETEDDATE)

                                  + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:

                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Update',@VEHROUTE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID)
                                  + "', @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "', @CONSIGNMENT_FORMAN='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FORMAN)
                                  + "', @CONSIGNMENT_DRIVER_NUMBER='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DRIVER_NUMBER)
                                  + "', @CONSIGNMENT_ZONE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_ZONE)
                                  + "', @VEHROUTE_LOAD='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LOAD)
                                  + "', @VEHROUTE_TRIPNO='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRIPNO)
                                  + "', @TRIPREMARKS_REMARKS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_REMARKS)
                                  + "', @VEHROUTE_TRIP_ALLOWED_DAYS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TOTAL_ALLOWED_DAYS)
                                  + "', @VEHROUTE_LAST_TRIP_COMPLETED_DATED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LAST_TRIP_COMPLETION_DATE)
                                  + "', @VEHROUTE_COMPLETIONDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_COMPLETEDDATE)
                                  + "'", dbname))

                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    public static bool set_RoutePlan_DB(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan, string dbname)
    {
        bool status = false;
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Insert' , @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDBY)
                                  + "', @VEHROUTE_CREATEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDDATE)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "', @CONSIGNMENT_FORMAN='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FORMAN)
                                  + "', @CONSIGNMENT_DRIVER_NUMBER='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DRIVER_NUMBER)
                                  + "', @CONSIGNMENT_ZONE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_ZONE)
                                  + "', @VEHROUTE_LOAD='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LOAD)
                                  + "', @VEHROUTE_TRIPNO='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRIPNO)
                                  + "', @TRIPREMARKS_REMARKS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_REMARKS)
                                  + "', @VEHROUTE_TRIP_ALLOWED_DAYS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TOTAL_ALLOWED_DAYS)
                                  + "', @VEHROUTE_LAST_TRIP_COMPLETED_DATED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LAST_TRIP_COMPLETION_DATE)
                                  + "', @VEHROUTE_COMPLETIONDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_COMPLETEDDATE)

                                  + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:

                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Update',@VEHROUTE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID)
                                  + "', @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "', @CONSIGNMENT_FORMAN='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FORMAN)
                                  + "', @CONSIGNMENT_DRIVER_NUMBER='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DRIVER_NUMBER)
                                  + "', @CONSIGNMENT_ZONE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_ZONE)
                                  + "', @VEHROUTE_LOAD='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LOAD)
                                  + "', @VEHROUTE_TRIPNO='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRIPNO)
                                  + "', @TRIPREMARKS_REMARKS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_REMARKS)
                                  + "', @VEHROUTE_TRIP_ALLOWED_DAYS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TOTAL_ALLOWED_DAYS)
                                  + "', @VEHROUTE_LAST_TRIP_COMPLETED_DATED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LAST_TRIP_COMPLETION_DATE)
                                  + "', @VEHROUTE_COMPLETIONDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_COMPLETEDDATE)
                                  + "'"))

                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    public static bool set_RoutePlan(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan)
    {
        bool status = false;
        switch (_obj_Smvts_RoutePlan.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Insert' , @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_CREATEDBY= '" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDBY)
                                  + "', @VEHROUTE_CREATEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CREATEDDATE)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "', @CONSIGNMENT_FORMAN='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FORMAN)
                                  + "', @CONSIGNMENT_DRIVER_NUMBER='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DRIVER_NUMBER)
                                  + "', @CONSIGNMENT_ZONE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_ZONE)
                                  + "', @VEHROUTE_LOAD='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LOAD)
                                  + "', @VEHROUTE_TRIPNO='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRIPNO)
                                  + "', @TRIPREMARKS_REMARKS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_REMARKS)
                                  + "', @VEHROUTE_TRIP_ALLOWED_DAYS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TOTAL_ALLOWED_DAYS)
                                  + "', @VEHROUTE_LAST_TRIP_COMPLETED_DATED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LAST_TRIP_COMPLETION_DATE)
                                  + "', @VEHROUTE_COMPLETIONDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_COMPLETEDDATE)

                                  + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:

                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLEROUTE1 @Operation = 'Update',@VEHROUTE_ID='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ID)
                                  + "', @VEHROUTE_CATEGORY_ID='" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID
                                  + "', @VEHROUTE_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID)
                                  + "', @VEHROUTE_ROUTE_ID='" + Convert.ToInt32(_obj_Smvts_RoutePlan.VEHROUTE_ROUTE_ID)
                                  + "', @VEHROUTE_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_RoutePlan.VEHROUTE_STARTDATE)
                                  + "', @VEHROUTE_ENDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_ENDDATE)
                                  + "', @VEHROUTE_STATUS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_STATUS)
                                  + "', @VEHROUTE_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFBY)
                                  + "', @VEHROUTE_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.LASTMDFDATE)
                                  + "', @VEHROUTE_AVGSPEED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_AVGSPEED)
                                  + "', @VEHROUTE_TRAVELDISTINDAY = '" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRAVELDISTINDAY)
                                  + "', @VEHROUTE_DISTANCEROUTE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_DISTANCEROUTE)
                                  + "', @CONSIGNMENT_TYPE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TYPE)
                                  + "', @CONSIGNMENT_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DETAILS)
                                  + "', @CONSIGNMENT_FROM='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FROM)
                                  + "', @CONSIGNMENT_TO='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_TO)
                                  + "', @CONSIGNMENT_CONSIGNEE_DETAILS='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_CONSIGNEE_DETAILS)
                                  + "', @vehroute_consigment_modelID='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_MODELID)
                                  + "', @vehroute_consignment_VariantId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_VARIANTID)
                                  + "', @consigment_quantity='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_QUANTITY)
                                  + "', @vehroute_consigment_DealerId='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DEALER)

                                  + "', @CONSIGNMENT_REACHDAY_INSOUREC='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REACHDAY_INSOUREC)
                                  + "', @CONSIGNMENT_LOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE)
                                  + "', @CONSIGNMENT_EXPDATEOFDELIVERY='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY)
                                  + "', @CONSIGNMENT_REPORTINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REPORTINGDATE)
                                  + "', @CONSIGNMENT_UNLOADINGDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_UNLOADINGDATE)
                                  + "', @CONSIGNMENT_REMARK='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_REMARK)
                                  + "', @CONSIGNMENT_FORMAN='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_FORMAN)
                                  + "', @CONSIGNMENT_DRIVER_NUMBER='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_DRIVER_NUMBER)
                                  + "', @CONSIGNMENT_ZONE='" + Convert.ToString(_obj_Smvts_RoutePlan.CONSIGNMENT_ZONE)
                                  + "', @VEHROUTE_LOAD='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LOAD)
                                  + "', @VEHROUTE_TRIPNO='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TRIPNO)
                                  + "', @TRIPREMARKS_REMARKS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_REMARKS)
                                  + "', @VEHROUTE_TRIP_ALLOWED_DAYS='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_TOTAL_ALLOWED_DAYS)
                                  + "', @VEHROUTE_LAST_TRIP_COMPLETED_DATED='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_LAST_TRIP_COMPLETION_DATE)
                                  + "', @VEHROUTE_COMPLETIONDATE='" + Convert.ToString(_obj_Smvts_RoutePlan.VEHROUTE_COMPLETEDDATE)
                                  + "'"))

                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }




    #endregion

    #region SMVTS_CONTRACTS Methods
    /// <summary>
    /// Writtenby Sridevi on 28/12/2009 11:30:00 A.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_Contracts(SMVTS_CONTRACTS _obj_Smvts_Contract)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Contract.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ID) == "0")
                    dt = ExecuteQuery1("EXEC USP_SMVTS_CONTRACTS @Operation = 'select'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTRACTS @Operation = 'select', @CONTRACTS_ID ='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_CONTRACTS @Operation = 'Select', @CONTRACTS_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_CATEGORY_ID) + "'");
                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTRACTS @Operation = 'Check', @CONTRACTS_NAME ='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTRACTS @Operation = 'Check', @CONTRACTS_NAME ='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME) + "',@CONTRACTS_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ID) + "'");
                break;
            default:
                break;
        }
        return dt;
    }

    public static bool set_Contracts(SMVTS_CONTRACTS _obj_Smvts_Contract, string dbname, string orgname)
    {
        bool status = false;
        switch (_obj_Smvts_Contract.OPERATION)
        {
            case operation.Insert:
                string query = "";
                string IQuery = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Insert' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                                  + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                                  + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                                  + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                                  + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                                  + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                                  + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                                  + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                                  + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE)
                                 + "', @QUERY='" + _obj_Smvts_Contract.QUERY + "'";
                query = IQuery + ", @CONTRACTS_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_CATEGORY_ID) + "'";

                //dbname =Convert.ToString(_obj_Smvts_Contract.CONTRACTS_CATEGORY_ID);
                if (ExecuteNonQuery1(query))
                {
                    if (dbname != "")
                    {
                        string CategQuery = "";
                        if (orgname.Trim().Contains("(C)"))
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                        }
                        else
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        string IQuery1 = "";
                        string query1 = "";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                        {
                            IQuery1 = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Insert' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                               + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                               + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                               + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                               + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                               + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                               + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                               + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                               + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE)
                               + "', @QUERY='" + _obj_Smvts_Contract.QUERY + "'";

                            query1 = IQuery1 + ", @CONTRACTS_CATEGORY_ID ='" + dt_categ.Rows[0][0].ToString() + "'";
                        }
                        if (Dal.ExecuteNonQueryDB1(query1, dbname))
                        {
                            status = true;
                        }
                    }

                }
                else
                    status = false;
                break;
            case operation.Update:
                if (_obj_Smvts_Contract.QUERY != null)
                {
                    string UCQuery = "";

                    string IQuery1 = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Update' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                                 + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                                 + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                                 + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                                 + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                                 + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                                 + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                                 + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                                 + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE)
                                + "', @QUERY='" + _obj_Smvts_Contract.QUERY + "'";
                    UCQuery = IQuery1 + ", @CONTRACTS_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_CATEGORY_ID) + "',@CONTRACTS_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ID) + "'";

                    //string UQuery = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Update',@CONTRACTS_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ID)
                    //                  + "', @CONTRACTS_CATEGORY_ID='" + _obj_Smvts_Contract.CONTRACTS_CATEGORY_ID
                    //                  + "', @CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                    //                  + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                    //                  + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                    //                  + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                    //                  + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                    //                  + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                    //                  + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE)
                    //                  + "', @QUERY='" + _obj_Smvts_Contract.QUERY + "'";
                    if (dbname == "")
                    {

                        if (ExecuteNonQuery(UCQuery))
                            status = true;
                    }
                    //else
                    //{
                    //    if (Dal.ExecuteNonQueryDB1(UQuery, dbname))
                    //    {
                    //        status = true;
                    //    }
                    //}

                    else
                    {
                        string abc = "";
                        if (orgname.Trim().Contains("(C)"))
                        {
                            abc = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'";
                        }
                        else
                        {
                            abc = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "'";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQuery1(abc);

                        string role = "";
                        if (orgname.Trim().Contains("(C)"))
                        {
                            role = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'";

                        }
                        else
                        {
                            role = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "'";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        DataTable dt_role = new DataTable();
                        dt_role = Dal.ExecuteQueryDB1(role, dt_categ.Rows[0]["CATEG_DBNAME"].ToString());
                        string servicequerry = _obj_Smvts_Contract.QUERY;
                        string result = servicequerry.Replace("@SERVCONT_CONTRACTS_ID=''" + Convert.ToInt32(_obj_Smvts_Contract.CONTRACTS_ID) + "''", "@SERVCONT_CONTRACTS_ID=''" + Convert.ToInt32(dt_role.Rows[0]["CONTRACTS_ID"]) + "''");
                        string value = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Update' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                                + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                                + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                                + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                                + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                                + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                                + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                                + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                                + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE)
                                + "', @QUERY='" + result + "'";

                        string oldquery = value + ",@CONTRACTS_CATEGORY_ID='" + Convert.ToString(dt_role.Rows[0]["CONTRACTS_CATEGORY_ID"]) + "',@CONTRACTS_ID='" + Convert.ToString(dt_role.Rows[0]["CONTRACTS_ID"]) + "'";




                        if ((Dal.ExecuteNonQuery1(UCQuery)) && (Dal.ExecuteNonQueryDB1(oldquery, dt_categ.Rows[0]["CATEG_DBNAME"].ToString())))
                        {
                            status = true;
                        }

                    }
                }
                status = true;
                break;

            default:
                break;

        }
        return status;
    }



    public static DataTable get_ServCont(SMVTS_SERVICECONTRACTS _obj_Smvts_ServCont)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_ServCont.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_ServCont.SERVCONT_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'select',@SERVCONT_CONTRACTS_ID ='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_CONTRACTS_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'select', @SERVCONT_ID ='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_ID) + "'");

                break;

            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Select', @SERVCONT_CONTRACTS_ID ='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_CONTRACTS_ID) + "'");
                break;
            case operation.Check:
            //if (Convert.ToString(_obj_Smvts_RoutePlan.ROUTES_ID) == "0")
            //    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Check', @ROUTES_STARTLAT ='" + Convert.ToString(_obj_Smvts_RoutePlan.ROUTES_STARTLAT) + "', @ROUTES_STARTLONG='" + _obj_Smvts_RoutePlan.ROUTES_STARTLONG + "', @ROUTES_ENDLAT ='" + Convert.ToString(_obj_Smvts_RoutePlan.ROUTES_ENDLAT) + "', @ROUTES_ENDLONG='" + _obj_Smvts_RoutePlan.ROUTES_ENDLONG + "' ,@ROUTES_CATEGORY_ID='" + _obj_Smvts_RoutePlan.ROUTES_CATEGORY_ID + "'");
            //else
            //    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Check', @ROUTES_STARTLAT ='" + Convert.ToString(_obj_Smvts_RoutePlan.ROUTES_STARTLAT) + "', @ROUTES_STARTLONG='" + _obj_Smvts_RoutePlan.ROUTES_STARTLONG + "', @ROUTES_ENDLAT ='" + Convert.ToString(_obj_Smvts_RoutePlan.ROUTES_ENDLAT) + "', @ROUTES_ENDLONG='" + _obj_Smvts_RoutePlan.ROUTES_ENDLONG + "' ,@ROUTES_CATEGORY_ID='" + _obj_Smvts_RoutePlan.ROUTES_CATEGORY_ID + "',@ROUTES_ID='" + _obj_Smvts_RoutePlan.ROUTES_ID + "'");
            //break;
            default:
                break;
        }
        return dt;
    }

    public static string set_ServCont(SMVTS_SERVICECONTRACTS _obj_Smvts_ServCont)
    {

        string strQuery = string.Empty;
        switch (_obj_Smvts_ServCont.OPERATION)
        {
            case operation.Insert:
                strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Insert' , @SERVCONT_CONTRACTS_ID =  @TEMP"
                               + ", @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                               + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                               + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                               + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                               + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
                               + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
                               + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                               + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";

                break;
            case operation.Update:

                strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Update',@SERVCONT_ID='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_ID)
                    + "', @SERVCONT_CONTRACTS_ID='" + _obj_Smvts_ServCont.SERVCONT_CONTRACTS_ID
                    + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                    + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                    + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                    + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                    + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                    + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";
                break;
            default:
                break;
        }
        return strQuery;
    }
    public static bool set_ServCont1(SMVTS_SERVICECONTRACTS _obj_Smvts_ServCont, string dbname, string contractname, string orgname)
    {
        bool status1 = false;
        string strQuery = string.Empty;
        switch (_obj_Smvts_ServCont.OPERATION)
        {
            case operation.Insert:
                strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Insert' , @SERVCONT_CONTRACTS_ID =  " + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_CONTRACTS_ID)
                               + ", @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                               + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                               + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                               + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                               + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
                               + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
                               + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                               + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";

                if (ExecuteNonQuery1(strQuery))
                {
                    if (dbname != "")
                    {
                        //string CategQuery = "";
                        //if (orgname.Trim().Contains("(C)"))
                        //{
                        //    CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                        //}
                        //else
                        //{
                        //    CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                        //}

                        string IQuery1 = "";
                        string query1 = "";
                        string qry = "select contracts_id from smvts_contracts where contracts_name= '" + contractname + "'";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQueryDB1(qry, dbname);
                        if (dt_categ.Rows.Count > 0)
                        {
                            int cid = Convert.ToInt32(dt_categ.Rows[0]["contracts_id"]);
                            IQuery1 = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Insert' , @SERVCONT_CONTRACTS_ID =  " + cid
                               + ", @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                               + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                               + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                               + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                               + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
                               + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
                               + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                               + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";



                        }
                        if (Dal.ExecuteNonQueryDB1(IQuery1, dbname))
                        {
                            status1 = true;
                        }
                    }

                }
                else
                    status1 = false;
                break;
            case operation.Update:

                strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Update',@SERVCONT_ID='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_ID)
                    + "', @SERVCONT_CONTRACTS_ID='" + _obj_Smvts_ServCont.SERVCONT_CONTRACTS_ID
                    + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                    + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                    + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                    + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                    + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                    + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";
                break;
            default:
                break;
        }
        return status1;
    }


    #endregion

    #region SMVTS_SERVICE Methods
    /// <summary>
    /// Writtenby Sridevi on 04/01/2010 11:30:00 A.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_Service(SMVTS_SERVICE _obj_Smvts_Service)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Service.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Service.SERVICES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_SERVICES @Operation = 'select'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_SERVICES @Operation = 'select', @SERVICES_ID ='" + Convert.ToString(_obj_Smvts_Service.SERVICES_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }

    #endregion

    #region SMVTS_SERVICECONTRACTS

    public static DataTable get_ServiceContract(SMVTS_SERVICECONTRACTS _obj_Smvts_ServiceContract)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_ServiceContract.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_ServiceContract.SERVCONT_CONTRACTS_ID) != "0")
                {
                    string x = "EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'select', @SERVCONT_CONTRACTS_ID ='" + Convert.ToString(_obj_Smvts_ServiceContract.SERVCONT_CONTRACTS_ID) + "'";
                    dt = ExecuteQuery(x);
                }
                //else
                //    dt = ExecuteQuery("EXEC USP_SMVTS_SERVICES @Operation = 'select', @SERVICES_ID ='" + Convert.ToString(_obj_Smvts_Service.SERVICES_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }
    #endregion


    #region SMVTS_SERVICEBASEDLOGIN Methods

    public static bool get_ServiceBasedLoginAPI(int CONTRACTS_CATEGORY_ID, int SERVCONT_ID, DateTime CURRENTDATE, string dbname)
    {
        DataTable dt = new DataTable();
        Boolean strAns = new Boolean();
        //string test = "EXEC USP_SMVTS_SERVICESBASEDLOGIN @CATEGORY_ID= '" + CONTRACTS_CATEGORY_ID + "', @SERVCONT_ID = '" + SERVCONT_ID + "',@CURRENTDATE =  getdate() '" + CURRENTDATE + "'";
        string test = "EXEC USP_SMVTS_SERVICESBASEDLOGIN @CATEGORY_ID= '" + CONTRACTS_CATEGORY_ID + "', @SERVCONT_ID = '" + SERVCONT_ID + "'";
        string query = " SELECT CONTRACTS_NAME,CONTRACTS_ID,CATEG_ID,CATEG_DBNAME FROM SMVTS_CONTRACTS(NOLOCK) INNER JOIN SMVTS_CATEGORIES(NOLOCK) ON CONTRACTS_CATEGORY_ID=CATEG_ID WHERE CONTRACTS_CATEGORY_ID='" + CONTRACTS_CATEGORY_ID + "'";
        DataTable dt_categ = Dal.ExecuteQueryDB1(query, dbname);

        dt = Dal.ExecuteQueryDB1(test, dbname);
        if (dt.Rows.Count > 0)
            strAns = Convert.ToBoolean(Convert.ToString(dt.Rows[0][0]));

        if (strAns == true)
            return true;
        else
            return false;

    }

    #endregion


    #region SMVTS_SERVICEBASEDLOGIN Methods

    public static bool get_ServiceBasedLogin(int CONTRACTS_CATEGORY_ID, int SERVCONT_ID, DateTime CURRENTDATE)
    {
        //DataTable dt = new DataTable();
        //Boolean strAns = new Boolean();
        ////string test = "EXEC USP_SMVTS_SERVICESBASEDLOGIN @CATEGORY_ID= '" + CONTRACTS_CATEGORY_ID + "', @SERVCONT_ID = '" + SERVCONT_ID + "',@CURRENTDATE =  getdate() '" + CURRENTDATE + "'";
        //string test = "EXEC USP_SMVTS_SERVICESBASEDLOGIN @CATEGORY_ID= '" + CONTRACTS_CATEGORY_ID + "', @SERVCONT_ID = '" + SERVCONT_ID + "'";
        //string query = " SELECT CONTRACTS_NAME,CONTRACTS_ID,CATEG_ID,CATEG_DBNAME FROM SMVTS_CONTRACTS(NOLOCK) INNER JOIN SMVTS_CATEGORIES(NOLOCK) ON CONTRACTS_CATEGORY_ID=CATEG_ID WHERE CONTRACTS_CATEGORY_ID='" + CONTRACTS_CATEGORY_ID + "'";
        //DataTable dt_categ = Dal.ExecuteQuery(query);
        //string dbname = dt_categ.Rows[0]["CATEG_DBNAME"].ToString();
        //dt = Dal.ExecuteQueryDB1(test, dbname);
        //if (dt.Rows.Count > 0)
        //    strAns = Convert.ToBoolean(Convert.ToString(dt.Rows[0][0]));

        //if (strAns == true)
        //    return true;
        //else
        //    return false;
        DataTable dt = new DataTable();
        Boolean strAns = new Boolean();
        //string test = "EXEC USP_SMVTS_SERVICESBASEDLOGIN @CATEGORY_ID= '" + CONTRACTS_CATEGORY_ID + "', @SERVCONT_ID = '" + SERVCONT_ID + "',@CURRENTDATE =  getdate() '" + CURRENTDATE + "'";
        string test = "EXEC USP_SMVTS_SERVICESBASEDLOGIN @CATEGORY_ID= '" + CONTRACTS_CATEGORY_ID + "', @SERVCONT_ID = '" + SERVCONT_ID + "'";
        string query = " SELECT CONTRACTS_NAME,CONTRACTS_ID,CATEG_ID,CATEG_DBNAME FROM SMVTS_CONTRACTS(NOLOCK) INNER JOIN SMVTS_CATEGORIES(NOLOCK) ON CONTRACTS_CATEGORY_ID=CATEG_ID WHERE CONTRACTS_CATEGORY_ID='" + CONTRACTS_CATEGORY_ID + "'";
        DataTable dt_Connection = Dal.ExecuteQuery(query);
        string dbname = dt_Connection.Rows[0]["CATEG_DBNAME"].ToString();
        //   string Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname.Replace("(C)", "").Trim() + "'";
        DataTable dt_table = Dal.ExecuteQueryDB1(query, dbname);
        dt = Dal.ExecuteQueryDB1(test, dbname);
        if (dt.Rows.Count > 0)
            strAns = Convert.ToBoolean(Convert.ToString(dt.Rows[0][0]));

        if (strAns == true)
            return true;
        else
            return false;
    }

    #endregion

    #region SMVTS_ROLES Methods

    public static DataTable get_Roles(SMVTS_ROLES _obj_Smvts_Roles)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Roles.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Roles.ROLES_ID) == "0")
                    dt = ExecuteQuery1("EXEC [USP_SMVTS_ROLES] @Operation = 'select'");
                else
                    dt = ExecuteQuery("EXEC [USP_SMVTS_ROLES] @Operation = 'select',  @ROLES_ID ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ID) + "'");

                break;


            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Roles.ROLES_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROLES @Operation = 'Check', @ROLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLENAME) + "',@ROLES_ROLETYPE='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLETYPE) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROLES @Operation = 'Check', @ROLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLENAME) + "',@ROLES_ROLETYPE='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLETYPE) + "'");
                break;
            default:
                break;
        }
        return dt;
    }


    public static bool set_Roles(SMVTS_ROLES _obj_Smvts_Roles, string dbname, string orgname)
    {
        bool status = false;
        switch (_obj_Smvts_Roles.OPERATION)
        {
            case operation.Insert:
                string querry = "";
                string querryi = "EXEC USP_SMVTS_ROLES @Operation = 'Insert' , @ROLES_ID='" + _obj_Smvts_Roles.ROLES_ID
                                  + "', @ROLES_ROLETYPE ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLETYPE)
                                  + "', @ROLES_FORMSID ='" + (_obj_Smvts_Roles.ROLES_FORMSID)
                                  + "', @ROLES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Roles.CREATEDBY)
                                  
                                  + "', @ROLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Roles.LASTMDFBY)
                                
                                  + "',@ROLES_COLUMNIDS='" + _obj_Smvts_Roles.ROLES_COLUMNSID
                                  + "',@ROLES_DASHBOARD='" + _obj_Smvts_Roles.ROLES_DASHBOARD + "'";
                querry = querryi + ", @ROLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLENAME) + "'";

                if (ExecuteNonQuery(querry))
                {
                    if (dbname != "")
                    {
                        string CategQuery = "";
                        if (_obj_Smvts_Roles.ROLES_ROLETYPE == 3)
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                        }
                        else
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                        {


                            querry = querryi + ", @ROLES_CATEGORY_ID ='" + dt_categ.Rows[0][0].ToString() + "'";
                        }
                        if (Dal.ExecuteNonQueryDB1(querry, dbname))
                        {
                            status = true;
                        }
                    }
                }
                //if (ExecuteNonQuery(querryi))
                //if (Dal.ExecuteNonQueryDB1(querryi,dbname))
                //    status = true;
                //else
                //    status = false;
                break;

            case operation.Update:
                string querry1 = "";
                string querryu = "EXEC USP_SMVTS_ROLES @Operation = 'Update' , @ROLES_ROLETYPE ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLETYPE)
                                  + "', @ROLES_FORMSID ='" + (_obj_Smvts_Roles.ROLES_FORMSID)
                                  + "', @ROLES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Roles.CREATEDBY)
                                  + "', @ROLES_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Roles.CREATEDDATE)
                                  + "', @ROLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Roles.LASTMDFBY)
                                  + "', @ROLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Roles.LASTMDFDATE)
                                  + "',@ROLES_COLUMNIDS='" + _obj_Smvts_Roles.ROLES_COLUMNSID
                                  + "',@ROLES_DASHBOARD='" + _obj_Smvts_Roles.ROLES_DASHBOARD + "'";
                querry1 = querryu + ", @ROLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLENAME) + "', @ROLES_ID='" + _obj_Smvts_Roles.ROLES_ID + "'";


                if (dbname == "")
                {

                    if (ExecuteNonQuery(querryu))
                        status = true;
                }
                else if (_obj_Smvts_Roles.ROLES_ROLETYPE != 4)
                {
                    string abc = "";
                    if (_obj_Smvts_Roles.ROLES_ROLETYPE == 3)
                    {
                        abc = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' and CATEG_CATETYPE_ID=3";
                    }
                    else
                    {
                        abc = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' and CATEG_CATETYPE_ID=2";
                    }
                    DataTable dt_categ = new DataTable();
                    dt_categ = Dal.ExecuteQuery1(abc);

                    string role = "";
                    if (_obj_Smvts_Roles.ROLES_ROLETYPE == 3)
                    {
                        role = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'and CATEG_CATETYPE_ID=3";
                    }
                    else
                    {
                        role = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "'and CATEG_CATETYPE_ID=2";
                    }
                    DataTable dt_role = new DataTable();
                    dt_role = Dal.ExecuteQueryDB1(role, dt_categ.Rows[0]["CATEG_DBNAME"].ToString());

                    string oldquerry = querryu + ",@ROLES_CATEGORY_ID ='" + Convert.ToString(dt_role.Rows[0]["ROLES_CATEGORY_ID"]) + "', @ROLES_ID='" + dt_role.Rows[0]["ROLES_ID"] + "'";


                    if ((Dal.ExecuteNonQuery1(querry1)) && (Dal.ExecuteNonQueryDB1(oldquerry, dt_categ.Rows[0]["CATEG_DBNAME"].ToString())))
                    {
                        status = true;
                    }

                    else
                    {
                        status = false;
                    }

                }

                else if (_obj_Smvts_Roles.ROLES_ROLETYPE == 4)
                {
                    string value = "";
                    value = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' and ROLES_ROLETYPE=4";
                    DataTable dt_categ = new DataTable();
                    dt_categ = Dal.ExecuteQuery1(value);

                    string role1 = "";
                    role1 = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'and ROLES_ROLETYPE=4";
                    DataTable dt_role = new DataTable();
                    dt_role = Dal.ExecuteQueryDB1(role1, dt_categ.Rows[0]["CATEG_DBNAME"].ToString());

                    string oldquerry1 = querryu + ",@ROLES_CATEGORY_ID ='" + Convert.ToString(dt_role.Rows[0]["ROLES_CATEGORY_ID"]) + "', @ROLES_ID='" + dt_role.Rows[0]["ROLES_ID"] + "'";
                    if ((Dal.ExecuteNonQuery1(querry1)) && (Dal.ExecuteNonQueryDB1(oldquerry1, dt_categ.Rows[0]["CATEG_DBNAME"].ToString())))
                    {
                        status = true;
                    }
                    else
                    {
                        status = false;
                    }
                }


                status = true;

                break;


            default:
                break;
        }
        return status;
    }
    public static bool set_Roles1(SMVTS_ROLES _obj_Smvts_Roles, string dbname, string orgname)
    {
        bool status = false;
        switch (_obj_Smvts_Roles.OPERATION)
        {
            case operation.Insert:
                string querry = "";
                string querryi = "EXEC USP_SMVTS_ROLES @Operation = 'Insert' , @ROLES_ID='" + _obj_Smvts_Roles.ROLES_ID
                                  + "', @ROLES_ROLETYPE ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLETYPE)
                                  + "', @ROLES_FORMSID ='" + (_obj_Smvts_Roles.ROLES_FORMSID)
                                  + "', @ROLES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Roles.CREATEDBY)
                                  + "', @ROLES_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Roles.CREATEDDATE)
                                  + "', @ROLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Roles.LASTMDFBY)
                                  + "', @ROLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Roles.LASTMDFDATE)
                                  + "',@ROLES_COLUMNIDS='" + _obj_Smvts_Roles.ROLES_COLUMNSID
                                  + "',@ROLES_DASHBOARD='" + _obj_Smvts_Roles.ROLES_DASHBOARD + "'";
                querry = querryi + ", @ROLES_CATEGORY_ID ='" + Convert.ToInt32(_obj_Smvts_Roles.ROLES_CATEGORY_ID) + "'";

                if (ExecuteNonQuery1(querry))
                {
                    if (dbname != "")
                    {
                        string CategQuery = "";
                        //if (_obj_Smvts_Roles.ROLES_ROLETYPE == 3)
                        //{
                        CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                        //}
                        //else
                        //{
                        //    CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                        //}
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);

                        {


                            querry = querryi + ", @ROLES_CATEGORY_ID ='" + dt_categ.Rows[0][0].ToString() + "'";
                        }
                        if (Dal.ExecuteNonQueryDB1(querry, dbname))
                        {
                            status = true;
                        }
                    }
                }
                //if (ExecuteNonQuery(querryi))
                //if (Dal.ExecuteNonQueryDB1(querryi,dbname))
                //    status = true;
                //else
                //    status = false;
                break;

            case operation.Update:
                string querry1 = "";
                string querryu = "EXEC USP_SMVTS_ROLES @Operation = 'Update' , @ROLES_ROLETYPE ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLETYPE)
                                  + "', @ROLES_FORMSID ='" + (_obj_Smvts_Roles.ROLES_FORMSID)
                                  + "', @ROLES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Roles.CREATEDBY)
                                  + "', @ROLES_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Roles.CREATEDDATE)
                                  + "', @ROLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Roles.LASTMDFBY)
                                  + "', @ROLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Roles.LASTMDFDATE)
                                  + "',@ROLES_COLUMNIDS='" + _obj_Smvts_Roles.ROLES_COLUMNSID
                                  + "',@ROLES_DASHBOARD='" + _obj_Smvts_Roles.ROLES_DASHBOARD + "'";
                querry1 = querryu + ", @ROLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Roles.ROLES_ROLENAME) + "', @ROLES_ID='" + _obj_Smvts_Roles.ROLES_ID + "'";


                if (dbname == "")
                {

                    if (ExecuteNonQuery(querryu))
                        status = true;
                }
                else if (_obj_Smvts_Roles.ROLES_ROLETYPE != 4)
                {
                    string abc = "";
                    if (_obj_Smvts_Roles.ROLES_ROLETYPE == 3)
                    {
                        abc = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' and CATEG_CATETYPE_ID=3";
                    }
                    else
                    {
                        abc = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' and CATEG_CATETYPE_ID=2";
                    }
                    DataTable dt_categ = new DataTable();
                    dt_categ = Dal.ExecuteQuery1(abc);

                    string role = "";
                    if (_obj_Smvts_Roles.ROLES_ROLETYPE == 3)
                    {
                        role = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'and CATEG_CATETYPE_ID=3";
                    }
                    else
                    {
                        role = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "'and CATEG_CATETYPE_ID=2";
                    }
                    DataTable dt_role = new DataTable();
                    dt_role = Dal.ExecuteQueryDB1(role, dt_categ.Rows[0]["CATEG_DBNAME"].ToString());

                    string oldquerry = querryu + ",@ROLES_CATEGORY_ID ='" + Convert.ToString(dt_role.Rows[0]["ROLES_CATEGORY_ID"]) + "', @ROLES_ID='" + dt_role.Rows[0]["ROLES_ID"] + "'";


                    if ((Dal.ExecuteNonQuery1(querry1)) && (Dal.ExecuteNonQueryDB1(oldquerry, dt_categ.Rows[0]["CATEG_DBNAME"].ToString())))
                    {
                        status = true;
                    }

                    else
                    {
                        status = false;
                    }

                }

                else if (_obj_Smvts_Roles.ROLES_ROLETYPE == 4)
                {
                    string value = "";
                    value = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' and ROLES_ROLETYPE=4";
                    DataTable dt_categ = new DataTable();
                    dt_categ = Dal.ExecuteQuery1(value);

                    string role1 = "";
                    role1 = "select CATEG_ID,CATEG_DBNAME,ROLES_CATEGORY_ID,ROLES_ID,ROLES_ROLETYPE from SMVTS_ROLES(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=ROLES_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'and ROLES_ROLETYPE=4";
                    DataTable dt_role = new DataTable();
                    dt_role = Dal.ExecuteQueryDB1(role1, dt_categ.Rows[0]["CATEG_DBNAME"].ToString());

                    string oldquerry1 = querryu + ",@ROLES_CATEGORY_ID ='" + Convert.ToString(dt_role.Rows[0]["ROLES_CATEGORY_ID"]) + "', @ROLES_ID='" + dt_role.Rows[0]["ROLES_ID"] + "'";
                    if ((Dal.ExecuteNonQuery1(querry1)) && (Dal.ExecuteNonQueryDB1(oldquerry1, dt_categ.Rows[0]["CATEG_DBNAME"].ToString())))
                    {
                        status = true;
                    }
                    else
                    {
                        status = false;
                    }
                }


                status = true;

                break;


            default:
                break;
        }
        return status;
    }

    #endregion


    #region GEOFENCING
    public static DataTable get_Geofencing(SMVTS_GEOFENCING _objGeofencing)
    {
        DataTable dt = new DataTable();
        if (_objGeofencing.OPERATION == operation.Select)
        {
            dt = ExecuteQuery("EXEC USP_SMVTS_GEOFENCING @MODE ='SELECT', @GEOFENCING_CATEGORY_ID =" + _objGeofencing.GEOFENCING_CATEGORY_ID + "");
        }
        return dt;
    }
    public static bool set_Geofencing(SMVTS_GEOFENCING _objGeofencing)
    {
        bool Flag = false;
        if (_objGeofencing.OPERATION == operation.Insert)
        {
            Flag = ExecuteNonQuery("EXEC USP_SMVTS_GEOFENCING @MODE ='INSERT', @GEOFENCING_CATEGORY_ID =" + _objGeofencing.GEOFENCING_CATEGORY_ID + ", @GEOFENCING_CIRCLE ='" + Convert.ToString(_objGeofencing.GEOFENCING_CIRCLE) + "', @GEOFENCING_RADIOUS ='" + Convert.ToString(_objGeofencing.GEOFENCING_RADIOUS) + "', @GEOFENCING_STATUS ='" + Convert.ToString(_objGeofencing.GEOFENCING_STATUS) + "', @GEOFENCING_CREATEDBY ='" + _objGeofencing.CREATEDBY + "', @GEOFENCING_CREATEDDATE ='" + _objGeofencing.CREATEDDATE + "', @GEOFENCING_MODIFIEDBY ='" + _objGeofencing.LASTMDFBY + "',@GEOFENCING_MODIFIEDDATE='" + _objGeofencing.LASTMDFDATE + "'");
        }
        return Flag;
    }
    #endregion

    #region Alert

    public static DataTable get_Alert(SMVTS_ALERTS _objAlerts)
    {
        DataTable dt = new DataTable();

        if (_objAlerts.ALERTTYPE.ToUpper() == "GEOFENCING")
        {
            dt = ExecuteQuery("EXEC USP_GEOFENCING @VEHICLENO='AP 11 X 7220',@LATCONST=" + _objAlerts.LATITUDE + ",@LONGCONST=" + _objAlerts.LONGITUDE);


        }

        //" + _objAlerts.VEHICLENO+"'"
        return dt;
    }

    internal static DataTable get_Alertdata(SMVTS_FLEET_ALERT _objAlert)
    {
        DataTable dt = ExecuteQuery("EXEC [USP_SMVTS_GETALERTDATA]  @ALERT_CATEGORY_ID=" + _objAlert.ALERT_CATEGORY_ID);
        return dt;
    }

    #endregion

    #region MOBILEAPP_METHODS
    public static DataTable get_GridTrack_MOBILEAPP_METHODS(SMVTS_GRIDTRACK _objGridTrack, string parUserID, string dbname)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
         //   dt = Dal.ExecuteQueryDB1(("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID + "'"), dbname);
       dt = Dal.ExecuteQueryDB1(("EXEC USP_SMVTS_GRID_TRACK_MOBILE @USER_ID = '" + parUserID + "'"), dbname);

        return dt;
    }
    #endregion
    //by venkatesh 26th may 2017
    #region MOBILEAPP_METHODS BY VEHICLENO
    public static DataTable get_GridTrack_MOBILEAPP_METHODS_BY_VEHICLENO(SMVTS_GRIDTRACK _objGridTrack, string parUserID, string dbname, string VehicleNo)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = Dal.ExecuteQueryDB1(("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID + "'"), dbname);
        //DataTable dt2 = new DataTable();
        //var filtered = dt.AsEnumerable()
        //.Where(r => r.Field<String>("VEHICLE").Contains(VehicleNo));
        DataTable dtResult = dt.Select("VEHICLE_NUMBER LIKE '%" + VehicleNo + "%'").CopyToDataTable();
        return dtResult;
    }
    #endregion

    #region GRIDTRACKING

    public static DataTable get_GridTrack(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID + "'");

        return dt;
    }


    //for lohiya fleet summary report

    public static DataTable get_GridTrack_lohiyarpt(SMVTS_GRIDTRACK _objGridTrack_lohiya, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack_lohiya.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC [SMVTS_LOHIYA_RPT_FE] @USER_ID = '" + parUserID + "'");

        return dt;
    }
    public static DataTable get_GridTrack_Incoming(SMVTS_GRIDTRACK _objGridTrack3, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack3.OPERATION == operation.Select)
            //dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID + "'");
            dt = ExecuteQuery("EXEC USP_SMVTS_INCOMING_VEHICLES @USER_ID = '" + parUserID + "'");

        return dt;
    }
    public static DataTable get_GridTrack_byselectall(SMVTS_GRIDTRACK _objGridTrack, string parUserID, string parUserID2)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID + "'");

        DataTable dt2 = new DataTable();
        dt2 = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID2 + "'");

        DataTable dt_Report = new DataTable();
        dt_Report.Merge(dt);
        dt_Report.Merge(dt2);
        return dt_Report;
    }
    public static DataTable get_GridTrack_byselectall_Incomingall(SMVTS_GRIDTRACK _objGridTrack3, string parUserID, string parUserID2)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack3.OPERATION == operation.Select)
            //dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID + "'");
            dt = ExecuteQuery("EXEC USP_SMVTS_INCOMING_VEHICLES @USER_ID = '" + parUserID + "'");
        DataTable dt2 = new DataTable();
        //dt2 = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK @USER_ID = '" + parUserID2 + "'");
        dt2 = ExecuteQuery("EXEC USP_SMVTS_INCOMING_VEHICLES @USER_ID = '" + parUserID2 + "'");
        DataTable dt_Report = new DataTable();
        dt_Report.Merge(dt);
        dt_Report.Merge(dt2);
        return dt_Report;
    }


    public static DataTable get_GridTrack_dhanush(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)

            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DHANUSH @USER_ID = '" + parUserID + "'");

        return dt;
    }


    public static DataTable get_dgtconsignment(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
        {
            //dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DGT @USER_ID = '" + parUserID + "'");
            dt = ExecuteQuery("EXEC USP_SMVTS_DGTUPLOAD_MAIL @USERID = '" + parUserID + "', @OPERATION = 'REPORT' ");
        }
        return dt;
    }
    public static DataTable get_GridTrackDistance(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE @USER_ID = '" + parUserID + "'");

        return dt;
    }

    public static DataTable get_GridTrackDistancePro(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = Dal.ExecuteQuery_Prod("EXEC USP_SMVTS_GRID_TRACK_DISTANCE @USER_ID = '" + parUserID + "'");

        return dt;
    }

    //lohiya dashboard

    public static DataTable get_GridTrackDistance_lohiyadashboard(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC GRID_TRACK_DISTANCE_LOHIYA @USER_ID = '" + parUserID + "'");

        return dt;
    }


    public static DataTable get_IBTransportersTrack(SMVTS_GRIDTRACK _objGridTrack, int parUserID, string IB_Status)
    {
        DataTable dt = new DataTable();
        //if (_objGridTrack.OPERATION == operation.Select)
        // dt = ExecuteQuery("EXEC [USP_SMVTS_TRANSPORTER_PLANT_RPT] @USER_ID = '" + parUserID + "',@IB_Status='" + IB_Status + "'");      //by venkatesh
        dt = ExecuteQuery("EXEC [USP_SMVTS_TRANSPORTER_PLANT_RPT_PLANTWISE] @USER_ID = '" + parUserID + "',@IB_Status='" + IB_Status + "'");
        return dt;
    }


    public static DataTable get_GeofenceGridTrack(SMVTS_GEOFENCEGRIDTRACK _objGridTrack, string parUserID, string parZoneCode, string parCntrBranchID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_GEOFENCE_DASHBOARD_NEW @USER_ID = '" + parUserID
                + "', @ZONE_CODE='" + parZoneCode
                + "', @CNTRBRANCH_ID='" + parCntrBranchID + "'");

        return dt;
    }

    public static DataTable get_GridTrackCab(SMVTS_DASHBOARDFORCABS _objGridTrack, string parUserID, string parOffice, string parShift)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_CAB @USER_ID = '" + parUserID
                + "', @OFFICEMASTER_ID='" + parOffice + "', @SHIFTMASTER_ID='" + parShift + "'");

        return dt;
    }


    public static DataTable get_DeviceID(SMVTS_GRIDTRACK _objGridTrack)
    {

        DataTable dt = ExecuteQuery("EXEC USP_SMVTS_GETDEVICEID @VEHICLENO = '" + _objGridTrack.VEHICLE_NO + "'");
        return dt;


    }
    #endregion

    #region FreedVehicles
    public static DataTable get_freedVehicles_old(SMVTS_VEHICLES _objVehicles)
    {
        DataTable dt = new DataTable();
        if (_objVehicles.VEHICLES_FORMTYPE == "VEHICLEMASTER" && _objVehicles.VEHICLES_TYPE == "ADD")
            dt = ExecuteQuery("EXEC USP_SMVTS_GETFREEDVEHICLES_FLTMGM @FORMTYPE='VEHICLEMASTER',@TYPE = 'ADD', @CATEGORY_ID =" + _objVehicles.VEHICLES_CATEGORY_ID);
        else if (_objVehicles.VEHICLES_FORMTYPE == "MAINTENANCE" && _objVehicles.VEHICLES_TYPE == "ADD")
            dt = ExecuteQuery("EXEC USP_SMVTS_GETFREEDVEHICLES_FLTMGM @FORMTYPE='MAINTENANCE',@TYPE = 'ADD', @CATEGORY_ID =" + _objVehicles.VEHICLES_CATEGORY_ID);
        else if (_objVehicles.VEHICLES_FORMTYPE == "FLEETCONFIG" && _objVehicles.VEHICLES_TYPE == "ADD")
            dt = ExecuteQuery("EXEC USP_SMVTS_GETFREEDVEHICLES_FLTMGM @FORMTYPE='FLEETCONFIG',@TYPE = 'ADD', @CATEGORY_ID =" + _objVehicles.VEHICLES_CATEGORY_ID);
        else if (_objVehicles.VEHICLES_FORMTYPE == "TYRE" && _objVehicles.VEHICLES_TYPE == "ADD")
            dt = ExecuteQuery("EXEC USP_SMVTS_GETFREEDVEHICLES_FLTMGM @FORMTYPE='TYRE',@TYPE = 'ADD', @CATEGORY_ID =" + _objVehicles.VEHICLES_CATEGORY_ID);
        else
            dt = ExecuteQuery("EXEC USP_SMVTS_GETFREEDVEHICLES_FLTMGM @TYPE = 'EDIT', @CATEGORY_ID =" + _objVehicles.VEHICLES_CATEGORY_ID);

        return dt;
    }
    public static DataTable get_freedVehicles(SMVTS_VEHICLES _objVehicles)
    {
        DataTable dt = new DataTable();
        if (_objVehicles.VEHICLES_FORMTYPE == "VEHICLEMASTER" && _objVehicles.VEHICLES_TYPE == "ADD")
            dt = ExecuteQuery("EXEC USP_DEVICES_FLEET @FORMTYPE='VEHICLEMASTER',@TYPE = 'ADD', @USERS_ID =" + _objVehicles.USERID);
        else if (_objVehicles.VEHICLES_FORMTYPE == "MAINTENANCE" && _objVehicles.VEHICLES_TYPE == "ADD")
            dt = ExecuteQuery("EXEC USP_DEVICES_FLEET @FORMTYPE='MAINTENANCE',@TYPE = 'ADD', @USERS_ID =" + _objVehicles.USERID);
        //else if (_objVehicles.VEHICLES_FORMTYPE == "FLEETCONFIG" && _objVehicles.VEHICLES_TYPE == "ADD")
        //    dt = ExecuteQuery("EXEC USP_DEVICES_FLEET @FORMTYPE='FLEETCONFIG',@TYPE = 'ADD', @CATEGORY_ID =" + _objVehicles.VEHICLES_CATEGORY_ID);
        else if (_objVehicles.VEHICLES_FORMTYPE == "TYRE" && _objVehicles.VEHICLES_TYPE == "ADD")
            dt = ExecuteQuery("EXEC USP_DEVICES_FLEET @FORMTYPE='TYRE',@TYPE = 'ADD', @USERS_ID =" + _objVehicles.USERID);
        else
            dt = ExecuteQuery("EXEC USP_DEVICES_FLEET @TYPE = 'EDIT', @USERS_ID =" + _objVehicles.USERID);

        return dt;
    }
    #endregion

    public static DataTable getStateName(string country)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC SMVTS_GETSTATENAME @COUNTRY = '" + country + "'");
        return dt;
    }

    public static DataTable getCountryName()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC SMVTS_GETCOUNTRYNAME");
        return dt;
    }

    public static DataTable getCountryCode(string country)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC SMVTS_GETCOUNTRYCODE @COUNTRY = '" + country + "'");
        return dt;
    }

    public static string get_CountryCode(int CATID)
    {
        DataTable dt_Timezone = ExecuteQuery("EXEC SMVTS_USP_CODE @CATEGORY_ID=" + CATID);
        return dt_Timezone.Rows[0][0].ToString();
    }

    public static DataTable getCircle(SMVTS_CREATECIRCLE _objCircle)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [USP_SMVTS_CREATECIRCLE] @VEHICLENO = '" + _objCircle.VEHICLENO + "'");
        return dt;
    }

    public static bool set_Geocredentials(SMVTS_SET_GEOFENCECREDENTIAL _objCredentials)
    {
        bool status = false;

        switch (_objCredentials.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC SMVTS_SET_GEOFENCINGCREDENTIALS @Operation = 'INSERT',@LAT=" + _objCredentials.LATITUDE
                                  + ", @LON=" + _objCredentials.LONGITUDE
                                  + ", @RADIUS=" + _objCredentials.RADIUS
                                  + ", @LANDMARK='" + Convert.ToString(_objCredentials.LANDMARK)
                                  + "',@VEHICLENO='" + Convert.ToString(_objCredentials.VEHICLENO) + "'"
                                  ))
                    status = true;
                else
                    status = false;
                break;
            case operation.Delete:
                if (ExecuteNonQuery("EXEC SMVTS_SET_GEOFENCINGCREDENTIALS @Operation = 'DELETE',@LAT=" + _objCredentials.LATITUDE
                                  + ", @LON=" + _objCredentials.LONGITUDE
                                  + ", @RADIUS=" + _objCredentials.RADIUS
                                  + ", @LANDMARK='" + Convert.ToString(_objCredentials.LANDMARK)
                                  + "',@VEHICLENO='" + Convert.ToString(_objCredentials.VEHICLENO) + "'"
                                 ))
                    status = true;
                else
                    status = false;
                break;
            //case operation.Update:

            //    if (ExecuteNonQuery("EXEC USP_SMVTS_ROUTES @Operation = 'Insert',@LAT=" + _objCredentials.LATITUDE
            //                       + ", @LON=" + _objCredentials.LONGITUDE
            //                       + ", @RADIUS=" + _objCredentials.RADIUS
            //                       + ", @LANDMARK='" + Convert.ToString(_objCredentials.LANDMARK)
            //                       + "', @VEHICLENO='" + Convert.ToString(_objCredentials.VEHICLENO)
            //                       + "'"))
            //        status = true;
            //    else
            //        status = false;
            //    break;

            default:
                break;
        }
        return status;
    }

    public static void errorLog(string logname, string strErrormsg)
    {
        EventLog _objEventlog = new EventLog();
        if (!EventLog.SourceExists("SmvtsSource"))
            EventLog.CreateEventSource("SmvtsSource", logname);
        EventLog.WriteEntry("SmvtsSource", strErrormsg, EventLogEntryType.Error);
        //_objEventlog.Source="SmvtsSource";
        //_objEventlog.WriteEntry(strErrormsg,EventLogEntryType.Error);

    }

    #region "...TRACE_LOG_ERROR_LOG"
    public static bool set_TraceLog_ErrorLog(SMVTS_TRACE_ERROR_LOG _obj_Smvts_log)
    {
        bool status = false;
        switch (_obj_Smvts_log.OPERATION)
        {
            case operation.Insert:  //Insert into Trace Log
                if (ExecuteNonQuery1("EXEC USP_TRACE_LOG_ERROR_LOG @Operation = 'INSERT_INTO_TRACELOG', @USERID='" + _obj_Smvts_log.USERID
                                  + "', @STRSQL ='" + _obj_Smvts_log.STRSQL
                                  + "', @STARTTIME ='" + Convert.ToString(_obj_Smvts_log.STARTDATE)
                                  + "', @ENDTIME ='" + Convert.ToString(_obj_Smvts_log.ENDDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;

            case operation.Update:   //Insert into Error Log
                if (ExecuteNonQuery1("EXEC USP_TRACE_LOG_ERROR_LOG @Operation = 'INSERT_INTO_ERRORLOG', @USERID='" + _obj_Smvts_log.USERID
                                  + "', @STRSQL ='" + _obj_Smvts_log.STRSQL
                                  + "', @ERR_DESC ='" + _obj_Smvts_log.ERR_DESC
                                  + "', @STARTTIME ='" + Convert.ToString(_obj_Smvts_log.STARTDATE)
                                  + "', @ENDTIME ='" + Convert.ToString(_obj_Smvts_log.ENDDATE) + "'"))
                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }
    #endregion

    public static double DateDiff(System.DateTime startDate, System.DateTime endDate)
    {
        double diff = 0;
        System.TimeSpan TS = new System.TimeSpan(startDate.Ticks - endDate.Ticks);
        diff = Convert.ToDouble(TS.Days);
        return diff;

    }

    public static DataTable checkPassword(SMVTS_CHANGEPASSWORD _objChangePwd)
    {

        DataTable dt = ExecuteQuery("EXEC [SMVTS_CHECKPASSWORD] @USERS_USERNAME='" + _objChangePwd.USERNAME + "',@USERS_FULLNAME='" + _objChangePwd.FULLNAME + "',@USERS_ID=" + _objChangePwd.USERID);

        return dt;
    }

    public static DataTable CheckSmsConfig(SMVTS_SMSCONFIG _objSmsconfig)
    {
        DataTable dt = ExecuteQuery("EXEC [USP_SMVTS_CHECKSMSCONFIG] @ALERTTYPE='" + _objSmsconfig.ALERTTYPE + "',@VEHICLE_NO='" + _objSmsconfig.VEHICLENO + "'");
        return dt;
    }

    public static DataTable getOmkarLandmarks(string userid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [USP_OMKAR_LANDMARKS] @USER_ID = '" + userid + "'");
        return dt;
    }

    //public static bool UpdateRenewal(SMVTS_VEHICLES _objVehicles)
    //{
    //    bool status = false;
    //    if (ExecuteNonQuery("EXEC USP_SMVTS_RENEWAL_UPDATE @VEHICLES_INS_DONE='" + _objVehicles.VEHICLES_INS_DONE
    //        + "',@VEHICLES_PC_DONE='" + _objVehicles.VEHICLES_PC_DONE
    //        + "',@VEHICLES_ISP_DONE='" + _objVehicles.VEHICLES_ISP_DONE
    //        + "',@VEHICLES_NP_DONE='" + _objVehicles.VEHICLES_NP_DONE
    //        + "',@CATEID=" + _objVehicles.VEHICLES_CATEGORY_ID
    //        + ", @REGNUMBER='" + _objVehicles.VEHICLES_REGNUMBER
    //        + "'"))
    //        status = true;
    //    else
    //        status = false;
    //    return status;

    //}

    #region Maintenance
    public static DataTable getMaintenance(SMVTS_MAINTENANCE _objMaint)
    {
        DataTable dt = new DataTable();
        if (_objMaint.FORM_TYPE == "MAINTENANCE")
        {
            if (_objMaint.OPERATION == operation.Select && Convert.ToInt32(_objMaint.MAINTENANCE_ID) == 0)
                dt = ExecuteQuery("EXEC USP_SMVTS_GETMAINTENANCE @FORMTYPE='MAINTENANCE',@OPERATION='SELECT',@USER_ID =" + _objMaint.MAINTENANCE_USER_ID);
            if (_objMaint.OPERATION == operation.Select && Convert.ToInt32(_objMaint.MAINTENANCE_ID) != 0)
                dt = ExecuteQuery("EXEC USP_SMVTS_GETMAINTENANCE @FORMTYPE='MAINTENANCE',@OPERATION='SELECT',@USER_ID =" + _objMaint.MAINTENANCE_USER_ID + ",@MAINTENANCE_ID=" + _objMaint.MAINTENANCE_ID);
            if (_objMaint.OPERATION == operation.Check)
                dt = ExecuteQuery("EXEC USP_SMVTS_GETMAINTENANCE @FORMTYPE='MAINTENANCE',@OPERATION='CHECK',@USER_ID =" + _objMaint.MAINTENANCE_USER_ID + ",@MAINTENANCE_VEHREGNUMBER='" + _objMaint.MAINTENANCE_VEHREGNUMBER + "'");

        }
        else
        {
            if (_objMaint.OPERATION == operation.Select && Convert.ToInt32(_objMaint.MAINTENANCE_ID) != 0)
                dt = ExecuteQuery("EXEC USP_SMVTS_GETMAINTENANCE @FORMTYPE='MAINTENANCERENEWAL',@OPERATION='SELECT',@USER_ID =" + _objMaint.MAINTENANCE_USER_ID + ",@MAINTENANCE_ID=" + _objMaint.MAINTENANCE_ID);
            if (_objMaint.OPERATION == operation.Select && Convert.ToInt32(_objMaint.MAINTENANCE_ID) == 0)
                dt = ExecuteQuery("EXEC USP_SMVTS_GETMAINTENANCE @FORMTYPE='MAINTENANCERENEWAL',@OPERATION='SELECT',@USER_ID =" + _objMaint.MAINTENANCE_USER_ID);
        }

        return dt;
    }



    public static bool setMaintenance(SMVTS_MAINTENANCE _objMaint)
    {
        bool status = false;

        switch (_objMaint.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_MAINTENANCE_FLEET @OPERATION = 'INSERT',@MAINTENANCE_VEHREGNUMBER = '" + Convert.ToString(_objMaint.MAINTENANCE_VEHREGNUMBER)
                                  + "',@MAINTENANCE_ENGINENO='" + Convert.ToString(_objMaint.MAINTENANCE_ENGINE_NO)
                                  + "',@MAINTENANCE_CHASSIS_NO='" + Convert.ToString(_objMaint.MAINTENANCE_CHASSIS_NO)
                                  + "',@MAINTENANCE_ENGINE_OIL=" + _objMaint.MAINTENANCE_ENGINE_OIL
                                  + ", @MAINTENANCE_GEARBOXOIL=" + _objMaint.MAINTENANCE_GEARBOXOIL
                                  + ", @MAINTENANCE_WHEELBALANCING=" + _objMaint.MAINTENANCE_WHEELBALANCING
                                  + ", @MAINTENANCE_GENERALSERVICING='" + Convert.ToString(_objMaint.MAINTENANCE_GENERALSERVICING)
                                  + "',@MAINTENANCE_TYREREPLACEMENT=" + _objMaint.MAINTENANCE_TYREREPLACEMENT
                                  + ", @MAINTENANCE_POWERSTEERINGOIL=" + _objMaint.MAINTENANCE_POWERSTEERINGOIL
                                  + ", @MAINTENANCE_COOLANT=" + _objMaint.MAINTENANCE_COOLANT
                                  + ", @MAINTENANCE_BREAK_FLUID='" + Convert.ToString(_objMaint.MAINTENANCE_BREAK_FLUID)
                                  + "',@MAINTENANCE_BREAK_LINERS='" + Convert.ToString(_objMaint.MAINTENANCE_BREAK_LINERS)
                                  + "',@MAINTENANCE_CATEGORY_ID=" + _objMaint.MAINTENANCE_CATEGORY_ID
                                  + ",@MAINTENANCE_AIR_FILTER_INNER=" + _objMaint.MAINTENANCE_AIR_FILTER_INNER
                                  + ",@MAINTENANCE_AIR_FILTER_OUTER=" + _objMaint.MAINTENANCE_AIR_FILTER_OUTER
                                  + ",@MAINTENANCE_ALTINATOR_OVERHAULING=" + _objMaint.MAINTENANCE_ALTINATOR_OVERHAULING
                                  + ",@MAINTENANCE_BELL_CRANK_BUSHING=" + _objMaint.MAINTENANCE_BELL_CRANK_BUSHING
                                  + ",@MAINTENANCE_CLUTCH_KIT_CHANG=" + _objMaint.MAINTENANCE_CLUTCH_KIT_CHANG
                                  + ",@MAINTENANCE_DIESEL_TANK_SERVICING=" + _objMaint.MAINTENANCE_DIESEL_TANK_SERVICING
                                  + ",@MAINTENANCE_CROWAN_OIL_CHANGE=" + _objMaint.MAINTENANCE_CROWAN_OIL_CHANGE
                                  + ",@MAINTENANCE_ENGINE_MOUNTING_CHECK=" + _objMaint.MAINTENANCE_ENGINE_MOUNTING_CHECK
                                  + ",@MAINTENANCE_FANBELT_TENTION_CHECK=" + _objMaint.MAINTENANCE_FANBELT_TENTION_CHECK
                                  + ",@MAINTENANCE_FRONT_GREASING=" + _objMaint.MAINTENANCE_FRONT_GREASING
                                  + ",@MAINTENANCE_REAR_GREASING=" + _objMaint.MAINTENANCE_REAR_GREASING
                                  + ",@MAINTENANCE_FUELPUMP_SERVICING=" + _objMaint.MAINTENANCE_FUELPUMP_SERVICING
                                  + ",@MAINTENANCE_SHAFT_OVERHAULING=" + _objMaint.MAINTENANCE_SHAFT_OVERHAULING
                                  + ",@MAINTENANCE_RADIATOR_SERVICING=" + _objMaint.MAINTENANCE_RADIATOR_SERVICING
                                  + ",@MAINTENANCE_SELF_OVERHAULING=" + _objMaint.MAINTENANCE_SELF_OVERHAULING
                                  + ",@MAINTENANCE_BEAMAXEL_REPAIR=" + _objMaint.MAINTENANCE_BEAMAXEL_REPAIR
                                  + ",@MAINTENANCE_STEARING_OIL_FILTER=" + _objMaint.MAINTENANCE_STEARING_OIL_FILTER
                                  + ",@MAINTENANCE_BATTERY=" + _objMaint.MAINTENANCE_BATTERY
                                  ))
                    status = true;
                else
                    status = false;
                break;


            case operation.Update:
                if (_objMaint.FORM_TYPE == "MAINTENANCE")
                {
                    if (ExecuteNonQuery("EXEC USP_SMVTS_MAINTENANCE_FLEET @FORM_TYPE='MAINTENANCE',@OPERATION = 'UPDATE',@MAINTENANCE_ID=" + _objMaint.MAINTENANCE_ID
                                   + ",@MAINTENANCE_ENGINENO='" + Convert.ToString(_objMaint.MAINTENANCE_ENGINE_NO)
                                   + "',@MAINTENANCE_VEHREGNUMBER = '" + Convert.ToString(_objMaint.MAINTENANCE_VEHREGNUMBER)
                                   + "',@MAINTENANCE_CHASSIS_NO='" + Convert.ToString(_objMaint.MAINTENANCE_CHASSIS_NO)
                                   + "',@MAINTENANCE_ENGINE_OIL=" + _objMaint.MAINTENANCE_ENGINE_OIL
                                   + ",@MAINTENANCE_GEARBOXOIL=" + _objMaint.MAINTENANCE_GEARBOXOIL
                                   + ",@MAINTENANCE_WHEELBALANCING=" + _objMaint.MAINTENANCE_WHEELBALANCING
                                   + ",@MAINTENANCE_GENERALSERVICING='" + _objMaint.MAINTENANCE_GENERALSERVICING
                                   + "',@MAINTENANCE_TYREREPLACEMENT=" + _objMaint.MAINTENANCE_TYREREPLACEMENT
                                   + ",@MAINTENANCE_POWERSTEERINGOIL=" + _objMaint.MAINTENANCE_POWERSTEERINGOIL
                                   + ",@MAINTENANCE_COOLANT=" + _objMaint.MAINTENANCE_COOLANT
                                   + ",@MAINTENANCE_BREAK_FLUID='" + Convert.ToString(_objMaint.MAINTENANCE_BREAK_FLUID)
                                   + "',@MAINTENANCE_BREAK_LINERS='" + Convert.ToString(_objMaint.MAINTENANCE_BREAK_LINERS)
                                   + "',@MAINTENANCE_CATEGORY_ID=" + _objMaint.MAINTENANCE_CATEGORY_ID
                                   + ",@MAINTENANCE_AIR_FILTER_INNER=" + _objMaint.MAINTENANCE_AIR_FILTER_INNER
                                   + ",@MAINTENANCE_AIR_FILTER_OUTER=" + _objMaint.MAINTENANCE_AIR_FILTER_OUTER
                                   + ",@MAINTENANCE_ALTINATOR_OVERHAULING=" + _objMaint.MAINTENANCE_ALTINATOR_OVERHAULING
                                   + ",@MAINTENANCE_BELL_CRANK_BUSHING=" + _objMaint.MAINTENANCE_BELL_CRANK_BUSHING
                                   + ",@MAINTENANCE_CLUTCH_KIT_CHANG=" + _objMaint.MAINTENANCE_CLUTCH_KIT_CHANG
                                   + ",@MAINTENANCE_DIESEL_TANK_SERVICING=" + _objMaint.MAINTENANCE_DIESEL_TANK_SERVICING
                                   + ",@MAINTENANCE_CROWAN_OIL_CHANGE=" + _objMaint.MAINTENANCE_CROWAN_OIL_CHANGE
                                   + ",@MAINTENANCE_ENGINE_MOUNTING_CHECK=" + _objMaint.MAINTENANCE_ENGINE_MOUNTING_CHECK
                                   + ",@MAINTENANCE_FANBELT_TENTION_CHECK=" + _objMaint.MAINTENANCE_FANBELT_TENTION_CHECK
                                   + ",@MAINTENANCE_FRONT_GREASING=" + _objMaint.MAINTENANCE_FRONT_GREASING
                                   + ",@MAINTENANCE_REAR_GREASING=" + _objMaint.MAINTENANCE_REAR_GREASING
                                   + ",@MAINTENANCE_FUELPUMP_SERVICING=" + _objMaint.MAINTENANCE_FUELPUMP_SERVICING
                                   + ",@MAINTENANCE_SHAFT_OVERHAULING=" + _objMaint.MAINTENANCE_SHAFT_OVERHAULING
                                   + ",@MAINTENANCE_RADIATOR_SERVICING=" + _objMaint.MAINTENANCE_RADIATOR_SERVICING
                                   + ",@MAINTENANCE_SELF_OVERHAULING=" + _objMaint.MAINTENANCE_SELF_OVERHAULING
                                   + ",@MAINTENANCE_BEAMAXEL_REPAIR=" + _objMaint.MAINTENANCE_BEAMAXEL_REPAIR
                                   + ",@MAINTENANCE_STEARING_OIL_FILTER=" + _objMaint.MAINTENANCE_STEARING_OIL_FILTER
                                   + ",@MAINTENANCE_BATTERY=" + _objMaint.MAINTENANCE_BATTERY
                                   ))

                        status = true;
                    else
                        status = false;
                }
                if (_objMaint.FORM_TYPE == "MAINTENANCERENEWAL")
                {
                    if (ExecuteNonQuery("EXEC USP_SMVTS_MAINTENANCE_FLEET @FORM_TYPE='MAINTENANCERENEWAL',@OPERATION = 'UPDATE',@MAINTENANCE_ID=" + _objMaint.MAINTENANCE_ID
                                  + ",@MAINTENANCE_VEHREGNUMBER = '" + Convert.ToString(_objMaint.MAINTENANCE_VEHREGNUMBER)
                                  + "',@MAINTENANCE_ENGINENO='" + Convert.ToString(_objMaint.MAINTENANCE_ENGINE_NO)
                                  + "',@MAINTENANCE_CHASSIS_NO='" + Convert.ToString(_objMaint.MAINTENANCE_CHASSIS_NO)
                                  + "',@MAINTENANCE_ENGINE_OIL=" + _objMaint.MAINTENANCE_ENGINE_OIL
                                  + ",@MAINTENANCE_GEARBOXOIL=" + _objMaint.MAINTENANCE_GEARBOXOIL
                                  + ",@MAINTENANCE_WHEELBALANCING=" + _objMaint.MAINTENANCE_WHEELBALANCING
                                  + ",@MAINTENANCE_GENERALSERVICING='" + _objMaint.MAINTENANCE_GENERALSERVICING
                                  + "',@MAINTENANCE_TYREREPLACEMENT=" + _objMaint.MAINTENANCE_TYREREPLACEMENT
                                  + ",@MAINTENANCE_POWERSTEERINGOIL=" + _objMaint.MAINTENANCE_POWERSTEERINGOIL
                                  + ",@MAINTENANCE_COOLANT=" + _objMaint.MAINTENANCE_COOLANT
                                  + ",@MAINTENANCE_CATEGORY_ID=" + _objMaint.MAINTENANCE_CATEGORY_ID
                                  + ",@MAINTENANCE_BREAK_FLUID='" + Convert.ToString(_objMaint.MAINTENANCE_BREAK_FLUID)
                                  + "',@MAINTENANCE_BREAK_LINERS='" + Convert.ToString(_objMaint.MAINTENANCE_BREAK_LINERS)
                                  + "',@MAINTENANCE_AIR_FILTER_INNER=" + _objMaint.MAINTENANCE_AIR_FILTER_INNER
                                  + ",@MAINTENANCE_AIR_FILTER_OUTER=" + _objMaint.MAINTENANCE_AIR_FILTER_OUTER
                                  + ",@MAINTENANCE_ALTINATOR_OVERHAULING=" + _objMaint.MAINTENANCE_ALTINATOR_OVERHAULING
                                  + ",@MAINTENANCE_BELL_CRANK_BUSHING=" + _objMaint.MAINTENANCE_BELL_CRANK_BUSHING
                                  + ",@MAINTENANCE_CLUTCH_KIT_CHANG=" + _objMaint.MAINTENANCE_CLUTCH_KIT_CHANG
                                  + ",@MAINTENANCE_DIESEL_TANK_SERVICING=" + _objMaint.MAINTENANCE_DIESEL_TANK_SERVICING
                                  + ",@MAINTENANCE_CROWAN_OIL_CHANGE=" + _objMaint.MAINTENANCE_CROWAN_OIL_CHANGE
                                  + ",@MAINTENANCE_ENGINE_MOUNTING_CHECK=" + _objMaint.MAINTENANCE_ENGINE_MOUNTING_CHECK
                                  + ",@MAINTENANCE_FANBELT_TENTION_CHECK=" + _objMaint.MAINTENANCE_FANBELT_TENTION_CHECK
                                  + ",@MAINTENANCE_FRONT_GREASING=" + _objMaint.MAINTENANCE_FRONT_GREASING
                                  + ",@MAINTENANCE_REAR_GREASING=" + _objMaint.MAINTENANCE_REAR_GREASING
                                  + ",@MAINTENANCE_FUELPUMP_SERVICING=" + _objMaint.MAINTENANCE_FUELPUMP_SERVICING
                                  + ",@MAINTENANCE_SHAFT_OVERHAULING=" + _objMaint.MAINTENANCE_SHAFT_OVERHAULING
                                  + ",@MAINTENANCE_RADIATOR_SERVICING=" + _objMaint.MAINTENANCE_RADIATOR_SERVICING
                                  + ",@MAINTENANCE_SELF_OVERHAULING=" + _objMaint.MAINTENANCE_SELF_OVERHAULING
                                  + ",@MAINTENANCE_BEAMAXEL_REPAIR=" + _objMaint.MAINTENANCE_BEAMAXEL_REPAIR
                                  + ",@MAINTENANCE_STEARING_OIL_FILTER=" + _objMaint.MAINTENANCE_STEARING_OIL_FILTER
                                  + ",@MAINTENANCE_BATTERY=" + _objMaint.MAINTENANCE_BATTERY
                                  + ",@MAINTENANCERENEWAL_ENGINE_OIL_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_ENGINE_OIL_PREVDONE
                                  + "',@MAINTENANCERENEWAL_GERABOXOIL_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_GEARBOXOIL_PREVDONE
                                  + "',@MAINTENANCERENEWAL_WHEELBALANCING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_WHEELBALANCING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_TYREREPLACEMENT_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_TYREREPLACEMENT_PREVDONE
                                  + "',@MAINTENANCERENEWAL_POWERSTEERINGOIL_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_POWERSTEERINGOIL_PREVDONE
                                  + "',@MAINTENANCERENEWAL_COOLANT_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_COOLANT_PREVDONE
                                  + "',@MAINTENANCERENEWAL_AIR_FILTER_INNER_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_AIR_FILTER_INNER_PREVDONE
                                  + "',@MAINTENANCERENEWAL_AIR_FILTER_OUTER_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_AIR_FILTER_OUTER_PREVDONE
                                  + "',@MAINTENANCERENEWAL_ALTINATOR_OVERHAULING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_ALTINATOR_OVERHAULING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_BELL_CRANK_BUSHING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_BELL_CRANK_BUSHING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_CLUTCH_KIT_CHANG_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_CLUTCH_KIT_CHANG_PREVDONE
                                  + "',@MAINTENANCERENEWAL_DIESEL_TANK_SERVICING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_DIESEL_TANK_SERVICING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_CROWAN_OIL_CHANGE_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_CROWAN_OIL_CHANGE_PREVDONE
                                  + "',@MAINTENANCERENEWAL_ENGINE_MOUNTING_CHECK_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_ENGINE_MOUNTING_CHECK_PREVDONE
                                  + "',@MAINTENANCERENEWAL_FANBELT_TENTION_CHECK_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_FANBELT_TENTION_CHECK_PREVDONE
                                  + "',@MAINTENANCERENEWAL_FRONT_GREASING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_FRONT_GREASING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_REAR_GREASING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_REAR_GREASING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_FUELPUMP_SERVICING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_FUELPUMP_SERVICING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_SHAFT_OVERHAULING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_SHAFT_OVERHAULING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_RADIATOR_SERVICING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_RADIATOR_SERVICING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_SELF_OVERHAULING_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_SELF_OVERHAULING_PREVDONE
                                  + "',@MAINTENANCERENEWAL_BEAMAXEL_REPAIR_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_BEAMAXEL_REPAIR_PREVDONE
                                  + "',@MAINTENANCERENEWAL_STEARING_OIL_FILTER_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_STEARING_OIL_FILTER_PREVDONE
                                  + "',@MAINTENANCERENEWAL_BATTERY_PREVDONE='" + _objMaint.MAINTENANCERENEWAL_BATTERY_PREVDONE
                                  + "'"))


                        status = true;
                    else
                        status = false;
                }
                break;


            default:
                break;
        }
        return status;
    }
    #endregion

    public static DataTable getVehiclemaster(SMVTS_VEHICLES _objVehicle)
    {
        DataTable dt = new DataTable();

        if (_objVehicle.OPERATION == operation.Select && Convert.ToInt32(_objVehicle.VEHICLES_ID) != 0)
            dt = ExecuteQuery("EXEC [USP_SMVTS_GETVEHICLEMASTER] @OPERATION='SELECT',@USERID = '" + _objVehicle.USERID + "',@VEHICLES_ID=" + _objVehicle.VEHICLES_ID);
        if (_objVehicle.OPERATION == operation.Select && Convert.ToInt32(_objVehicle.VEHICLES_ID) == 0)
            dt = ExecuteQuery("EXEC [USP_SMVTS_GETVEHICLEMASTER] @OPERATION='SELECT',@USERID = '" + _objVehicle.USERID + "'");
        if (_objVehicle.OPERATION == operation.Check)
            dt = ExecuteQuery("EXEC [USP_SMVTS_GETVEHICLEMASTER] @OPERATION='CHECK',@VEHICLES_RENUMBER='" + _objVehicle.VEHICLES_REGNUMBER + "'");
        return dt;
    }

    public static DataTable getAutoCompList(string prefixText)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select LANDMARKS_ADDRESS from SMVTS_LANDMARKS where LANDMARKS_ADDRESS  like '" + prefixText + "%'");
        return dt;
    }

    public static DataTable getVehicleDatabyRegnumber(SMVTS_VEHICLES _objVehicle)//USP_SMVTS_GETVEHICLESBYREGNUMBER
    {
        DataTable dt = ExecuteQuery("EXEC [USP_SMVTS_GETVEHICLESBYREGNUMBER] @USERID = '" + _objVehicle.USERID + "',@VEHICLES_RENUMBER='" + _objVehicle.VEHICLES_REGNUMBER + "'");
        return dt;
    }

    public static DataTable getVehMaintenanceData(SMVTS_VEHICLES _objVehicle)//USP_SMVTS_GETVEHICLESBYREGNUMBER
    {
        DataTable dt = ExecuteQuery("EXEC [USP_SMVTS_GETMAINTVEHICLEDATA] @USER_ID = " + _objVehicle.USERID);
        return dt;
    }

    public static bool setVehicleMaster(SMVTS_VEHICLES _objVehicle)
    {
        bool status = false;

        switch (_objVehicle.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES_FLEET @OPERATION = 'INSERT',@VEHICLES_REGNUMBER = '" + Convert.ToString(_objVehicle.VEHICLES_REGNUMBER)
                                  + "',@VEHICLES_ENGINENO='" + Convert.ToString(_objVehicle.VEHICLES_ENGINE_NUMBER)
                                  + "',@VEHICLES_CHASSIS_NO='" + Convert.ToString(_objVehicle.VEHICLES_CHASSIS_NO)
                                  + "',@VEHICLES_EC=" + Convert.ToString(_objVehicle.VEHICLES_EC)
                                  + ", @VEHICLES_AXLETYPE='" + Convert.ToString(_objVehicle.VEHICLES_AXLETYPE)
                                  + "',@VEHICLES_COLOR='" + Convert.ToString(_objVehicle.VEHICLES_COLOR)
                                  + "',@VEHICLES_VARIANT='" + Convert.ToString(_objVehicle.VEHICLES_VARIANT)
                                  + "',@VEHICLES_MANUFACTURER='" + Convert.ToString(_objVehicle.VEHICLES_MANUFACTURER)
                                  + "',@VEHICLES_YOM=" + Convert.ToString(_objVehicle.VEHICLES_YOM)
                                  + " ,@VEHICLES_EN='" + Convert.ToString(_objVehicle.VEHICLES_EN)
                                  + "',@VEHICLES_FUEL='" + Convert.ToString(_objVehicle.VEHICLES_FUEL)
                                  + "',@VEHICLES_SC=" + Convert.ToString(_objVehicle.VEHICLES_SC)
                                  + " ,@VEHICLES_INS='" + Convert.ToString(_objVehicle.VEHICLES_INS)
                                  + "',@VEHICLES_ISP='" + Convert.ToString(_objVehicle.VEHICLES_ISP)
                                  + "',@VEHICLES_ISP_DT='" + Convert.ToString(_objVehicle.VEHICLES_ISP_DT)
                                  + "',@VEHICLES_NP='" + Convert.ToString(_objVehicle.VEHICLES_NP)
                                  + "',@VEHICLES_NP_DT='" + Convert.ToString(_objVehicle.VEHICLES_NP_DT)
                                  + "',@VEHICLES_PC='" + Convert.ToString(_objVehicle.VEHICLES_PC)
                                  + "',@VEHICLES_FC_DT='" + Convert.ToString(_objVehicle.VEHICLES_FC_DT)
                                  + "',@VEHICLES_HT_DT='" + Convert.ToString(_objVehicle.VEHICLES_HT_DT)
                                  + "',@VEHICLES_CATEGORY_ID=" + _objVehicle.VEHICLES_CATEGORY_ID
                                  ))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (_objVehicle.VEHICLES_FORMTYPE == "VEHICLEMASTER")
                {
                    if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES_FLEET @FORMTYPE='VEHICLEMASTER',@OPERATION = 'UPDATE',@VEHICLES_ID = " + Convert.ToInt32(_objVehicle.VEHICLES_ID)
                                      + ",@VEHICLES_REGNUMBER='" + Convert.ToString(_objVehicle.VEHICLES_REGNUMBER)
                                      + "',@VEHICLES_ENGINENO='" + Convert.ToString(_objVehicle.VEHICLES_ENGINE_NUMBER)
                                      + "',@VEHICLES_CHASSIS_NO='" + Convert.ToString(_objVehicle.VEHICLES_CHASSIS_NO)
                                      + "',@VEHICLES_EC=" + Convert.ToString(_objVehicle.VEHICLES_EC)
                                      + ",@VEHICLES_AXLETYPE='" + Convert.ToString(_objVehicle.VEHICLES_AXLETYPE)
                                      + "',@VEHICLES_COLOR='" + Convert.ToString(_objVehicle.VEHICLES_COLOR)
                                      + "',@VEHICLES_VARIANT='" + Convert.ToString(_objVehicle.VEHICLES_VARIANT)
                                      + "',@VEHICLES_MANUFACTURER='" + Convert.ToString(_objVehicle.VEHICLES_MANUFACTURER)
                                      + "',@VEHICLES_YOM=" + Convert.ToString(_objVehicle.VEHICLES_YOM)
                                      + " ,@VEHICLES_EN='" + Convert.ToString(_objVehicle.VEHICLES_EN)
                                      + "',@VEHICLES_FUEL='" + Convert.ToString(_objVehicle.VEHICLES_FUEL)
                                      + "',@VEHICLES_SC=" + Convert.ToString(_objVehicle.VEHICLES_SC)
                                      + " ,@VEHICLES_INS='" + Convert.ToString(_objVehicle.VEHICLES_INS)
                                      + "',@VEHICLES_ISP='" + Convert.ToString(_objVehicle.VEHICLES_ISP)
                                      + "',@VEHICLES_ISP_DT='" + Convert.ToString(_objVehicle.VEHICLES_ISP_DT)
                                      + "',@VEHICLES_NP='" + Convert.ToString(_objVehicle.VEHICLES_NP)
                                      + "',@VEHICLES_NP_DT='" + Convert.ToString(_objVehicle.VEHICLES_NP_DT)
                                      + "',@VEHICLES_PC='" + Convert.ToString(_objVehicle.VEHICLES_PC)
                                      + "',@VEHICLES_FC_DT='" + Convert.ToString(_objVehicle.VEHICLES_FC_DT)
                                      + "',@VEHICLES_HT_DT='" + Convert.ToString(_objVehicle.VEHICLES_HT_DT)
                                      + "',@VEHICLES_CATEGORY_ID=" + _objVehicle.VEHICLES_CATEGORY_ID
                                      ))

                        status = true;
                    else
                        status = false;
                }
                if (_objVehicle.VEHICLES_FORMTYPE == "VEHICLERENEW")
                {
                    if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES_FLEET @FORMTYPE='VEHICLERENEW',@OPERATION = 'UPDATE',@VEHICLES_ID = " + Convert.ToInt32(_objVehicle.VEHICLES_ID)
                                      + ",@VEHICLES_REGNUMBER='" + Convert.ToString(_objVehicle.VEHICLES_REGNUMBER)
                                      + "',@VEHICLES_ENGINENO='" + Convert.ToString(_objVehicle.VEHICLES_ENGINE_NUMBER)
                                      + "',@VEHICLES_CHASSIS_NO='" + Convert.ToString(_objVehicle.VEHICLES_CHASSIS_NO)
                                      + "',@VEHICLES_EC=" + Convert.ToString(_objVehicle.VEHICLES_EC)
                                      + ",@VEHICLES_AXLETYPE='" + Convert.ToString(_objVehicle.VEHICLES_AXLETYPE)
                                      + "',@VEHICLES_COLOR='" + Convert.ToString(_objVehicle.VEHICLES_COLOR)
                                      + "',@VEHICLES_VARIANT='" + Convert.ToString(_objVehicle.VEHICLES_VARIANT)
                                      + "',@VEHICLES_MANUFACTURER='" + Convert.ToString(_objVehicle.VEHICLES_MANUFACTURER)
                                      + "',@VEHICLES_YOM=" + Convert.ToString(_objVehicle.VEHICLES_YOM)
                                      + " ,@VEHICLES_EN='" + Convert.ToString(_objVehicle.VEHICLES_EN)
                                      + "',@VEHICLES_FUEL='" + Convert.ToString(_objVehicle.VEHICLES_FUEL)
                                      + "',@VEHICLES_SC=" + Convert.ToString(_objVehicle.VEHICLES_SC)
                                      + " ,@VEHICLES_INS='" + Convert.ToString(_objVehicle.VEHICLES_INS)
                                      + "',@VEHICLES_ISP_DT='" + Convert.ToString(_objVehicle.VEHICLES_ISP_DT)
                                      + "',@VEHICLES_NP_DT='" + Convert.ToString(_objVehicle.VEHICLES_NP_DT)
                                      + "',@VEHICLES_PC='" + Convert.ToString(_objVehicle.VEHICLES_PC)
                                      + "',@VEHICLES_FC_DT='" + Convert.ToString(_objVehicle.VEHICLES_FC_DT)
                                      + "',@VEHICLES_HT_DT='" + Convert.ToString(_objVehicle.VEHICLES_HT_DT)
                                      + "',@VEHICLES_CATEGORY_ID=" + _objVehicle.VEHICLES_CATEGORY_ID
                                      ))

                        status = true;
                    else
                        status = false;
                }
                break;

            default:
                break;
        }
        return status;
    }

    public static bool setAlert(SMVTS_FLEET_ALERT _objAlert)
    {
        bool status = false;

        switch (_objAlert.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FLEETALERT @OPERATION = 'INSERT',@ALERT_VEHREGNUMBER = '" + Convert.ToString(_objAlert.ALERT_VEHREGNUMBER)
                                  + "',@ALERT_ENGINENO='" + Convert.ToString(_objAlert.ALERT_ENGINENO)
                                  + "',@ALERT_CHASSISNO='" + Convert.ToString(_objAlert.ALERT_CHASSISNO)
                                  + "',@ALERT_INS_DT='" + Convert.ToString(_objAlert.ALERT_INS_DT)
                                  + "',@ALERT_ISP_DT='" + Convert.ToString(_objAlert.ALERT_ISP_DT)
                                  + "',@ALERT_NP_DT='" + Convert.ToString(_objAlert.ALERT_NP_DT)
                                  + "',@ALERT_PC_DT='" + Convert.ToString(_objAlert.ALERT_PC_DT)
                                  + "',@ALERT_EOIL=" + _objAlert.ALERT_EOIL
                                  + ", @ALERT_GOIL=" + _objAlert.ALERT_GOIL
                                  + " ,@ALERT_WBL=" + _objAlert.ALERT_WBL
                                  + ", @ALERT_GS='" + Convert.ToString(_objAlert.ALERT_GS)
                                  + "',@ALERT_TR=" + _objAlert.ALERT_TR
                                  + " ,@ALERT_PSO=" + _objAlert.ALERT_PSO
                                  + ", @ALERT_COOLANT=" + _objAlert.ALERT_COOLANT
                                  + ", @ALERT_BF='" + Convert.ToString(_objAlert.ALERT_BF)
                                  + "',@ALERT_BL='" + Convert.ToString(_objAlert.ALERT_BL)
                                  + "',@ALERT_CATEGORY_ID=" + _objAlert.ALERT_CATEGORY_ID
                                  ))
                    status = true;
                else
                    status = false;
                break;
        }

        return status;
    }

    #region Tyre
    public static bool setTyre(SMVTS_TYRE _objTyre)
    {
        bool status = false;

        switch (_objTyre.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_TYRE @OPERATION = 'INSERT',@TYRE_VEHREGNUMBER = '" + Convert.ToString(_objTyre.TYRE_VEHREGNUMBER)
                                  + "',@TYRE_NUMBER='" + _objTyre.TYRE_NUMBER
                                  + "',@TYRE_MAKE='" + Convert.ToString(_objTyre.TYRE_MAKE)
                                  + "',@TYRE_GRADE='" + Convert.ToString(_objTyre.TYRE_GRADE)
                                  + "',@TYRE_PLACEID='" + Convert.ToString(_objTyre.TYRE_PACEID)
                                  + "',@TYRE_ISSUEDATE='" + Convert.ToString(_objTyre.TYRE_ISSUEDATE)
                                  + "',@TYRE_ONKM=" + _objTyre.TYRE_ONKM
                                  + ", @TYRE_RUNKM=" + _objTyre.TYRE_RUNKM
                                  + ", @CAT_ID=" + _objTyre.TYRE_CATEGORY_ID
                                ))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_TYRE @OPERATION = 'UPDATE',@TYRE_VEHREGNUMBER = '" + Convert.ToString(_objTyre.TYRE_VEHREGNUMBER)
                                  + "',@TYRE_ID=" + _objTyre.TYRE_ID
                                  + ",@TYRE_NUMBER='" + _objTyre.TYRE_NUMBER
                                  + "',@TYRE_MAKE='" + Convert.ToString(_objTyre.TYRE_MAKE)
                                  + "',@TYRE_GRADE='" + Convert.ToString(_objTyre.TYRE_GRADE)
                                  + "',@TYRE_PLACEID='" + Convert.ToString(_objTyre.TYRE_PACEID)
                                  + "',@TYRE_ISSUEDATE='" + Convert.ToString(_objTyre.TYRE_ISSUEDATE)
                                  + "',@TYRE_ONKM=" + _objTyre.TYRE_ONKM
                                  + ", @TYRE_RUNKM=" + _objTyre.TYRE_RUNKM

                                ))
                    status = true;
                else
                    status = false;
                break;
        }

        return status;
    }
    public static DataTable getTyre(SMVTS_TYRE _objTyre)
    {
        DataTable dt = new DataTable();
        if (_objTyre.OPERATION == operation.Select && Convert.ToInt32(_objTyre.TYRE_ID) == 0)
            dt = ExecuteQuery("EXEC [USP_SMVTS_TYRE] @CAT_ID=" + _objTyre.TYRE_CATEGORY_ID + ",@OPERATION='SELECT'");
        if (_objTyre.OPERATION == operation.Select && Convert.ToInt32(_objTyre.TYRE_ID) != 0)
            dt = ExecuteQuery("EXEC [USP_SMVTS_TYRE] @CAT_ID=" + _objTyre.TYRE_CATEGORY_ID + ",@OPERATION='SELECT',@TYRE_ID=" + _objTyre.TYRE_ID);

        return dt;
    }
    #endregion

    public static bool set_Immobilizer(SMVTS_IMMOBILIZER _objImmob)
    {
        bool status = false;

        switch (_objImmob.TYPE)
        {
            case "I":
                if (ExecuteNonQuery("EXEC USP_SMVTS_IMMOBILIZER @TYPE='I',@VENDORID=" + _objImmob.VENDORID
                                          + ",@DEVICEID = '" + _objImmob.DEVICEID
                                          + "',@CATEID=" + _objImmob.CATEID
                                    ))
                    status = true;
                else
                    status = false;
                break;

            case "M":
                if (ExecuteNonQuery("EXEC USP_SMVTS_IMMOBILIZER @TYPE='M',@VENDORID=" + _objImmob.VENDORID
                                  + ",@DEVICEID = '" + _objImmob.DEVICEID
                                  + "',@CATEID=" + _objImmob.CATEID
                            ))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    public static DataTable getImbStatus(SMVTS_IMMOBILIZER _objImmb)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_VEHICLE_MBIMB WHERE MBIMB_CATEID=" + _objImmb.CATEID + " and MBIMB_VENDORID=" + _objImmb.VENDORID + " and TYPE='I'");

        return dt;
    }

    public static DataTable getMbStatus(SMVTS_IMMOBILIZER _objImmb)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_VEHICLE_MBIMB WHERE MBIMB_CATEID=" + _objImmb.CATEID + " and MBIMB_VENDORID=" + _objImmb.VENDORID + " and TYPE='M'");

        return dt;
    }

    public static DataTable getRecCount(SMVTS_IMMOBILIZER _objImmb)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_VEHICLE_MBIMB WHERE MBIMB_CATEID=" + _objImmb.CATEID + " and MBIMB_VENDORID=" + _objImmb.VENDORID);

        return dt;
    }

    public static DataTable getVehiclesInside(SMVTS_LANDMARKS_OMKAR _objlandmark, string strStartDate, string strEndDate)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [RPT_USP_GEOFENCE_GRID] @USER_ID=" + _objlandmark.LANDMARKS_CATEGORY_ID + ",@LANDMARK_ID=" + _objlandmark.LANDMARKS_ID
                     + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'")
                     + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");

        return dt;
    }

    #region ".......Settings........"
    public static DataTable getSettings(SMVTS_SETTINGS _obj_Smvts_Settings)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [USP_SMVTS_SETTINGS] @SETTINGS_CATEGORY_ID='" + _obj_Smvts_Settings.SETTINGS_CATEGORY_ID + "'");
        return dt;
    }

    public static bool set_Settings(SMVTS_SETTINGS _obj_Smvts_Settings)
    {
        bool status = false;

        switch (_obj_Smvts_Settings.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SETTINGS @Operation = 'INSERT',@SETTINGS_CATEGORY_ID = " + _obj_Smvts_Settings.SETTINGS_CATEGORY_ID
                                  + ", @SETTINGS_CLIENTLOGO=" + _obj_Smvts_Settings.SETTINGS_CLIENTLOGO
                                  + ", @SETTINGS_CREATEDBY=" + Convert.ToString(_obj_Smvts_Settings.CREATEDBY)
                                  + ", @SETTINGS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Settings.CREATEDDATE)
                                  + ", @SETTINGS_MODIFIEDBY='" + Convert.ToString(_obj_Smvts_Settings.LASTMDFBY)
                                  + "',@SETTINGS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Settings.LASTMDFDATE) + "'"
                                  ))
                    status = true;
                else
                    status = false;
                break;
            case operation.Delete:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SETTINGS @Operation = 'UPDATE',@SETTINGS_CATEGORY_ID = " + _obj_Smvts_Settings.SETTINGS_CATEGORY_ID
                                  + ", @SETTINGS_CLIENTLOGO=" + _obj_Smvts_Settings.SETTINGS_CLIENTLOGO
                                  + ", @SETTINGS_CREATEDBY=" + Convert.ToString(_obj_Smvts_Settings.CREATEDBY)
                                  + ", @SETTINGS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Settings.CREATEDDATE)
                                  + ", @SETTINGS_MODIFIEDBY='" + Convert.ToString(_obj_Smvts_Settings.LASTMDFBY)
                                  + "',@SETTINGS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Settings.LASTMDFDATE) + "'"
                                 ))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    #endregion

    internal static DataTable get_ReportsData(string VehicleNo, int landmarkID)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [RPT_USP_GEOFENCEALERT_OMKAR] @VEHICLENO='" + VehicleNo + "',@LANDMARKID=" + landmarkID);
        return dt;
    }

    #region "....Logos...."

    internal static DataTable get_Logos(SMVTS_LOGOS _obj_SMVTS_LOGOS)
    {
        DataTable dt = new DataTable();
        string strQry;
        switch (_obj_SMVTS_LOGOS.OPERATION)
        {
            case operation.Select:

                strQry = "EXEC USP_SMVTS_LOGOS @OPERATION = 'SELECT', @LOGOS_CATEG_ID= '" + Convert.ToString(_obj_SMVTS_LOGOS.LOGOS_CATEGORY_ID) + "'";
                dt = Dal.ExecuteQuery(strQry);
                break;

            case operation.Empty:

                strQry = "EXEC USP_SMVTS_LOGOS @OPERATION = 'SELECT_HEADER', @LOGOS_CATEG_ID= '" + Convert.ToString(_obj_SMVTS_LOGOS.LOGOS_CATEGORY_ID) + "'";
                dt = Dal.ExecuteQuery(strQry);
                break;
        }

        return dt;
    }

    public static bool set_Logos(SMVTS_LOGOS _obj_SMVTS_LOGOS)
    {
        bool status = false;

        switch (_obj_SMVTS_LOGOS.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_LOGOS @Operation = 'INSERT', @LOGOS_CATEG_ID =" + _obj_SMVTS_LOGOS.LOGOS_CATEGORY_ID
                                  + ", @LOGOS_NAME =" + Convert.ToString(_obj_SMVTS_LOGOS.LOGOS_NAME)
                                  + ", @@LOGOS_URL='" + Convert.ToString(_obj_SMVTS_LOGOS.LOGOS_URL) + "'"
                                  ))
                    status = true;
                else
                    status = false;
                break;
            case operation.Delete:
                if (ExecuteNonQuery("EXEC USP_SMVTS_LOGOS @Operation = 'UPDATE',@LOGOS_ID = " + _obj_SMVTS_LOGOS.LOGOS_ID
                                 + ", @LOGOS_CATEG_ID =" + _obj_SMVTS_LOGOS.LOGOS_CATEGORY_ID
                                 + ", @LOGOS_NAME =" + Convert.ToString(_obj_SMVTS_LOGOS.LOGOS_NAME)
                                 + ", @@LOGOS_URL='" + Convert.ToString(_obj_SMVTS_LOGOS.LOGOS_URL) + "'"
                                 ))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }

    #endregion

    #region "....Zones...."


    public static DataTable get_Zones(SMVTS_ZONES _obj_Smvts_Zones)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Zones.OPERATION)
        {
            case operation.Select:
                if (_obj_Smvts_Zones.ZONE_ID == 0)
                    dt = ExecuteQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Select'  ");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Select', @ZONE_ID ='" + Convert.ToString(_obj_Smvts_Zones.ZONE_ID) + "'");

                break;
            case operation.Empty:
                if (_obj_Smvts_Zones.ZONE_CATEG_ID != 0)
                    dt = ExecuteQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Select', @ZONE_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Zones.ZONE_CATEG_ID) + "'");

                break;

            case operation.Insert:

                dt = ExecuteQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Select' ");
                break;

            //case operation.Check:
            //    if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_NUMBER != "0"))
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_NUMBER ='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER) + "' ,@SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
            //    else
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_NUMBER ='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER) + "', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
            //    break;

            //case operation.Delete:
            //    if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_SERIALNO != "0"))
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
            //    else
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");

            //    break;

            //case operation.Empty:
            //    if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
            //        //client add
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");

            //    else if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) == "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
            //        //dhnaush add
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'");

            //    break;

            case operation.Update:
                if ((Convert.ToString(_obj_Smvts_Zones.ZONE_CODE).Trim() != "") && (Convert.ToString(_obj_Smvts_Zones.ZONE_STATUS) != "0"))
                    //Find out Current Sim and Free sim for Client  (edit)
                    dt = ExecuteQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Update', @ZONE_CODE ='" + Convert.ToString(_obj_Smvts_Zones.ZONE_CODE) + "', @ZONE_STATUS ='" + Convert.ToString(_obj_Smvts_Zones.ZONE_STATUS) + "'");

                else
                    //Find out Current Sim and Free sim for Org (edit)
                    dt = ExecuteQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Update', @ZONE_CODE ='" + Convert.ToString(_obj_Smvts_Zones.ZONE_CODE) + "', @ZONE_STATUS ='" + Convert.ToString(_obj_Smvts_Zones.ZONE_STATUS) + "'");

                break;
            default:
                break;
        }
        return dt;
    }

    public static bool set_Zones(SMVTS_ZONES _obj_Smvts_Zones)
    {
        bool status = false;
        switch (_obj_Smvts_Zones.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Insert', @ZONE_CODE='" + Convert.ToString(_obj_Smvts_Zones.ZONE_CODE)
                                  + "', @ZONE_NAME='" + _obj_Smvts_Zones.ZONE_NAME
                                  + "', @ZONE_STATUS='" + Convert.ToString(_obj_Smvts_Zones.ZONE_STATUS) + "', @ZONE_CATEG_ID = '" + Convert.ToInt32(_obj_Smvts_Zones.ZONE_CATEG_ID) + "'"))

                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ZONE_MASTER @Operation = 'Update',@ZONE_CODE='" + Convert.ToString(_obj_Smvts_Zones.ZONE_CODE)
                                  + "', @ZONE_NAME='" + _obj_Smvts_Zones.ZONE_NAME
                                  + "', @ZONE_ID='" + _obj_Smvts_Zones.ZONE_ID
                                  + "', @ZONE_STATUS='" + Convert.ToString(_obj_Smvts_Zones.ZONE_STATUS) + "', @ZONE_CATEG_ID = '" + Convert.ToInt32(_obj_Smvts_Zones.ZONE_CATEG_ID) + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    #endregion

    #region "....Controlling Branch..."

    public static DataTable get_CONTROLLING_BRANCH(SMVTS_CONTROLLING_BRANCH _obj_Smvts_CntrBranch)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_CntrBranch.OPERATION)
        {
            case operation.Select:
                if (_obj_Smvts_CntrBranch.BRANCH_ID != null)
                    //dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Select', @BRANCH_ID ='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID) + "', @CATEG_ID='" + Convert.ToString(_obj_Smvts_CntrBranch.CATEG_ID) + "'");
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Select', @BRANCH_ID ='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID) + "'");
                else if (_obj_Smvts_CntrBranch.ZONECODE != null)
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Select',@CATEG_ID='" + Convert.ToString(_obj_Smvts_CntrBranch.CATEG_ID) + "',@ZONECODE='" + Convert.ToString(_obj_Smvts_CntrBranch.ZONECODE) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'SELECTWITHJOINS',@CATEG_ID='" + Convert.ToString(_obj_Smvts_CntrBranch.CATEG_ID) + "'");
                break;
            case operation.Insert:
                dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Insert'");
                break;

            case operation.Check:
                if (Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Check', @BRANCH_NAME ='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_NAME) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Check', @BRANCH_NAME ='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_NAME) + "',@BRANCH_ID='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID) + "'");
                break;
            //case operation.Delete:

            //    if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_SERIALNO != "0"))
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");
            //    else
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");

            //    break;

            //case operation.Empty:
            //    if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
            //        //client add
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'");


            //    else if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) == "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
            //        //dhnaush add
            //        dt = ExecuteQuery("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'");

            //    break;

            case operation.Update:
                if ((Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID).Trim() != "") && (Convert.ToString(_obj_Smvts_CntrBranch.STATUS) != "0"))
                    //Find out Current Sim and Free sim for Client  (edit)
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Update', @BRANCH_ID ='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID) + "'");

                break;
            default:
                break;
        }
        return dt;
    }
    public static bool set_CONTROLLING_BRANCH(SMVTS_CONTROLLING_BRANCH _obj_Smvts_CntrBranch)
    {
        bool status = false;
        switch (_obj_Smvts_CntrBranch.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Insert', @BRANCH_ID='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID)
                                  + "', @BRANCH_NAME='" + _obj_Smvts_CntrBranch.BRANCH_NAME
                                  + "', @LOCATION_NAME='" + _obj_Smvts_CntrBranch.LOCATION_NAME
                                  + "', @ABBREVIATION='" + _obj_Smvts_CntrBranch.ABBREVIATION
                                  + "', @ADDRESS_BUILDING='" + _obj_Smvts_CntrBranch.ADDRESS_BUILDING
                                  + "', @ADDRESS_AREA='" + _obj_Smvts_CntrBranch.ADDRESS_AREA
                                  + "', @ADDRESS_STREET='" + _obj_Smvts_CntrBranch.ADDRESS_STREET
                                  + "', @ADDRESS_MILESTONE='" + _obj_Smvts_CntrBranch.ADDRESS_MILESTONE
                                  + "', @ADDRESS_STATE='" + _obj_Smvts_CntrBranch.ADDRESS_STATE
                                  + "', @ADDRESS_CITY='" + _obj_Smvts_CntrBranch.ADDRESS_CITY
                                  + "', @ADDRESS_PHONE1='" + _obj_Smvts_CntrBranch.ADDRESS_PHONE1
                                  + "', @ADDRESS_PHONE2='" + _obj_Smvts_CntrBranch.ADDRESS_PHONE2
                                  + "', @ADDRESS_FAX='" + _obj_Smvts_CntrBranch.ADDRESS_FAX
                                  + "', @CONTACT_PERSON1='" + _obj_Smvts_CntrBranch.CONTACT_PERSON1
                                  + "', @CONTACT_MOBILE1='" + _obj_Smvts_CntrBranch.CONTACT_MOBILE1
                                  + "', @CONTACT_EMAIL1='" + _obj_Smvts_CntrBranch.CONTACT_EMAIL1
                                  + "', @CONTACT_PERSON2='" + _obj_Smvts_CntrBranch.CONTACT_PERSON2
                                  + "', @CONTACT_MOBILE2='" + _obj_Smvts_CntrBranch.CONTACT_MOBILE2
                                  + "', @CONTACT_EMAIL2='" + _obj_Smvts_CntrBranch.CONTACT_EMAIL2
                                  + "', @CONTACT_PAN='" + _obj_Smvts_CntrBranch.CONTACT_PAN
                                  + "', @CONTACT_WEBSITE='" + _obj_Smvts_CntrBranch.CONTACT_WEBSITE
                                  + "', @CONTACT_PINCODE='" + _obj_Smvts_CntrBranch.CONTACT_PINCODE
                                  + "', @PRINTING_ADDRESS='" + _obj_Smvts_CntrBranch.PRINTING_ADDRESS
                                  + "', @ZONECODE='" + _obj_Smvts_CntrBranch.ZONECODE
                                  + "', @CATEG_ID='" + _obj_Smvts_CntrBranch.CATEG_ID
                                  + "', @CNTRBRANCH_ADDRESS_COUNTRY='" + _obj_Smvts_CntrBranch.CNTRBRANCH_ADDRESS_COUNTRY
                                  + "', @STATUS='" + _obj_Smvts_CntrBranch.STATUS + "'"))


                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'Update', @BRANCH_ID='" + Convert.ToString(_obj_Smvts_CntrBranch.BRANCH_ID)
                                  + "', @BRANCH_NAME='" + _obj_Smvts_CntrBranch.BRANCH_NAME
                                  + "', @LOCATION_NAME='" + _obj_Smvts_CntrBranch.LOCATION_NAME
                                  + "', @ABBREVIATION='" + _obj_Smvts_CntrBranch.ABBREVIATION
                                  + "', @ADDRESS_BUILDING='" + _obj_Smvts_CntrBranch.ADDRESS_BUILDING
                                  + "', @ADDRESS_AREA='" + _obj_Smvts_CntrBranch.ADDRESS_AREA
                                  + "', @ADDRESS_STREET='" + _obj_Smvts_CntrBranch.ADDRESS_STREET
                                  + "', @ADDRESS_MILESTONE='" + _obj_Smvts_CntrBranch.ADDRESS_MILESTONE
                                  + "', @ADDRESS_STATE='" + _obj_Smvts_CntrBranch.ADDRESS_STATE
                                  + "', @ADDRESS_CITY='" + _obj_Smvts_CntrBranch.ADDRESS_CITY
                                  + "', @ADDRESS_PHONE1='" + _obj_Smvts_CntrBranch.ADDRESS_PHONE1
                                  + "', @ADDRESS_PHONE2='" + _obj_Smvts_CntrBranch.ADDRESS_PHONE2
                                  + "', @ADDRESS_FAX='" + _obj_Smvts_CntrBranch.ADDRESS_FAX
                                  + "', @CONTACT_PERSON1='" + _obj_Smvts_CntrBranch.CONTACT_PERSON1
                                  + "', @CONTACT_MOBILE1='" + _obj_Smvts_CntrBranch.CONTACT_MOBILE1
                                  + "', @CONTACT_EMAIL1='" + _obj_Smvts_CntrBranch.CONTACT_EMAIL1
                                  + "', @CONTACT_PERSON2='" + _obj_Smvts_CntrBranch.CONTACT_PERSON2
                                  + "', @CONTACT_MOBILE2='" + _obj_Smvts_CntrBranch.CONTACT_MOBILE2
                                  + "', @CONTACT_EMAIL2='" + _obj_Smvts_CntrBranch.CONTACT_EMAIL2
                                  + "', @CONTACT_PAN='" + _obj_Smvts_CntrBranch.CONTACT_PAN
                                  + "', @CONTACT_WEBSITE='" + _obj_Smvts_CntrBranch.CONTACT_WEBSITE
                                  + "', @CONTACT_PINCODE='" + _obj_Smvts_CntrBranch.CONTACT_PINCODE
                                  + "', @PRINTING_ADDRESS='" + _obj_Smvts_CntrBranch.PRINTING_ADDRESS
                                  + "', @ZONECODE='" + _obj_Smvts_CntrBranch.ZONECODE
                                  + "', @CATEG_ID='" + _obj_Smvts_CntrBranch.CATEG_ID
                                  + "', @CNTRBRANCH_ADDRESS_COUNTRY='" + _obj_Smvts_CntrBranch.CNTRBRANCH_ADDRESS_COUNTRY
                                  + "', @STATUS='" + _obj_Smvts_CntrBranch.STATUS + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }

    #endregion

    internal static DataTable Check_Existence(SMVTS_FLEETCONFIG _objfleet)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [USP_SMVTS_CHECK_FLEET] @CATID=" + _objfleet.CATEGORYID + ",@REGNUMBER='" + _objfleet.REGNUMBER + "',@ALERTTYPE='" + _objfleet.ALERT_TYPE + "'");
        return dt;
    }

    public static bool set_FleetSmsconfig(SMVTS_FLEETCONFIG _obj_Smvts_fConfig)
    {
        bool status = false;
        switch (_obj_Smvts_fConfig.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FLEETSMSCONFIG @Operation = 'INSERT',@REGNUMBER='" + Convert.ToString(_obj_Smvts_fConfig.REGNUMBER)
                                 + "', @ALERT='" + _obj_Smvts_fConfig.ALERT_TYPE
                                 + "', @SIM='" + _obj_Smvts_fConfig.SIM
                                 + "', @SMS_CATEGORYID='" + _obj_Smvts_fConfig.CATEGORYID
                                 + "', @SMS_STATUS='" + _obj_Smvts_fConfig.SMS_STATUS + "'"
                     ))


                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FLEETSMSCONFIG @Operation = 'UPDATE',@SIM_ID=" + _obj_Smvts_fConfig.ID + ",@REGNUMBER='" + Convert.ToString(_obj_Smvts_fConfig.REGNUMBER)
                                 + "', @ALERT='" + _obj_Smvts_fConfig.ALERT_TYPE
                                 + "', @SIM='" + _obj_Smvts_fConfig.SIM
                                 + "', @SMS_STATUS='" + _obj_Smvts_fConfig.SMS_STATUS + "'"
                     ))



                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }

    internal static DataTable get_Forms(SMVTS_FORMS _obj_Smvts_Forms)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Forms.OPERATION)
        {
            case operation.Select: dt = ExecuteQuery("EXEC USP_SMVTS_ROLES @OPERATION='SELECT_ALLFORMS'");

                break;
        }
        return dt;

    }

    #region "...Fleet Config ..."

    public static bool set_FleetSmsconfig1(SMVTS_FLEETCONFIG1 _obj_Smvts_fConfig)
    {
        bool status = false;
        switch (_obj_Smvts_fConfig.OPERATION)
        {

            case operation.Insert:

                if (ExecuteNonQuery("EXEC USP_SMVTS_FLEETSMSCONFIG @Operation = 'INSERT' "
                + ", @FLEETCONFIG_CATEG_ID  = '" + _obj_Smvts_fConfig.FLEETCONFIG_CATEG_ID
                + "', @FLEETCONFIG_VEHICLENO  = '" + _obj_Smvts_fConfig.FLEETCONFIG_VEHICLENO
                + "', @FLEETCONFIG_SPEEDVIOLATION  = '" + _obj_Smvts_fConfig.FLEETCONFIG_SPEEDVIOLATION
                + "', @FLEETCONFIG_STOPPAGE  = '" + _obj_Smvts_fConfig.FLEETCONFIG_STOPPAGE
                + "', @FLEETCONFIG_ENGINEOIL  = '" + _obj_Smvts_fConfig.FLEETCONFIG_ENGINEOIL
                + "', @FLEETCONFIG_GEARBOXOIL  = '" + _obj_Smvts_fConfig.FLEETCONFIG_GEARBOXOIL
                + "', @FLEETCONFIG_INSURANCE  = '" + _obj_Smvts_fConfig.FLEETCONFIG_INSURANCE
                + "', @FLEETCONFIG_INTERSTATEPERMIT  = '" + _obj_Smvts_fConfig.FLEETCONFIG_INTERSTATEPERMIT
                + "', @FLEETCONFIG_NATIONALPERMIT  = '" + _obj_Smvts_fConfig.FLEETCONFIG_NATIONALPERMIT
                + "', @FLEETCONFIG_POLLUTIONCONTROL  = '" + _obj_Smvts_fConfig.FLEETCONFIG_POLLUTIONCONTROL
                + "', @FLEETCONFIG_TYREREPLACEMENT  = '" + _obj_Smvts_fConfig.FLEETCONFIG_TYREREPLACEMENT
                + "', @FLEETCONFIG_WHEELBALANCING  = '" + _obj_Smvts_fConfig.FLEETCONFIG_WHEELBALANCING
                + "', @FLEETCONFIG_CREATEDBY  = '" + _obj_Smvts_fConfig.FLEETCONFIG_CREATEDBY
                + "', @FLEETCONFIG_CREATEDDATE  = '" + _obj_Smvts_fConfig.FLEETCONFIG_CREATEDDATE
                + "', @FLEETCONFIG_MODIFIEDBY  = '" + _obj_Smvts_fConfig.FLEETCONFIG_MODIFIEDBY
                + "', @FLEETCONFIG_MODIFIEDDATE  = '" + _obj_Smvts_fConfig.FLEETCONFIG_MODIFIEDDATE + "'"))
                    status = true;
                else
                    status = false;
                break;

            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FLEETSMSCONFIG @Operation = 'UPDATE' ,@FLEETCONFIG_ID = '" + _obj_Smvts_fConfig.FLEETCONFIG_ID
                + "', @FLEETCONFIG_CATEG_ID  = '" + _obj_Smvts_fConfig.FLEETCONFIG_CATEG_ID
                + "', @FLEETCONFIG_VEHICLENO  = '" + _obj_Smvts_fConfig.FLEETCONFIG_VEHICLENO
                + "', @FLEETCONFIG_SPEEDVIOLATION  = '" + _obj_Smvts_fConfig.FLEETCONFIG_SPEEDVIOLATION
                + "', @FLEETCONFIG_STOPPAGE  = '" + _obj_Smvts_fConfig.FLEETCONFIG_STOPPAGE
                + "', @FLEETCONFIG_ENGINEOIL  = '" + _obj_Smvts_fConfig.FLEETCONFIG_ENGINEOIL
                + "', @FLEETCONFIG_GEARBOXOIL  = '" + _obj_Smvts_fConfig.FLEETCONFIG_GEARBOXOIL
                + "', @FLEETCONFIG_INSURANCE  = '" + _obj_Smvts_fConfig.FLEETCONFIG_INSURANCE
                + "', @FLEETCONFIG_INTERSTATEPERMIT  = '" + _obj_Smvts_fConfig.FLEETCONFIG_INTERSTATEPERMIT
                + "', @FLEETCONFIG_NATIONALPERMIT  = '" + _obj_Smvts_fConfig.FLEETCONFIG_NATIONALPERMIT
                + "', @FLEETCONFIG_POLLUTIONCONTROL  = '" + _obj_Smvts_fConfig.FLEETCONFIG_POLLUTIONCONTROL
                + "', @FLEETCONFIG_TYREREPLACEMENT  = '" + _obj_Smvts_fConfig.FLEETCONFIG_TYREREPLACEMENT
                + "', @FLEETCONFIG_WHEELBALANCING  = '" + _obj_Smvts_fConfig.FLEETCONFIG_WHEELBALANCING
                + "', @FLEETCONFIG_MODIFIEDBY  = '" + _obj_Smvts_fConfig.FLEETCONFIG_MODIFIEDBY
                + "', @FLEETCONFIG_MODIFIEDDATE  = '" + _obj_Smvts_fConfig.FLEETCONFIG_MODIFIEDDATE + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    public static DataTable get_FleetSmsconfig1(SMVTS_FLEETCONFIG1 _obj_Smvts_fConfig)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_fConfig.OPERATION)
        {
            case operation.Select:
                if (_obj_Smvts_fConfig.FLEETCONFIG_CATEG_ID != 0)
                    dt = ExecuteQuery("EXEC USP_SMVTS_FLEETSMSCONFIG @Operation = 'Select', @FLEETCONFIG_CATEG_ID ='" + Convert.ToString(_obj_Smvts_fConfig.FLEETCONFIG_CATEG_ID) + "'");
                break;

            case operation.Insert:
                if (_obj_Smvts_fConfig.FLEETCONFIG_ID != 0)
                    dt = ExecuteQuery("EXEC USP_SMVTS_FLEETSMSCONFIG @Operation = 'Select', @FLEETCONFIG_ID ='" + Convert.ToString(_obj_Smvts_fConfig.FLEETCONFIG_ID) + "'");
                break;

            case operation.Update:
                // for populating the vehicles drop down
                if ((Convert.ToString(_obj_Smvts_fConfig.FLEETCONFIG_CATEG_ID) != "0") && (Convert.ToString(_obj_Smvts_fConfig.@FLEETCONFIG_ID) != "0"))
                    //edit
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'POPULATEVEHICLE_EDIT', @FLEETCONFIG_CATEG_ID ='" + Convert.ToString(_obj_Smvts_fConfig.FLEETCONFIG_CATEG_ID) + "' ,@FLEETCONFIG_ID='" + Convert.ToString(_obj_Smvts_fConfig.FLEETCONFIG_ID) + "'");
                else
                    //add
                    dt = ExecuteQuery("EXEC USP_SMVTS_CONTROLLING_BRANCH @Operation = 'POPULATEVEHICLE_ADD', @FLEETCONFIG_CATEG_ID ='" + Convert.ToString(_obj_Smvts_fConfig.FLEETCONFIG_CATEG_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }
    #endregion

    #region SMVTS_PLACE_MASTER Methods
    /// <summary>
    /// Writtenby NKM on 25/12/2009 12:10:00 P.M
    /// </summary>
    /// <param name="_obj_Smvts_Sims"></param>
    /// <returns></returns>

    public static DataTable get_Place(SMVTS_PLACE_MASTER _obj_Smvts_Place)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Place.OPERATION)
        {
            case operation.Select:
                if (_obj_Smvts_Place.PLACE_CODE != null)
                    dt = ExecuteQuery("EXEC USP_SMVTS_PLACE_MASTER @Operation = 'Select', @PLACE_CODE ='" + Convert.ToString(_obj_Smvts_Place.PLACE_CODE) + "', @PLACE_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Place.PLACE_CATEG_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_PLACE_MASTER @Operation = 'Select', @PLACE_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Place.PLACE_CATEG_ID) + "'");

                break;
            case operation.Check:
                if ((Convert.ToString(_obj_Smvts_Place.PLACE_CODE) != "0") && (_obj_Smvts_Place.PLACE_NAME != "0"))
                    dt = ExecuteQuery("EXEC USP_SMVTS_PLACE_MASTER @Operation = 'CHECK', @PLACE_NAME ='" + Convert.ToString(_obj_Smvts_Place.PLACE_NAME) + "' ,@PLACE_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Place.PLACE_CATEG_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_PLACE_MASTER @Operation = 'CHECK', @PLACE_NAME ='" + Convert.ToString(_obj_Smvts_Place.PLACE_NAME) + "', @PLACE_CODE ='" + Convert.ToString(_obj_Smvts_Place.PLACE_CODE) + "' ,@PLACE_CATEG_ID ='" + Convert.ToString(_obj_Smvts_Place.PLACE_CATEG_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }

    public static bool set_Place(SMVTS_PLACE_MASTER _obj_Smvts_Place)
    {
        bool status = false;
        switch (_obj_Smvts_Place.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_PLACE_MASTER @Operation = 'Insert',  @PLACE_CODE='" + _obj_Smvts_Place.PLACE_CODE
                                  + "', @PLACE_NAME='" + Convert.ToString(_obj_Smvts_Place.PLACE_NAME)
                                  + "', @PLACE_STATE='" + Convert.ToString(_obj_Smvts_Place.PLACE_STATE)
                                  + "', @PLACE_CNTRBRANCH_ID='" + Convert.ToString(_obj_Smvts_Place.PLACE_CNTRBRANCH_ID)
                                  + "', @PLACE_STATUS='" + Convert.ToString(_obj_Smvts_Place.PLACE_STATUS)
                                  + "', @PLACE_LANDMARK_ID='" + Convert.ToString(_obj_Smvts_Place.PLACE_LANDMARK_ID)
                                  + "', @PLACE_SEARCHLANDMARK='" + Convert.ToString(_obj_Smvts_Place.PLACE_SEARCHLANDMARK)
                                  + "', @PLACE_ZONECODE='" + Convert.ToString(_obj_Smvts_Place.PLACE_ZONECODE)
                                  + "', @PLACE_CATEG_ID='" + Convert.ToString(_obj_Smvts_Place.PLACE_CATEG_ID) + "'"))

                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_PLACE_MASTER @Operation = 'Update', @PLACE_CODE='" + _obj_Smvts_Place.PLACE_CODE
                                  + "', @PLACE_NAME='" + Convert.ToString(_obj_Smvts_Place.PLACE_NAME)
                                  + "', @PLACE_STATE='" + Convert.ToString(_obj_Smvts_Place.PLACE_STATE)
                                  + "', @PLACE_CNTRBRANCH_ID='" + Convert.ToString(_obj_Smvts_Place.PLACE_CNTRBRANCH_ID)
                                  + "', @PLACE_STATUS='" + Convert.ToString(_obj_Smvts_Place.PLACE_STATUS)
                                  + "', @PLACE_LANDMARK_ID='" + Convert.ToString(_obj_Smvts_Place.PLACE_LANDMARK_ID)
                                  + "', @PLACE_SEARCHLANDMARK='" + Convert.ToString(_obj_Smvts_Place.PLACE_SEARCHLANDMARK)
                                  + "', @PLACE_ZONECODE='" + Convert.ToString(_obj_Smvts_Place.PLACE_ZONECODE)
                                  + "', @PLACE_CATEG_ID='" + Convert.ToString(_obj_Smvts_Place.PLACE_CATEG_ID) + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }
    #endregion

    #region SMVTS_SHIFTPLANNING Methods

    public static DataTable get_ShiftPlanning(SMVTS_SHIFTPLANNING _obj_Smvts_Shiftplanning)
    {

        DataTable dtShiftPlanning = new DataTable();
        switch (_obj_Smvts_Shiftplanning.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ID) == "0")
                    dtShiftPlanning = ExecuteQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'SelectCategID' , @SHIFTPLANNING_CATEGID = '" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_CATEGID) + "'");
                else
                    dtShiftPlanning = ExecuteQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'SelectID', @SHIFTPLANNING_ID ='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ID) + "'");
                break;

            //            case operation.Check:
            //                dtShiftPlanning = ExecuteQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Check',@SHIFTPLANNING_NAME='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_NAME +"'");
            //                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ID) == "0")
                    dtShiftPlanning = ExecuteQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Check', @SHIFTPLANNING_NAME ='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_NAME) + "'");
                else
                    dtShiftPlanning = ExecuteQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Check', @SHIFTPLANNING_NAME ='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_NAME) + "', @SHIFTPLANNING_ID ='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ID) + "'");
                break;
            //            case operation.Empty:
            //               dtCities = ExecuteQuery("EXEC USP_SMVTS_CITIES @Operation = 'SelectCity', @CITY_STATE_ID ='" + Convert.ToString(_obj_Smvts_Cities.CITY_STATE_ID) + "'");
            //               break;
            default:
                break;
        }
        return dtShiftPlanning;
    }

    public static bool set_ShiftPlanning(SMVTS_SHIFTPLANNING _obj_Smvts_Shiftplanning)
    {
        StringBuilder obj = new StringBuilder();

        bool status = false;
        switch (_obj_Smvts_Shiftplanning.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Insert', @SHIFTPLANNING_CATEGID='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CATEGID
                                  + "', @SHIFTPLANNING_SHIFTMASTER_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_SHIFTMASTER_ID
                                  + "', @SHIFTPLANNING_NAME ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_NAME
                                  + "', @SHIFTPLANNING_ROUTES_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_ROUTES_ID
                                  + "', @SHIFTPLANNING_DATE='" + _obj_Smvts_Shiftplanning.STARTDATE
                                  + "', @SHIFTPLANNING_DEVICE_IDS  ='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_DEVICE_IDS)
                                  + "', @SHIFTPLANNING_CREATEDBY = " + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CREATEDBY
                                  + " , @SHIFTPLANNING_CREATEDDATE ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CREATEDDATE
                                  + "', @SHIFTPLANNING_MODIFIEDBY =" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDBY
                                  + " , @SHIFTPLANNING_MODIFIEDDATE ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDDATE + "'"))

                    //obj.Append("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Insert', @SHIFTPLANNING_CATEGID= '");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_CATEGID);
                    //obj.Append("', @SHIFTPLANNING_SHIFTMASTER_ID ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_SHIFTMASTER_ID);
                    //obj.Append("', @SHIFTPLANNING_ROUTES_ID ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ROUTES_ID);
                    //obj.Append("', @SHIFTPLANNING_DEVICE_IDS ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.STARTDATE);
                    //obj.Append("',@SHIFTPLANNING_DATE='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_DEVICE_IDS);
                    //obj.Append("', @SHIFTPLANNING_CREATEDBY ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_CREATEDBY);
                    //obj.Append("', @SHIFTPLANNING_CREATEDDATE ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_CREATEDDATE);
                    //obj.Append("', @SHIFTPLANNING_MODIFIEDBY ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDBY);
                    //obj.Append("', @SHIFTPLANNING_MODIFIEDDATE ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDDATE);


                    //obj.Append("'");

                    //if (ExecuteNonQuery(Convert.ToString(obj)))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Update',@SHIFTPLANNING_ID='"
                    + _obj_Smvts_Shiftplanning.SHIFTPLANNING_ID + "',@SHIFTPLANNING_CATEGID='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CATEGID
                                  + "', @SHIFTPLANNING_SHIFTMASTER_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_SHIFTMASTER_ID
                                  + "', @SHIFTPLANNING_ROUTES_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_ROUTES_ID
                                  + "', @SHIFTPLANNING_NAME ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_NAME
                                  + "', @SHIFTPLANNING_DATE='" + _obj_Smvts_Shiftplanning.STARTDATE
                                  + "', @SHIFTPLANNING_DEVICE_IDS  ='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_DEVICE_IDS)
                                  + "', @SHIFTPLANNING_CREATEDBY = " + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CREATEDBY
                                  + " , @SHIFTPLANNING_CREATEDDATE ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CREATEDDATE
                                  + "', @SHIFTPLANNING_MODIFIEDBY =" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDBY
                                  + " , @SHIFTPLANNING_MODIFIEDDATE ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDDATE + "'"))


                    //obj.Append("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Insert', @SHIFTPLANNING_CATEGID= '");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_CATEGID);
                    //obj.Append("', @SHIFTPLANNING_ID ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ID);
                    //obj.Append("', @SHIFTPLANNING_SHIFTMASTER_ID ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_SHIFTMASTER_ID);
                    //obj.Append("', @SHIFTPLANNING_ROUTES_ID ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ROUTES_ID);
                    //obj.Append("', @SHIFTPLANNING_DEVICE_IDS ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_DEVICE_IDS);
                    //obj.Append("', @SHIFTPLANNING_MODIFIEDBY ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDBY);
                    //obj.Append("', @SHIFTPLANNING_MODIFIEDDATE ='");
                    //obj.Append(_obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDDATE);
                    //obj.Append("'");

                    //if (ExecuteNonQuery(Convert.ToString(obj)))
                    status = true;
                else
                    status = false;
                break;


            case operation.Delete:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Delete', @SHIFTPLANNING_ID='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ID)
                                + "' , @SHIFTPLANNING_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDBY)
                                + "' , @SHIFTPLANNING_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_MODIFIEDDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }
    #endregion

    #region SMVTS_SHIFTMASTER Methods

    public static DataTable get_ShiftMaster(SMVTS_SHIFTMASTER _obj_Smvts_Shiftmaster)
    {

        DataTable dtShiftMaster = new DataTable();
        switch (_obj_Smvts_Shiftmaster.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_ID) == "0")
                    dtShiftMaster = ExecuteQuery("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'SelectALL'");
                else
                    dtShiftMaster = ExecuteQuery("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'SelectID', @SHIFTMASTER_ID ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_ID) + "'");
                break;
            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_ID) == "0")
                    dtShiftMaster = ExecuteQuery("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'Check', @SHIFTMASTER_SHIFTNAME ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_SHIFTNAME) + "', @SHIFTMASTER_CATEGID ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_CATEGID) + "'");
                else
                    dtShiftMaster = ExecuteQuery("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'Check', @SHIFTMASTER_SHIFTNAME ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_SHIFTNAME) + "', @SHIFTMASTER_CATEGID ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_CATEGID) + "', @SHIFTMASTER_ID ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_ID) + "'");
                break;

            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_CATEGID) != "0")
                    dtShiftMaster = ExecuteQuery("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'SelectCategID', @SHIFTMASTER_CATEGID ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_CATEGID) + "', @SHIFTMASTER_ID ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_ID) + "'");
                break;

            default:
                break;
        }
        return dtShiftMaster;
    }

    public static bool set_ShiftMaster(SMVTS_SHIFTMASTER _obj_Smvts_Shiftmaster)
    {
        StringBuilder obj = new StringBuilder();

        bool status = false;
        switch (_obj_Smvts_Shiftmaster.OPERATION)
        {
            case operation.Insert:
                //if (ExecuteNonQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Insert', @SHIFTPLANNING_CATEGID='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CATEGID
                //                  + "', @SHIFTPLANNING_SHIFTMASTER_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_SHIFTMASTER_ID
                //                  + "', @SHIFTPLANNING_ROUTES_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_ROUTES_ID
                //                  + "', @SHIFTPLANNING_DEVICE_IDS  = " + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_DEVICE_IDS)
                //                  + "', @SHIFTPLANNING_CREATEDBY = " + Convert.ToString(_obj_Smvts_Shiftplanning.CREATEDBY)
                //                  + " , @SHIFTPLANNING_CREATEDDATE ='" + Convert.ToString(_obj_Smvts_Shiftplanning.CREATEDDATE)
                //                  + "', @SHIFTPLANNING_MODIFIEDBY =" + Convert.ToString(_obj_Smvts_Shiftplanning.LASTMDFBY)
                //                  + " , @SHIFTPLANNING_MODIFIEDDATE ='" + Convert.ToString(_obj_Smvts_Shiftplanning.LASTMDFDATE) + "'"))

                obj.Append("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'Insert', @SHIFTMASTER_CATEGID= '");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_CATEGID);
                obj.Append("', @SHIFTMASTER_SHIFTNAME ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_SHIFTNAME);
                obj.Append("', @SHIFTMASTER_DESC ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_DESC);
                obj.Append("', @SHIFTMASTER_STARTDATETIME ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_STARTDATETIME);
                obj.Append("', @SHIFTMASTER_ENDDATETIME ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_ENDDATETIME);
                obj.Append("', @SHIFTMASTER_STATUS ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_STATUS);
                obj.Append("', @SHIFTMASTER_CREATEDBY ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_CREATEDBY);
                obj.Append("', @SHIFTMASTER_CREATEDDATE ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_CREATEDDATE);
                obj.Append("', @SHIFTMASTER_MODIFIEDBY ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_MODIFIEDBY);
                obj.Append("', @SHIFTMASTER_MODIFIEDDATE ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_MODIFIEDDATE);
                obj.Append("'");

                if (ExecuteNonQuery(Convert.ToString(obj)))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                //if (ExecuteNonQuery("EXEC USP_SMVTS_SHIFTPLANNING @Operation = 'Insert', @SHIFTPLANNING_ID='" +  Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_ID)   + "', @SHIFTPLANNING_CATEGID='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_CATEGID
                //                  + "', @SHIFTPLANNING_SHIFTMASTER_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_SHIFTMASTER_ID
                //                  + "', @SHIFTPLANNING_ROUTES_ID ='" + _obj_Smvts_Shiftplanning.SHIFTPLANNING_ROUTES_ID
                //                  + "', @SHIFTPLANNING_DEVICE_IDS  = " + Convert.ToString(_obj_Smvts_Shiftplanning.SHIFTPLANNING_DEVICE_IDS)
                //                  + "', @SHIFTPLANNING_CREATEDBY = " + Convert.ToString(_obj_Smvts_Shiftplanning.CREATEDBY)
                //                  + " , @SHIFTPLANNING_CREATEDDATE ='" + Convert.ToString(_obj_Smvts_Shiftplanning.CREATEDDATE)
                //                  + "', @SHIFTPLANNING_MODIFIEDBY =" + Convert.ToString(_obj_Smvts_Shiftplanning.LASTMDFBY)
                //                  + " , @SHIFTPLANNING_MODIFIEDDATE ='" + Convert.ToString(_obj_Smvts_Shiftplanning.LASTMDFDATE) + "'"))


                obj.Append("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'Update', @SHIFTMASTER_CATEGID= '");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_CATEGID);
                obj.Append("', @SHIFTMASTER_ID ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_ID);
                obj.Append("', @SHIFTMASTER_SHIFTNAME ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_SHIFTNAME);
                obj.Append("', @SHIFTMASTER_DESC ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_DESC);
                obj.Append("', @SHIFTMASTER_STARTDATETIME ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_STARTDATETIME);
                obj.Append("', @SHIFTMASTER_ENDDATETIME ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_ENDDATETIME);
                obj.Append("', @SHIFTMASTER_STATUS ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_STATUS);
                obj.Append("', @SHIFTMASTER_MODIFIEDBY ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_MODIFIEDBY);
                obj.Append("', @SHIFTMASTER_MODIFIEDDATE ='");
                obj.Append(_obj_Smvts_Shiftmaster.SHIFTMASTER_MODIFIEDDATE);
                obj.Append("'");


                if (ExecuteNonQuery(Convert.ToString(obj)))
                    status = true;
                else
                    status = false;
                break;


            case operation.Delete:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SHIFTMASTER @Operation = 'Delete', @SHIFTMASTER_ID='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_ID)
                                + "' , @SHIFTMASTER_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_MODIFIEDBY)
                                + "' , @SHIFTMASTER_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Shiftmaster.SHIFTMASTER_MODIFIEDDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }
    #endregion



    #region SMVTS_VENDORMASTER Methods
    internal static bool setvendor_masters(smvts_vendormasters obj_vendormasters)
    {
        bool status = false;
        //  DataTable dt = new DataTable();
        switch (obj_vendormasters.OPERATION)
        {

            case operation.Insert:
                if (ExecuteNonQuery("exec USP_SMVTS_VENDORMASTER  @Operation = 'INSERT',@VENDORMASTER_CATEGID=" + obj_vendormasters.category_id + ",@VENDORMASTER_VENDORNAME='" + obj_vendormasters.vendor_name + "',@VENDORMASTER_VENDORADDRESS='" + obj_vendormasters.vendor_address + "',@VENDORMASTER_DESC='" + obj_vendormasters.description + "',@VENDORMASTER_CONTACTPERSON='" + obj_vendormasters.contact_person + "',@VENDORMASTER_CONTACTMOBILENO='" + obj_vendormasters.contact_mobilenumber + "',@VENDORMASTER_STATUS=" + obj_vendormasters.status + ",@VENDORMASTER_CREATEDBY=" + obj_vendormasters.created_by + ",@VENDORMASTER_CREATEDDATE='" + obj_vendormasters.created_date + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_VENDORMASTER @Operation = 'UPDATE',@VENDORMASTER_ID=" + obj_vendormasters.vendor_id + ",@VENDORMASTER_CATEGID=" + obj_vendormasters.category_id + ",@VENDORMASTER_VENDORNAME='" + obj_vendormasters.vendor_name + "',@VENDORMASTER_VENDORADDRESS='" + obj_vendormasters.vendor_address + "',@VENDORMASTER_DESC='" + obj_vendormasters.description + "',@VENDORMASTER_CONTACTPERSON='" + obj_vendormasters.contact_person + "',@VENDORMASTER_CONTACTMOBILENO='" + obj_vendormasters.contact_mobilenumber + "',@VENDORMASTER_STATUS=" + obj_vendormasters.status + ",@VENDORMASTER_MODIFIEDBY=" + obj_vendormasters.modified_by + ",@VENDORMASTER_MODIFIEDDATE='" + obj_vendormasters.modified_date + "'"))



                    status = true;
                else
                    status = false;

                break;

        }
        return status;
    }

    internal static DataTable getvendor_masters(smvts_vendormasters obj_vendormasters)
    {
        DataTable dt = new DataTable();
        switch (obj_vendormasters.OPERATION)
        {

            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_VENDORMASTER @Operation = 'SelectCategID', @VENDORMASTER_CATEGID = '" + obj_vendormasters.category_id + "'");
                break;
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_VENDORMASTER @Operation ='SelectID' , @VENDORMASTER_CATEGID = '" + obj_vendormasters.category_id + "' , @VENDORMASTER_ID=" + obj_vendormasters.vendor_id);
                break;
        }
        return dt;


    }
    #endregion

    #region SMVTS_OFFICEMASTER Methods
    internal static DataTable getofficemasters(smvts_officemasters obj_officemasters)
    {
        DataTable dt = new DataTable();
        switch (obj_officemasters.OPERATION)
        {

            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_OFFICEMASTER @Operation = 'SelectCategID',   @OFFICEMASTER_CATEGID = '" + obj_officemasters.category_id + "'");
                break;
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_OFFICEMASTER @Operation ='SelectID' ,  @OFFICEMASTER_ID=" + obj_officemasters.officemaster_id);
                break;
            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_OFFICEMASTER @Operation ='SelectOfficeVehicles', @OFFICEMASTER_ID=" + obj_officemasters.officemaster_id);
                break;
        }
        return dt;
    }



    internal static bool setoffice_masters(smvts_officemasters obj_officemasters)
    {
        bool status = false;
        //  DataTable dt = new DataTable();
        switch (obj_officemasters.OPERATION)
        {

            case operation.Insert:
                if (ExecuteNonQuery("exec USP_SMVTS_OFFICEMASTER  @Operation = 'INSERT',@OFFICEMASTER_CATEGID=" + obj_officemasters.category_id + ",@OFFICEMASTER_NAME='" + obj_officemasters.office_name + "',@OFFICEMASTER_DESC='" + obj_officemasters.office_description + "',@OFFICEMASTER_LAT='" + obj_officemasters.latitude + "',@OFFICEMASTER_LONG='" + obj_officemasters.longitude + "',@OFFICEMASTER_STATUS=" + obj_officemasters.status + ",@OFFICEMASTER_CREATEDBY=" + obj_officemasters.created_by + ",@OFFICEMASTER_CREATEDDATE='" + obj_officemasters.created_date + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_OFFICEMASTER @Operation = 'UPDATE',@OFFICEMASTER_ID=" + obj_officemasters.officemaster_id + ",@OFFICEMASTER_CATEGID=" + obj_officemasters.category_id + ",@OFFICEMASTER_NAME='" + obj_officemasters.office_name + "',@OFFICEMASTER_DESC='" + obj_officemasters.office_description + "',@OFFICEMASTER_LAT='" + obj_officemasters.latitude + "',@OFFICEMASTER_LONG='" + obj_officemasters.longitude + "',@OFFICEMASTER_STATUS=" + obj_officemasters.status + ",@OFFICEMASTER_MODIFIEDBY=" + obj_officemasters.modified_by + ",@OFFICEMASTER_MODIFIEDDATE='" + obj_officemasters.modified_date + "'"))
                    status = true;
                else
                    status = false;

                break;

        }
        return status;
    }
    #endregion




    #region SMVTS_CLIENTDEMO

    internal static DataTable getdemo_devices(SMVTS_DEMODEVICES demodevices)
    {
        DataTable dt = new DataTable();
        switch (demodevices.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_CLIENT_DEMO @OPERATION='SELECTALL'");
                break;
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_CLIENT_DEMO @OPERATION='SELECT',@CLIENT_ID=" + demodevices.Client_Id);
                break;
            default:
                break;
        }
        return dt;
    }


    internal static bool set_Client_Demo_Devices(SMVTS_DEMODEVICES obj_Demodevices)
    {
        bool status = false;
        switch (obj_Demodevices.OPERATION)
        {

            case operation.Insert:
                if (ExecuteNonQuery("exec USP_SMVTS_CLIENT_DEMO  @OPERATION='INSERT',@CLIENT_NAME='"
                    + obj_Demodevices.Client_Name + "',@CLIENT_ADDRESS='"
                    + obj_Demodevices.Client_Address + "',@INSTANCE='"
                    + obj_Demodevices.Client_Instance + "',@INSTANCE_ID="
                    + obj_Demodevices.Client_Instance_Id + ",@DEMO_STARTDATE='"
                    + obj_Demodevices.Client_Start_Date + "',@DEMO_TOTALDAYS="
                    + obj_Demodevices.Client_Total_Days + ",@DEMO_TOTALDEVICES_SUPPLIED="
                    + obj_Demodevices.Client_Total_Devices + ",@CONTACT_PERSON='"
                    + obj_Demodevices.Client_Contact_Person + "',@MOBILE_NUMBER='"
                    + obj_Demodevices.Client_Mobile_Number + "',@PROSPECT_BY='"
                    + obj_Demodevices.Client_Prospect_By + "',@CREATED_BY='"
                    + obj_Demodevices.Client_Created_By + "',@STATUS=" + obj_Demodevices.Client_Status))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("exec USP_SMVTS_CLIENT_DEMO  @OPERATION='UPDATE',@CLIENT_ID="
                    + obj_Demodevices.Client_Id + ",@CLIENT_NAME='"
                    + obj_Demodevices.Client_Name + "',@CLIENT_ADDRESS='"
                    + obj_Demodevices.Client_Address + "',@INSTANCE='"
                    + obj_Demodevices.Client_Instance + "',@INSTANCE_ID="
                    + obj_Demodevices.Client_Instance_Id + ",@DEMO_STARTDATE='"
                    + obj_Demodevices.Client_Start_Date + "',@DEMO_TOTALDAYS="
                    + obj_Demodevices.Client_Total_Days + ",@DEMO_TOTALDEVICES_SUPPLIED="
                    + obj_Demodevices.Client_Total_Devices + ",@CONTACT_PERSON='"
                    + obj_Demodevices.Client_Contact_Person + "',@MOBILE_NUMBER='"
                    + obj_Demodevices.Client_Mobile_Number + "',@PROSPECT_BY='"
                    + obj_Demodevices.Client_Prospect_By + "',@CREATED_BY='"
                    + obj_Demodevices.Client_Created_By + "',@STATUS=" + obj_Demodevices.Client_Status))
                    status = true;
                else
                    status = false;
                break;

        }
        return status;
    }


    #endregion


    internal static bool set_Pickup_Points(SMVTS_ROUTES_PICKUP _obj_smvts_pickup)
    {
        bool status = false;
        switch (_obj_smvts_pickup.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_PICKUP_POINTS @Operation = 'Insert' , @PICKUPPOINT_CATEGORY_ID='" + _obj_smvts_pickup.PICKUP_CATEGORY_ID
                                  + "', @PICKUPPOINT_POINTS='" + Convert.ToString(_obj_smvts_pickup.PICKUP_POINTS)
                                  + "', @PICKUPPOINT_ROUTEID='" + Convert.ToString(_obj_smvts_pickup.PICKUP_ROUTEID)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:

                if (ExecuteNonQuery("EXEC USP_SMVTS_PICKUP_POINTS @Operation = 'Update' , @PICKUPPOINT_CATEGORY_ID='" + _obj_smvts_pickup.PICKUP_CATEGORY_ID
                      + "', @PICKUPPOINT_POINTS='" + Convert.ToString(_obj_smvts_pickup.PICKUP_POINTS)
                      + "', @PICKUPPOINT_ROUTEID='" + Convert.ToString(_obj_smvts_pickup.PICKUP_ROUTEID)
                      + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Delete:

                if (ExecuteNonQuery("EXEC USP_SMVTS_PICKUPPOINTS_NAMES @Operation = 'Delete' , @PICKUPPOINT_NAMES_ROUTE_ID='" + _obj_smvts_pickup.PICKUP_ROUTEID
                      + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataTable get_PickUpPoints(SMVTS_ROUTES_PICKUP _obj_Smvts_Routes)
    {
        DataTable dt = new DataTable();
        _obj_Smvts_Routes.OPERATION = operation.Select;
        switch (_obj_Smvts_Routes.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Routes.PICKUP_ROUTEID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_PICKUP_POINTS @Operation = 'select',@PICKUPPOINT_ROUTEID ='" + Convert.ToString(_obj_Smvts_Routes.PICKUP_ROUTEID) + "'");
                break;

            default: break;
        }
        return dt;
    }

    internal static bool set_PickUpPoint_Name(SMVTS_PICKUP_NAMES _obj_pickup_names)
    {
        bool status = false;
        switch (_obj_pickup_names.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_PICKUPPOINTS_NAMES @Operation = 'Insert' , @PICKUPPOINT_NAMES='" + _obj_pickup_names.PICKUPPOINT_NAMES
                                  + "', @PICKUPPOINT_NAMES_LAT='" + Convert.ToString(_obj_pickup_names.PICKUPPOINT_NAMES_LAT)
                                  + "', @PICKUPPOINT_NAMES_LNG='" + Convert.ToString(_obj_pickup_names.PICKUPPOINT_NAMES_LNG)
                                  + "',@PICKUPPOINT_NAMES_ROUTE_ID='" + Convert.ToString(_obj_pickup_names.PICKUPPOINT_NAMES_ROUTE_ID)
                                  + "',@PICKUPPOINTS_NAME_TYPE='" + _obj_pickup_names.PICKUPPOINTS_NAME_TYPE + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_PICKUPPOINTS_NAMES @Operation = 'Update' , @PICKUPPOINT_NAMES='" + _obj_pickup_names.PICKUPPOINT_NAMES
                                                 + "', @PICKUPPOINT_NAMES_LAT='" + Convert.ToString(_obj_pickup_names.PICKUPPOINT_NAMES_LAT)
                                                 + "', @PICKUPPOINT_NAMES_LNG='" + Convert.ToString(_obj_pickup_names.PICKUPPOINT_NAMES_LNG)
                                                 + "',@PICKUPPOINT_NAMES_ROUTE_ID='" + Convert.ToString(_obj_pickup_names.PICKUPPOINT_NAMES_ROUTE_ID)
                                                 + "',@PICKUPPOINTS_NAME_TYPE='" + _obj_pickup_names.PICKUPPOINTS_NAME_TYPE + "'"))
                    status = true;
                else
                    status = false;
                break;
            default: break;
        }
        return status;
    }

    internal static DataTable get_PickAndDropReport(string UserId, string Shift, string Office, string DeviceId, string RouteName, string FromDate, string ToDate)
    {
        DataTable dt = ExecuteQuery("EXEC RPT_USP_PICKDROP @SHIFTMASTER_ID='" + Shift
                                                + "',@OFFICEMASTER_ID='" + Office
                                                + "',@DEVICEID='" + DeviceId
                                                + "',@ROUTEID='" + RouteName
                                                + "',@STTIME='" + FromDate
                                                + "',@ENDTIME='" + ToDate
                                                + "',@USERID='" + UserId
                                                + "'");
        return dt;
    }

    internal static DataTable get_Rapiddetails(string option, string UserId, string DeviceId, string Date_Selected)
    {
        DataTable dt = new DataTable();
        switch (option)
        {
            case "RA":
                dt = ExecuteQuery("EXEC RPT_USP_RAPIDACC @USER_ID='" + Convert.ToString(UserId)
                                                       + "',@RPT_DATE='" + Date_Selected
                                                       + "',@DEVICE_ID='" + DeviceId
                                                       + "'");
                break;
            case "RD":
                dt = ExecuteQuery("EXEC RPT_USP_RAPIDDECC @USER_ID='" + Convert.ToString(UserId)
                                                        + "',@RPT_DATE='" + Date_Selected
                                                        + "',@DEVICE_ID='" + DeviceId
                                                        + "'");
                break;
            default: break;
        }
        return dt;
    }
    internal static DataTable get_Customised_24hrData(int user_id, DateTime dt_fromdate, DateTime dt_todate)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC RPT_CUSTOMIZED_24HOURS_SUMM @USER_ID=" + user_id + ",@START_DATE='" + dt_fromdate + "',@END_DATE='" + dt_todate + "'");
        return dt;
    }

    internal static DataTable get_RoutesWithPoints(SMVTS_ROUTES _obj_Smvts_Routes)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Routes.OPERATION)
        {

            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_PICKUP_POINTS @Operation = 'SelectPickPoints', @PICKUPPOINT_CATEGORY_ID = '" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID + "'");
                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_PickUpPointsForShift(SMVTS_ROUTES_PICKUP _obj_smvts_pickup)
    {
        DataTable dt = new DataTable();

        switch (_obj_smvts_pickup.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_smvts_pickup.PICKUP_ROUTEID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_PICKUP_POINTS @Operation = 'select',@PICKUPPOINT_ROUTEID ='" + Convert.ToString(_obj_smvts_pickup.PICKUP_ROUTEID) + "'");
                break;
            case operation.Empty:
                if (Convert.ToString(_obj_smvts_pickup.PICKUP_ROUTEID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_PICKUP_POINTS @Operation = 'selectPointsForShift',@PICKUPPOINT_ROUTEID ='" + Convert.ToString(_obj_smvts_pickup.PICKUP_ROUTEID) + "'");
                break;
            default: break;
        }
        return dt;
    }

    internal static DataTable get_LandMarks_TripReport(string DeviceId, string FromDate, string ToDate, string FromLandMark, string ToLandMark)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC RPT_USP_LANDMARKS_TRIPCOUNT @SOURCE_LAND='" + FromLandMark
                                                        + "',@DESTIN_LAND='" + ToLandMark
                                                        + "',@STDT='" + FromDate
                                                        + "',@ENDT='" + ToDate + "',@DEVICEID='" + DeviceId + "'");
        return dt;
    }
    #region "Driver Remarks"
    internal static DataTable get_Driver_Remarks(SMVTS_DRIVER_REMARKS _obj_smvts_remarks)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvts_remarks.OPERATION)
        {
            case operation.Select:
                if (_obj_smvts_remarks.REMARK_ID != 0)
                    dt = ExecuteQuery("EXEC [USP_SMVTS_DRIVER_REMARKS] @OPERATION = 'SelectEdit', @REMARK_ID ='" + Convert.ToString(_obj_smvts_remarks.REMARK_ID) + "', @REMARK_CATEGORY_ID ='" + Convert.ToString(_obj_smvts_remarks.REMARK_CATEGORY_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC [USP_SMVTS_DRIVER_REMARKS] @OPERATION = 'Select', @REMARK_CATEGORY_ID='" + Convert.ToString(_obj_smvts_remarks.REMARK_CATEGORY_ID) + "'");

                break;
            case operation.Check:
                if ((Convert.ToString(_obj_smvts_remarks.REMARK_ID) != "0") && (_obj_smvts_remarks.REMARK_ID != 0))
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVER_REMARKS @OPERATION = 'CHECK',@REMARK_ID ='" + Convert.ToString(_obj_smvts_remarks.REMARK_ID) + "', @REMARK_DRIVER_ID ='" + Convert.ToString(_obj_smvts_remarks.REMARK_DRIVER_ID) + "'");

                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_DRIVER_REMARKS @OPERATION = 'CHECK',@REMARK_CATEGORY_ID ='" + Convert.ToString(_obj_smvts_remarks.REMARK_CATEGORY_ID) + "', @REMARK_DRIVER_ID ='" + Convert.ToString(_obj_smvts_remarks.REMARK_DRIVER_ID) + "',@REMARK_CREATEDDATE='" + _obj_smvts_remarks.CREATEDDATE + "'");

                break;

            default:
                break;
        }
        return dt;
    }

    internal static bool set_Driver_Remarks(SMVTS_DRIVER_REMARKS _obj_smvts_remarks)
    {
        bool status = false;
        switch (_obj_smvts_remarks.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC [USP_SMVTS_DRIVER_REMARKS] @OPERATION='Insert',@REMARK_DRIVER_ID='" + _obj_smvts_remarks.REMARK_DRIVER_ID
                                                                    + "',@REMARK_AWARD='" + _obj_smvts_remarks.REMARK_AWARD
                                                                    + "',@REMARK_PENALITY_TYPE='" + _obj_smvts_remarks.REMARK_PENALITY_TYPE
                                                                    + "',@REMARK_PENALITY_DESCRIPTION='" + _obj_smvts_remarks.REMARK_PENALITY_DESCRIPTION
                                                                    + "',@REMARK_CATEGORY_ID='" + _obj_smvts_remarks.REMARK_CATEGORY_ID
                                                                    + "',@REMARK_STATUS='" + _obj_smvts_remarks.REMARK_STATUS
                                                                    + "',@REMARK_CREATEDBY='" + _obj_smvts_remarks.CREATEDBY
                                                                    + "',@REMARK_CREATEDDATE='" + _obj_smvts_remarks.CREATEDDATE
                                                                    + "',@REMARK_MODIFIEDBY='" + _obj_smvts_remarks.LASTMDFBY
                                                                    + "',@REMARK_MODIFIEDDATE='" + _obj_smvts_remarks.LASTMDFDATE + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC [USP_SMVTS_DRIVER_REMARKS] @OPERATION='Update',@REMARK_DRIVER_ID='" + _obj_smvts_remarks.REMARK_DRIVER_ID
                                                                    + "',@REMARK_AWARD='" + _obj_smvts_remarks.REMARK_AWARD
                                                                    + "',@REMARK_PENALITY_TYPE='" + _obj_smvts_remarks.REMARK_PENALITY_TYPE
                                                                    + "',@REMARK_PENALITY_DESCRIPTION='" + _obj_smvts_remarks.REMARK_PENALITY_DESCRIPTION
                                                                    + "',@REMARK_ID='" + _obj_smvts_remarks.REMARK_ID
                                                                    + "',@REMARK_CATEGORY_ID='" + _obj_smvts_remarks.REMARK_CATEGORY_ID
                                                                    + "',@REMARK_STATUS='" + _obj_smvts_remarks.REMARK_STATUS
                                                                    + "',@REMARK_CREATEDBY='" + _obj_smvts_remarks.CREATEDBY
                                                                    + "',@REMARK_CREATEDDATE='" + _obj_smvts_remarks.CREATEDDATE
                                                                    + "',@REMARK_MODIFIEDBY='" + _obj_smvts_remarks.LASTMDFBY
                                                                    + "',@REMARK_MODIFIEDDATE='" + _obj_smvts_remarks.LASTMDFDATE + "'"))
                    status = true;
                else
                    status = false;
                break;
            default: break;
        }
        return status;
    }
    #endregion

    internal static DataTable get_AssignedDrivers(SMVTS_ASSIGNDRIVER _obj_smvts_drivers)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvts_drivers.OPERATION)
        {
            case operation.Select:
                if (_obj_smvts_drivers.ASSIGNDRIVERS_ID != 0)
                    dt = ExecuteQuery("EXEC [USP_SMVTS_ASSIGNDRIVERS] @OPERATION = 'SelectEdit', @ASSIGNDRIVERS_ID ='" + Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVERS_ID) + "', @ASSIGNDRIVER_CATEGORYID ='" + Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVER_CATEGORYID) + "'");
                else
                    dt = ExecuteQuery("EXEC [USP_SMVTS_ASSIGNDRIVERS] @OPERATION = 'Select', @ASSIGNDRIVER_CATEGORYID='" + Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVER_CATEGORYID) + "'");

                break;
            case operation.Check:
                if ((Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVERS_ID) != "0") && (_obj_smvts_drivers.ASSIGNDRIVERS_ID != 0))
                    dt = ExecuteQuery("EXEC USP_SMVTS_ASSIGNDRIVERS @OPERATION = 'CHECK',@ASSIGNDRIVERS_ID  ='" + Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVERS_ID) + "',@ASSIGNDRIVERS_DATE ='" + Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVERS_DATE) + "',@ASSIGNDRIVERS_DRIVERID='" + _obj_smvts_drivers.ASSIGNDRIVERS_DRIVERID + "',@ASSIGNDRIVERS_VEHICLEID='" + _obj_smvts_drivers.ASSIGNDRIVERS_VEHICLEID + "'");

                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ASSIGNDRIVERS @OPERATION = 'CHECK',@ASSIGNDRIVERS_VEHICLEID ='" + Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVERS_VEHICLEID) + "', @ASSIGNDRIVERS_DRIVERID ='" + Convert.ToString(_obj_smvts_drivers.ASSIGNDRIVERS_DRIVERID) + "',@ASSIGNDRIVERS_DATE='" + _obj_smvts_drivers.ASSIGNDRIVERS_DATE + "'");

                break;

            default:
                break;
        }
        return dt;
    }

    internal static bool set_AssignedDrivers(SMVTS_ASSIGNDRIVER _obj_smvts_drivers)
    {
        bool status = false;
        switch (_obj_smvts_drivers.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC [USP_SMVTS_ASSIGNDRIVERS] @OPERATION='Insert',@ASSIGNDRIVERS_DRIVERID='" + _obj_smvts_drivers.ASSIGNDRIVERS_DRIVERID
                                                                    + "',@ASSIGNDRIVERS_VEHICLEID='" + _obj_smvts_drivers.ASSIGNDRIVERS_VEHICLEID
                                                                    + "',@ASSIGNDRIVERS_DATE='" + _obj_smvts_drivers.ASSIGNDRIVERS_DATE
                                                                    + "',@ASSIGNDRIVERS_STATUS='" + _obj_smvts_drivers.ASSIGNDRIVERS_STATUS
                                                                    + "',@ASSIGNDRIVER_CATEGORYID='" + _obj_smvts_drivers.ASSIGNDRIVER_CATEGORYID
                                                                    + "',@CREATEDBY='" + _obj_smvts_drivers.CREATEDBY
                                                                    + "',@CREATEDDATE='" + _obj_smvts_drivers.CREATEDDATE
                                                                    + "',@MODIFIEDBY='" + _obj_smvts_drivers.LASTMDFBY
                                                                    + "',@MODIFIEDDATE='" + _obj_smvts_drivers.LASTMDFDATE + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC [USP_SMVTS_ASSIGNDRIVERS] @OPERATION='Update',@ASSIGNDRIVERS_DRIVERID='" + _obj_smvts_drivers.ASSIGNDRIVERS_DRIVERID
                                                                    + "',@ASSIGNDRIVERS_VEHICLEID='" + _obj_smvts_drivers.ASSIGNDRIVERS_VEHICLEID
                                                                    + "',@ASSIGNDRIVERS_DATE='" + _obj_smvts_drivers.ASSIGNDRIVERS_DATE
                                                                    + "',@ASSIGNDRIVERS_STATUS='" + _obj_smvts_drivers.ASSIGNDRIVERS_STATUS
                                                                    + "',@ASSIGNDRIVER_CATEGORYID='" + _obj_smvts_drivers.ASSIGNDRIVER_CATEGORYID
                                                                    + "',@CREATEDBY='" + _obj_smvts_drivers.CREATEDBY
                                                                    + "',@CREATEDDATE='" + _obj_smvts_drivers.CREATEDDATE
                                                                    + "',@MODIFIEDBY='" + _obj_smvts_drivers.LASTMDFBY
                                                                    + "',@MODIFIEDDATE='" + _obj_smvts_drivers.LASTMDFDATE
                                                                    + "',@ASSIGNDRIVERS_ID='" + _obj_smvts_drivers.ASSIGNDRIVERS_ID + "'"))
                    status = true;
                else
                    status = false;
                break;
            default: break;
        }
        return status;
    }

    internal static DataTable get_DebirsConsolidated(string SourceId, string DestId, string DeviceId, string Fromdt, string Todt, string Categoryid)
    {
        DataTable dt_rpt = ExecuteQuery("EXEC RPT_TRIPLANDMARK_CONSOLIDATED @CATEGORYID='" + Categoryid
            + "', @DEVICEID='" + DeviceId
            + "', @SOURCE_LAND='" + SourceId
            + "', @DESTIN_LAND='" + DestId
            + "', @STDT='" + Fromdt
            + "', @ENDT='" + Todt + "'");
        return dt_rpt;
    }

    internal static DataTable get_GeofenceConsolidated(string operation, string VehModel, string LandId, string DeviceId, string fromDt, string toDt, string CategoryId, int status, string UserId)
    {
        DataTable dt_rpt = ExecuteQuery("EXEC [RPT_GEOFENCE_CONSOLIDATED] @CATEGORYID='" + CategoryId
       + "', @DEVICEID=" + (DeviceId == string.Empty ? "null" : "'" + DeviceId + "'")
       + ", @LAND_ID='" + LandId
       + "', @VEHMODEL_ID='" + VehModel
       + "', @STARTDATE='" + fromDt
       + "', @ENDDATE='" + toDt
       + "',@STATUS_BIT='" + status
       + "',@USERID='" + UserId
       + "',@OPERATION='" + operation + "'");
        return dt_rpt;

    }

    internal static DataTable get_vehicleByModel(string model, int CategId, int userId)
    {
        DataTable dt_veh = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @OPERATION='SelectByModel',@VEHICLES_CATEGORY_ID='" + CategId + "',@VEHICLES_VEHICLEMAKEMODEL_ID='" + model + "',@USERID='" + userId + "'");
        return dt_veh;
    }

    internal static DataTable get_AssignVehicles_LandMarks(SMVTS_ASSIGN_TRACTOR_LM _obj_assignlm)
    {
        DataTable dt = new DataTable();
        switch (_obj_assignlm.OPERATION)
        {
            case operation.Select:

                if (_obj_assignlm.TRACTORLM_ID != 0)
                {
                    dt = ExecuteQuery("EXEC [USP_SMVTS_ASSIGN_TRACTOR_LM] @OPERATION = 'Select', @TRACTORLM_ID='" + Convert.ToString(_obj_assignlm.TRACTORLM_ID) + "'");
                }
                else
                {
                    dt = ExecuteQuery("EXEC [USP_SMVTS_ASSIGN_TRACTOR_LM] @OPERATION = 'Select', @TRACTORLM_CATEGID='" + Convert.ToString(_obj_assignlm.TRACTORLM_CATEGID) + "'");
                }
                break;
            case operation.Check:
                dt = ExecuteQuery("EXEC [USP_SMVTS_ASSIGN_TRACTOR_LM] @OPERATION = 'Check',@TRACTORLM_DEVICE_ID='" + _obj_assignlm.TRACTORLM_DEVICE_ID + "',@TRACTORLM_SOURCE_ID='" + _obj_assignlm.TRACTORLM_SOURCE_ID + "'");
                break;
            default:
                break;
        }
        return dt;
    }

    internal static bool set_AssignVehicles_LandMarks(SMVTS_ASSIGN_TRACTOR_LM _obj_assignlm)
    {
        bool status = false;
        switch (_obj_assignlm.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC [USP_SMVTS_ASSIGN_TRACTOR_LM] @OPERATION='Insert'"
                    + ",@TRACTORLM_DEVICE_ID='" + _obj_assignlm.TRACTORLM_DEVICE_ID
                    + "',@TRACTORLM_SOURCE_ID='" + _obj_assignlm.TRACTORLM_SOURCE_ID
                    + "',@TRACTORLM_LANDMARKS='" + _obj_assignlm.TRACTORLM_LANDMARKS
                    + "',@TRACTORLM_STATUS='" + _obj_assignlm.TRACTORLM_STATUS
                    + "',@TRACTORLM_CATEGID='" + _obj_assignlm.TRACTORLM_CATEGID + "'"))

                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC [USP_SMVTS_ASSIGN_TRACTOR_LM] @OPERATION='Update'"
                                  + ",@TRACTORLM_DEVICE_ID='" + _obj_assignlm.TRACTORLM_DEVICE_ID
                                  + "',@TRACTORLM_SOURCE_ID='" + _obj_assignlm.TRACTORLM_SOURCE_ID
                                  + "',@TRACTORLM_LANDMARKS='" + _obj_assignlm.TRACTORLM_LANDMARKS
                                  + "',@TRACTORLM_STATUS='" + _obj_assignlm.TRACTORLM_STATUS
                                  + "',@TRACTORLM_CATEGID='" + _obj_assignlm.TRACTORLM_CATEGID
                                  + "',@TRACTORLM_ID='" + _obj_assignlm.TRACTORLM_ID + "'"))
                    status = true;
                else
                    status = false;
                break;
            default: break;
        }
        return status;
    }






    #region SMVTS_FuelInfo Methods
    /// <summary>
    /// 
    /// </summary>
    /// <param name="_obj_Smvts_FuelInfo"></param>
    /// <returns></returns>

    public static DataTable get_FuelInfo(SMVTS_FUELINFO _obj_Smvts_FuelInfo)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_FuelInfo.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Select', @FUELINFO_ID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_ID) + "'");
                else
                    //dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Select', @FUELINFO_CATEG_ID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_CATEG_ID) + "'");
                    dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Select', @USERID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_USERID) + "'");
                break;

            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_FuelInfo.VEHICLES_DEVICEID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'SelectVehicle', @VEHICLES_DEVICEID ='" + Convert.ToString(_obj_Smvts_FuelInfo.VEHICLES_DEVICEID) + "'");
                //else
                //    dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'SelectVehicle', @FUELINFO_CATEG_ID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_CATEG_ID) + "'");
                break;

            case operation.Delete:
                if ((Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DEVICE_ID) != "0") && (_obj_Smvts_FuelInfo.FUELINFO_NOOFLITERS != 0))
                    dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'CheckTankCapacity', @FUELINFO_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DEVICE_ID) + "', @FUELINFO_NOOFLITERS = " + _obj_Smvts_FuelInfo.FUELINFO_NOOFLITERS + "");

                break;
            case operation.Check:
                if ((Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_ID) == "0") && (_obj_Smvts_FuelInfo.FUELINFO_DATETIME != null))
                    dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Check', @FUELINFO_DATETIME ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DATETIME) + "' ,@FUELINFO_CATEG_ID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_CATEG_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Check', @FUELINFO_DATETIME ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DATETIME) + "', @FUELINFO_ID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_ID) + "', @FUELINFO_CATEG_ID ='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_CATEG_ID) + "'");
                break;

            default:
                break;
        }
        return dt;
    }


    public static bool set_FuelInfo(SMVTS_FUELINFO _obj_Smvts_FuelInfo)
    {
        bool status = false;
        switch (_obj_Smvts_FuelInfo.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Insert'"
                                  + ", @FUELINFO_CATEG_ID='" + _obj_Smvts_FuelInfo.FUELINFO_CATEG_ID
                                  + "', @FUELINFO_DEVICE_ID='" + _obj_Smvts_FuelInfo.FUELINFO_DEVICE_ID
                                  + "', @FUELINFO_VEHICLE_NO='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_VEHICLE_NO)
                                  + "', @FUELINFO_DRIVERNAME='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DRIVERNAME)
                                  + "', @FUELINFO_CURRODOMETER='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_CURRODOMETER)
                                  + "', @FUELINFO_DATETIME='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DATETIME)
                                  + "', @FUELINFO_FUELTYPE='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_FUELTYPE)
                                  + "', @FUELINFO_UNIT='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_UNIT)
                                  + "', @FUELINFO_NOOFLITERS='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_NOOFLITERS)
                                  + "', @FUELINFO_AMOUNT='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_AMOUNT)
                                  + "', @FUELINFO_PERTOLPUMP='" + Convert.ToString(_obj_Smvts_FuelInfo.@FUELINFO_PERTOLPUMP)
                                  + "', @FUELINFO_CREATEDBY= '" + Convert.ToString(_obj_Smvts_FuelInfo.CREATEDBY)
                                  + "', @FUELINFO_CREATEDDATE='" + _obj_Smvts_FuelInfo.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @FUELINFO_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_FuelInfo.LASTMDFBY)
                                  + "', @FUELINFO_MODIFIEDDATE='" + _obj_Smvts_FuelInfo.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Update',@FUELINFO_ID='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_ID)
                                  + "', @FUELINFO_CATEG_ID='" + _obj_Smvts_FuelInfo.FUELINFO_CATEG_ID
                                  + "', @FUELINFO_DEVICE_ID='" + _obj_Smvts_FuelInfo.FUELINFO_DEVICE_ID
                                  + "', @FUELINFO_VEHICLE_NO='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_VEHICLE_NO)
                                  + "', @FUELINFO_DRIVERNAME='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DRIVERNAME)
                                  + "', @FUELINFO_CURRODOMETER='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_CURRODOMETER)
                                  + "', @FUELINFO_DATETIME='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_DATETIME)
                                  + "', @FUELINFO_FUELTYPE='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_FUELTYPE)
                                  + "', @FUELINFO_UNIT='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_UNIT)
                                  + "', @FUELINFO_NOOFLITERS='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_NOOFLITERS)
                                  + "', @FUELINFO_AMOUNT='" + Convert.ToString(_obj_Smvts_FuelInfo.FUELINFO_AMOUNT)
                                  + "', @FUELINFO_PERTOLPUMP='" + Convert.ToString(_obj_Smvts_FuelInfo.@FUELINFO_PERTOLPUMP)
                                  + "', @FUELINFO_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_FuelInfo.LASTMDFBY)
                                  + "', @FUELINFO_MODIFIEDDATE='" + _obj_Smvts_FuelInfo.LASTMDFDATE.ToString("MM/dd/yyyy") + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    #endregion

    internal static DataTable get_24hrosReportsData(string strDeviceID, string st_Date, string strEndDate)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_24HROVERSPEED   @DEVICE_ID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                                                            + ", @STDATE  =" + (st_Date == string.Empty ? "null" : "'" + st_Date + "'") + ", @ENDDATE=" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + "");

        return dt;
    }

    internal static DataTable get_24hrcdReportsData(string USERID, string strDeviceID, string st_Date, string strEndDate)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("EXEC USP_SMVTS_24HRCD @USERID='" + USERID + "',@DEVICEID='" + strDeviceID + "',@STARTDATE='" + st_Date + "',@ENDDATE='" + strEndDate + "' ");
        return dt;
    }

    internal static DataTable get_disconnectiondetails(string USERID, string CATEGID)
    {
        DataTable DT = new DataTable();
        DT = ExecuteQuery("EXEC USP_SMVTS_BACKUPBATTERY_ALERT @USERID='" + USERID + "',@CATEGORY_ID='" + CATEGID + "'");
        return DT;
    }


    internal static DataTable get_TripBy_Geofence(string Categ_id, string from_date, string to_date, string DeviceId, string LandId, string status)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC RPT_GEOFENCE_TRIP   @DEVICEID =" + (DeviceId == string.Empty ? "null" : "'" + DeviceId + "'")
                                                            + ", @STARTDATE  =" + (from_date == string.Empty ? "null" : "'" + from_date + "'") + ", @ENDDATE=" + (to_date == string.Empty ? "null" : "'" + to_date + "'")
                                                            + ",@CATEG_ID='" + Categ_id
                                                            + "',@LAND_ID='" + LandId
                                                            + "',@STATUS_BIT='" + status + "'");

        return dt;
    }

    internal static DataTable getassignedgeofencesims(SMVTS_ASSIGNEDGEOFENCESIMS _obj_assignedgeofencesims)
    {
        DataTable dt = new DataTable();
        switch (_obj_assignedgeofencesims.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_SMVTS_ASSIGNGEOFENCE_LANDMARKS @OPERATION='SELECT',@ASSIGNGEOFENCE_CATEGID=" + _obj_assignedgeofencesims.CATEGORY_ID);

                break;
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_ASSIGNGEOFENCE_LANDMARKS @OPERATION='SELECTID',@ID=" + _obj_assignedgeofencesims.ID);
                break;
            case operation.Empty:

                dt = ExecuteQuery("EXEC USP_SMVTS_ASSIGNGEOFENCE_LANDMARKS @OPERATION='CheckCount',@ASSIGNGEOFENCE_VEHICLEID='" + _obj_assignedgeofencesims.VEHICLEID
                     + "',@ASSIGNGEOFENCE_CATEGID='" + _obj_assignedgeofencesims.CATEGORY_ID
                     + "',@ASSIGNGEOFENCE_LANDID=" + _obj_assignedgeofencesims.LANDID);
                break;
            case operation.Update:
                dt = ExecuteQuery("EXEC USP_SMVTS_ASSIGNGEOFENCE_LANDMARKS @OPERATION='CheckCount',@ASSIGNGEOFENCE_VEHICLEID='" + _obj_assignedgeofencesims.VEHICLEID
                     + "',@ASSIGNGEOFENCE_CATEGID='" + _obj_assignedgeofencesims.CATEGORY_ID
                     + "',@ASSIGNGEOFENCE_LANDID=" + _obj_assignedgeofencesims.LANDID);
                break;
        }
        return dt;
    }

    internal static bool setSims_AssignVehicles(SMVTS_ASSIGNEDGEOFENCESIMS _obj_assignedgeofencesims)
    {
        bool status = false;
        switch (_obj_assignedgeofencesims.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ASSIGNGEOFENCE_LANDMARKS @OPERATION='INSERT',@ASSIGNGEOFENCE_VEHICLEID='"
                    + _obj_assignedgeofencesims.VEHICLEID + "',@ASSIGNGEOFENCE_CATEGID="
                    + _obj_assignedgeofencesims.CATEGORY_ID + ",@ASSIGNGEOFENCE_LANDID="
                    + _obj_assignedgeofencesims.LANDID + ",@ASSIGNGEOFENCE_SIMS='"
                    + _obj_assignedgeofencesims.SIMS + "',@ASSIGNGEOFENCE_STATUS=" + _obj_assignedgeofencesims.STATUS))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ASSIGNGEOFENCE_LANDMARKS @OPERATION='UPDATE',@ASSIGNGEOFENCE_VEHICLEID='"
                    + _obj_assignedgeofencesims.VEHICLEID + "',@ASSIGNGEOFENCE_CATEGID="
                    + _obj_assignedgeofencesims.CATEGORY_ID + ",@ASSIGNGEOFENCE_LANDID="
                    + _obj_assignedgeofencesims.LANDID + ",@ASSIGNGEOFENCE_SIMS='"
                    + _obj_assignedgeofencesims.SIMS + "',@ID='" + _obj_assignedgeofencesims.ID + "',@ASSIGNGEOFENCE_STATUS=" + _obj_assignedgeofencesims.STATUS))
                    status = true;
                else
                    status = false;
                break;
        }
        return status;
    }

    //internal static DataTable get_Geofence_Landmarks(SMVTS_LANDMARKS _obj_smvts_landmarks)
    //{
    //    DataTable dt = new DataTable();
    //    dt = ExecuteQuery("");
    //}

    internal static object get_VehiclesForTrip(int Categ_Id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_ASSIGN_TRACTOR_LM @OPERATION='SelectVehicleForTrip',@TRACTORLM_CATEGID=" + Categ_Id);
        return dt;
    }
    internal static DataTable get_Vehicle_Model(SMVTS_VEHICLE_MODELS _obj_smvts_vehicle_models)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvts_vehicle_models.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLEMODELIMAGES @OPERATION='SELECTCOLOR', @VEHMODELIMAGES_COLOR='G'");

                break;
        }
        return dt;
    }

    internal static DataTable get_ReportsData_Trips(string operation, string Landmark, string DevId, string fromDt, string toDt, string status, string userId, string model, string CategId)
    {
        DataTable dt_RptData = new DataTable();

        if (operation == "37")
        {
            dt_RptData = ExecuteQuery("EXEC [RPT_GHMC_CONSOLIDATEDTRIPS] @LAND_ID='" + Landmark + "', @DEVICEID =" + (DevId == string.Empty ? "null" : "'" + DevId + "'")
                                                                                  + ", @STARTDATE=" + (fromDt == string.Empty ? "null" : "'" + fromDt + "'") + ", @ENDDATE=" + (toDt == string.Empty ? "null" : "'" + toDt + "',@CATEGORYID='" + CategId + "',@VEHMODEL_ID='" + model
                                                                                  + "',@STATUS_BIT='" + status
                                                                                  + "',@USERID='" + userId
                                                                                  + "',@OPERATION='CONSOLIDATED'"));
        }
        else if (operation == "38")
        {
            dt_RptData = ExecuteQuery("EXEC [RPT_GHMC_CONSOLIDATEDTRIPS] @LAND_ID='" + Landmark + "', @DEVICEID =" + (DevId == string.Empty ? "null" : "'" + DevId + "'")
                                                                                  + ", @STARTDATE=" + (fromDt == string.Empty ? "null" : "'" + fromDt + "'") + ", @ENDDATE=" + (toDt == string.Empty ? "null" : "'" + toDt + "',@CATEGORYID='" + CategId + "',@VEHMODEL_ID='" + model
                                                                                  + "',@STATUS_BIT='" + status
                                                                                  + "',@USERID='" + userId
                                                                                  + "',@OPERATION=''"));
        }
        else
        {
            dt_RptData = ExecuteQuery("EXEC [RPT_MULTIPLEDEST_TRIPS] @DEST_ID='" + Landmark + "', @DEVICEID =" + (DevId == string.Empty ? "null" : "'" + DevId + "'")
                                                                           + ", @STARTDATE=" + (fromDt == string.Empty ? "null" : "'" + fromDt + "'") + ", @ENDDATE=" + (toDt == string.Empty ? "null" : "'" + toDt + "',@CATEGORYID='" + CategId + "',@VEH_MODEL='" + model
                                                                           + "',@STATUS_BIT='" + status
                                                                           + "',@USERID='" + userId
                                                                           + "',@OPERATION='" + operation + "'"));
        }





        return dt_RptData;
    }

    internal static DataTable get_routes_assigngeofence(SMVTS_ROUTES_ASSIGNGEOFENCE _obj_smvts_routes_assigngeofence)
    {
        DataTable dt = new DataTable();

        switch (_obj_smvts_routes_assigngeofence.OPERATION)
        {
            case operation.Select:
                if (_obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_ID != 0)
                {
                    dt = ExecuteQuery("EXEC USP_ROUTES_ASSIGNGEOFENCE @OPERATION='SELECT', @ROUTES_ASSIGNGEOFENCE_CATEGORYID=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_CATEGORYID + ",@ROUTES_ASSIGNGEOFENCE_ID=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_ID);

                }
                else
                {
                    dt = ExecuteQuery("EXEC USP_ROUTES_ASSIGNGEOFENCE @OPERATION='SELECT', @ROUTES_ASSIGNGEOFENCE_CATEGORYID=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_CATEGORYID);
                }
                break;
            case operation.Check:

                dt = ExecuteQuery("EXEC USP_ROUTES_ASSIGNGEOFENCE @OPERATION='CHECK', @ROUTES_ASSIGNGEOFENCE_CATEGORYID=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_CATEGORYID + ",@ROUTES_ASSIGNGEOFENCE_NAME='" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_NAME + "'");
                break;
            case operation.Empty:

                dt = ExecuteQuery("EXEC USP_ROUTES_ASSIGNGEOFENCE @OPERATION='CHECK', @ROUTES_ASSIGNGEOFENCE_CATEGORYID=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_CATEGORYID + ",@ROUTES_ASSIGNGEOFENCE_ID=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_ID + ",@ROUTES_ASSIGNGEOFENCE_NAME='" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_NAME + "'");

                break;
        }


        return dt;

    }

    internal static bool set_routes_assigngeofence(SMVTS_ROUTES_ASSIGNGEOFENCE _obj_smvts_routes_assigngeofence)
    {
        bool status = false;
        switch (_obj_smvts_routes_assigngeofence.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_ROUTES_ASSIGNGEOFENCE @OPERATION='INSERT',@ROUTES_ASSIGNGEOFENCE_NAME='"
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_NAME + "',@ROUTES_ASSIGNGEOFENCE_STARTID="
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_STARTID + ",@ROUTES_ASSIGNGEOFENCE_ENDID="
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_ENDID + ",@ROUTES_ASSIGNGEOFENCE_POINTSID='"
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_POINTSID + "',@ROUTES_ASSIGNGEOFENCE_CATEGORYID="
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_CATEGORYID + ",@ROUTES_ASSIGNGEOFENCE_STATUS=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_STATUS))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_ROUTES_ASSIGNGEOFENCE @OPERATION='UPDATE',@ROUTES_ASSIGNGEOFENCE_ID=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_ID + ",@ROUTES_ASSIGNGEOFENCE_NAME='"
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_NAME + "',@ROUTES_ASSIGNGEOFENCE_STARTID="
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_STARTID + ",@ROUTES_ASSIGNGEOFENCE_ENDID="
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_ENDID + ",@ROUTES_ASSIGNGEOFENCE_POINTSID='"
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_POINTSID + "',@ROUTES_ASSIGNGEOFENCE_CATEGORYID="
                    + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_CATEGORYID + ",@ROUTES_ASSIGNGEOFENCE_STATUS=" + _obj_smvts_routes_assigngeofence.ROUTES_ASSIGNGEOFENCE_STATUS))
                    status = true;
                else
                    status = false;
                break;

        }
        return status;
    }
    internal static DataTable get_Generic_TripStatus(string UserId, string categId, string operation)
    {
        DataTable dt_tripgrid = new DataTable();
        dt_tripgrid = ExecuteQuery("EXEC [USP_SMVTS_TRIPSTATUS_GRID] @USERID='" + UserId + "',@OPERATION='" + operation
                                                                               + "',@CATEGORYID='" + categId + "'");
        return dt_tripgrid;
    }

    internal static DataTable get_GridTrack_TripStatus(string UserId, string categId)
    {
        DataTable dt_tripgrid = new DataTable();
        dt_tripgrid = ExecuteQuery("EXEC [USP_SMVTS_TRIPSTATUS_GRID] @USERID='" + UserId
                                                                               + "',@CATEGORYID='" + categId + "'");
        return dt_tripgrid;
    }

    internal static DataTable get_rectified_devices(SMVTS_RECTIFIED_DEVICES _obj_smvts_rectified_devices)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_RECTIFIED_DEVICES @Operation = 'Select'");
        return dt;
    }

    internal static DataTable get_Vehicles_devices(SMVTS_RECTIFIED_DEVICES _obj_smvts_rectified_devices)
    {

        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_RECTIFIED_DEVICES @Operation = 'GetVehicles'");
        return dt;


    }

    internal static bool set_rectified_devices(SMVTS_RECTIFIED_DEVICES _obj_smvts_rectified_devices)
    {
        bool status = false;
        switch (_obj_smvts_rectified_devices.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_RECTIFIED_DEVICES @Operation='INSERT',@RECTIFIED_DEVICEID="
                    + _obj_smvts_rectified_devices.RECTIFIED_DEVICEID + ",@RECTIFIED_VEHICLES_NUMBER='"
                    + _obj_smvts_rectified_devices.RECTIFIED_VEHICLES_NUMBER + "',@RECTIFIED_REMARKS_ID="
                    + _obj_smvts_rectified_devices.RECTIFIED_REMARKS_ID + ",@RECTIFIED_REMARKS='"
                    + _obj_smvts_rectified_devices.RECTIFIED_REMARKS + "',@RECTIFIED_BY='"
                    + _obj_smvts_rectified_devices.RECTIFIED_BY + "',@RECTIFIED_DATE='" + _obj_smvts_rectified_devices.RECTIFIED_DATE + "'"))
                    status = true;
                else
                    status = false;
                break;
        }
        return status;

    }

    internal static DataTable getroutesassignedvehicles(int device_id, DateTime startdate)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [RPT_USP_TRIPSTATUS_INTERVAL] @OPERATION='GETROUTES',@DEVICEID =" + device_id + ",@STARTDATE ='" + startdate + "'");

        return dt;

    }
    #region SMVTS_DealerMASTER Methods
    internal static bool setdealer_masters(SMVTS_DEALERS _obj_dealermasters)
    {
        bool status = false;
        //  DataTable dt = new DataTable();
        switch (_obj_dealermasters.OPERATION)
        {

            case operation.Insert:
                if (ExecuteNonQuery("exec USP_SMVTS_DEALERMASTER  @Operation = 'INSERT',@DEALERMASTER_CATEGID=" + _obj_dealermasters.DEALER_CATEGORYID + ",@DEALERMASTER_DEALERNAME='" + _obj_dealermasters.DEALERS_NAME + "',@DEALERMASTER_DEALERADDRESS='" + _obj_dealermasters.DEALER_address + "',@DEALERMASTER_DESC='" + _obj_dealermasters.DEALER_description + "',@DEALERMASTER_CONTACTPERSON='" + _obj_dealermasters.DERALER_CONTACTPERSON + "',@DEALERMASTER_CONTACTMOBILENO='" + _obj_dealermasters.DEALER_MOBILE + "',@DEALERMASTER_STATUS=" + _obj_dealermasters.DEALER_STATUS + ",@DEALERMASTER_CREATEDBY=" + _obj_dealermasters.CREATEDBY + ",@DEALERMASTER_CREATEDDATE='" + _obj_dealermasters.CREATEDDATE + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_DEALERMASTER @Operation = 'UPDATE',@DEALERMASTER_ID=" + _obj_dealermasters.DEALER_ID + ",@DEALERMASTER_CATEGID=" + _obj_dealermasters.DEALER_CATEGORYID + ",@DEALERMASTER_DEALERNAME='" + _obj_dealermasters.DEALERS_NAME + "',@DEALERMASTER_DEALERADDRESS='" + _obj_dealermasters.DEALER_address + "',@DEALERMASTER_DESC='" + _obj_dealermasters.DEALER_description + "',@DEALERMASTER_CONTACTPERSON='" + _obj_dealermasters.DERALER_CONTACTPERSON + "',@DEALERMASTER_CONTACTMOBILENO='" + _obj_dealermasters.DEALER_MOBILE + "',@DEALERMASTER_STATUS=" + _obj_dealermasters.DEALER_STATUS + ",@DEALERMASTER_MODIFIEDBY=" + _obj_dealermasters.LASTMDFBY + ",@DEALERMASTER_MODIFIEDDATE='" + _obj_dealermasters.LASTMDFDATE + "'"))



                    status = true;
                else
                    status = false;

                break;

        }
        return status;
    }

    internal static DataTable getdealer_masters(SMVTS_DEALERS _obj_smvtsdealers)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvtsdealers.OPERATION)
        {

            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_DEALERMASTER @Operation = 'SelectCategID', @DEALERMASTER_CATEGID = '" + _obj_smvtsdealers.DEALER_CATEGORYID + "'");
                break;
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_DEALERMASTER @Operation ='SelectID' , @DEALERMASTER_CATEGID = '" + _obj_smvtsdealers.DEALER_CATEGORYID + "' , @DEALERMASTER_ID=" + _obj_smvtsdealers.DEALER_ID);
                break;
        }
        return dt;


    }
    #endregion


    internal static object get_Variant(string Model, int categId)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [USP_SMVTS_CONSIGNMENT_VARIANT] @OPERATION='SELECTVARIANT',@VARIANT_CATEGORYID=" + categId + ",@VARIANT_MODELID ='" + Model + "'");

        return dt;
    }


    internal static DataTable get_nearestvehicles(string User_ID, string location_lat, string location_long, int radius)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_GETNEARESTVEHICLES_TRACK @USERID=" + User_ID + ",@LOCATION_LAT='" + location_lat + "',@LOCATION_LONG ='" + location_long + "',@RADIUS =" + radius);
        return dt;
    }


    #region SMVTS_EnquiryForm Methods
    /// <summary>
    /// 
    /// </summary>
    /// <param name="_obj_Smvts_FuelInfo"></param>
    /// <returns></returns>

    public static DataTable get_EnquiryForm(SMVTS_ENQUIRYFORM _obj_Smvts_EnquiryForm)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_EnquiryForm.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_ENQUIRYFORM @Operation = 'Select', @ENQUIRYFORM_ID ='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ENQUIRYFORM @Operation = 'Select'");
                break;


            default:
                break;
        }
        return dt;
    }


    public static bool set_EnquiryForm(SMVTS_ENQUIRYFORM _obj_Smvts_EnquiryForm)
    {
        bool status = false;
        switch (_obj_Smvts_EnquiryForm.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ENQUIRYFORM @Operation = 'Insert'"
                                  + ", @ENQUIRYFORM_NAME='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_NAME)
                                  + "', @ENQUIRYFORM_COMPANYNAME='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_COMPANYNAME)
                                  + "', @ENQUIRYFORM_DATETIME='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_DATETIME)
                                  + "', @ENQUIRYFORM_DESC='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_DESC)
                                  + "', @ENQUIRYFORM_EMAILID='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_EMAILID)
                                  + "', @ENQUIRYFORM_MOBILENO='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_MOBILENO)
                                  + "', @ENQUIRYFORM_WEBSITE='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_WEBSITE)
                                  + "', @ENQUIRYFORM_ADDRESS='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_ADDRESS)
                                  + "', @ENQUIRYFORM_FleetSize='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_ADDRESS)
                                  + "', @ENQUIRYFORM_Type_of_Bussiness='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_Type_of_Bussiness)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FUELINFO @Operation = 'Update',@ENQUIRYFORM_ID='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_ID)
                                   + ", @ENQUIRYFORM_NAME='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_NAME)
                                  + "', @ENQUIRYFORM_COMPANYNAME='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_COMPANYNAME)
                                  + "', @ENQUIRYFORM_DATETIME='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_DATETIME)
                                  + "', @ENQUIRYFORM_DESC='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_DESC)
                                  + "', @ENQUIRYFORM_EMAILID='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_EMAILID)
                                  + "', @ENQUIRYFORM_MOBILENO='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_MOBILENO)
                                  + "', @ENQUIRYFORM_WEBSITE='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_WEBSITE)
                                  + "', @ENQUIRYFORM_ADDRESS='" + Convert.ToString(_obj_Smvts_EnquiryForm.ENQUIRYFORM_ADDRESS)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    #endregion







    #region SMVTS_DemoRequest Methods
    /// <summary>
    /// 
    /// </summary>
    /// <param name="_obj_Smvts_DemoRequest"></param>
    /// <returns></returns>

    public static DataTable get_DemoRequest(SMVTS_DEMOREQUEST _obj_Smvts_DemoRequest)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_DemoRequest.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_DEMOREQUEST @Operation = 'Select', @DEMOREQUEST_ID ='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_DEMOREQUEST @Operation = 'Select'");
                break;

            default:
                break;
        }
        return dt;
    }


    public static bool set_DemoRequest(SMVTS_DEMOREQUEST _obj_Smvts_DemoRequest)
    {
        bool status = false;
        switch (_obj_Smvts_DemoRequest.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_DEMOREQUEST @Operation = 'Insert'"
                                 + ",  @DEMOREQUEST_REQUESTORNAME='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_REQUESTORNAME)
                                 + "', @DEMOREQUEST_COMPANYNAME='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_COMPANYNAME)
                                 + "', @DEMOREQUEST_DATETIME='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_DATETIME)
                                 + "', @DEMOREQUEST_EMAILID='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_EMAILID)
                                 + "', @DEMOREQUEST_MOBILENO='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_MOBILENO)
                                 + "', @DEMOREQUEST_WEBSITE='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_WEBSITE)
                                 + "', @DEMOREQUEST_ADDRESS='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_ADDRESS)
                                  + "', @DEMOREQUEST_FleetSize='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_FleetSize)
                                   + "', @DEMOREQUEST_Type_of_Bussiness='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_Type_of_Bussiness)
                                 + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_DEMOREQUEST @Operation = 'Insert'"
                                 + ",  @DEMOREQUEST_ID='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_ID)
                                 + ",  @DEMOREQUEST_REQUESTORNAME='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_REQUESTORNAME)
                                 + "', @DEMOREQUEST_COMPANYNAME='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_COMPANYNAME)
                                 + "', @DEMOREQUEST_DATETIME='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_DATETIME)
                                 + "', @DEMOREQUEST_EMAILID='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_EMAILID)
                                 + "', @DEMOREQUEST_MOBILENO='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_MOBILENO)
                                 + "', @DEMOREQUEST_WEBSITE='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_WEBSITE)
                                 + "', @DEMOREQUEST_ADDRESS='" + Convert.ToString(_obj_Smvts_DemoRequest.DEMOREQUEST_ADDRESS)
                                 + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    #endregion





    #region SMVTS_Feedback Methods
    /// <summary>
    /// 
    /// </summary>
    /// <param name="_obj_Smvts_DemoRequest"></param>
    /// <returns></returns>

    public static DataTable get_Feedback(SMVTS_FEEDBACK _obj_Smvts_Feedback)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Feedback.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_FEEDBACK @Operation = 'Select', @FEEDBACK_ID ='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_FEEDBACK @Operation = 'Select'");
                break;

            default:
                break;
        }
        return dt;
    }


    public static bool set_Feedback(SMVTS_FEEDBACK _obj_Smvts_Feedback)
    {
        bool status = false;
        switch (_obj_Smvts_Feedback.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FEEDBACK @Operation = 'Insert'"
                                 + ",  @FEEDBACK_NAME='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_NAME)
                                 + "', @FEEDBACK_DATETIME='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_DATETIME)
                                 + "', @FEEDBACK_EMAILID='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_EMAILID)
                                 + "', @FEEDBACK_MOBILENO='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_MOBILENO)
                                 + "', @FEEDBACK_DESC='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_DESC)
                                 + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_FEEDBACK @Operation = 'Insert'"
                                 + ",  @FEEDBACK_ID='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_ID)
                                 + ",  @FEEDBACK_NAME='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_NAME)
                                 + "', @FEEDBACK_DATETIME='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_DATETIME)
                                 + "', @FEEDBACK_EMAILID='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_EMAILID)
                                 + "', @FEEDBACK_MOBILENO='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_MOBILENO)
                                 + "', @FEEDBACK_DESC='" + Convert.ToString(_obj_Smvts_Feedback.FEEDBACK_DESC)
                                 + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }


    #endregion






    #region SMVTS_SharewithFriend Methods
    /// <summary>
    /// 
    /// </summary>
    /// <param name="_obj_Smvts_DemoRequest"></param>
    /// <returns></returns>

    public static DataTable get_ShareWithFreinds(SMVTS_SHAREWITHFRIEND _obj_Smvts_SharewithFriends)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_SharewithFriends.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_SHAREWITHFRIEND @Operation = 'Select', @DEMOREQUEST_ID ='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_SHAREWITHFRIEND @Operation = 'Select'");
                break;

            default:
                break;
        }
        return dt;
    }


    public static bool set_ShareWithFreinds(SMVTS_SHAREWITHFRIEND _obj_Smvts_SharewithFriends)
    {
        bool status = false;
        switch (_obj_Smvts_SharewithFriends.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SHAREWITHFRIEND @Operation = 'Insert'"
                                 + ",  @SHAREWITHFRIEND_FROMEMAILID='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_FROMEMAILID)
                                 + "', @SHAREWITHFRIEND_TOEMAILID='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_TOEMAILID)
                                 + "', @SHAREWITHFRIEND_DATE='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_DATE)
                                 + "', @SHAREWITHFRIEND_DESC='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_DESC)
                                 + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SHAREWITHFRIEND @Operation = 'Insert'"
                                 + ",  @SHAREWITHFRIEND_ID='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_ID)
                                 + ",  @SHAREWITHFRIEND_FROMEMAILID='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_FROMEMAILID)
                                 + "', @SHAREWITHFRIEND_TOEMAILID='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_TOEMAILID)
                                 + "', @SHAREWITHFRIEND_DATE='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_DATE)
                                 + "', @SHAREWITHFRIEND_DESC='" + Convert.ToString(_obj_Smvts_SharewithFriends.SHAREWITHFRIEND_DESC)
                                 + "'"))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }

    #endregion





    internal static DataTable get_ItrackStatus(string Operation, string VehicleNo, string StartDt, string EndDt, int UserId, string CategId)
    {
        DataTable dt_report = new DataTable();
        if (Operation == "0")
        {
            Operation = "PARAMETERS_STATUS";
        }
        dt_report = ExecuteQuery("EXEC RPT_SMVTS_TRACKINFO_ITRACK @USERID=" + UserId
                                                              + ",@RPT_DATE='" + StartDt + "',@STARTDATE='" + StartDt + "',@ENDATE='" + EndDt + "',@OPERATION='" + Operation + "',@DEVICEID=" + (VehicleNo == "0" ? "null" : "'" + VehicleNo + "'") + "");
        return dt_report;
    }

    internal static DataTable get_TyreInfo(SMVTS_TYREINFO _obj_tyrreinfo)
    {
        /* DataTable dt_report = new DataTable();

         dt_report = ExecuteQuery("EXEC USP_SMVTS_TYREINFO @TYRE_NOOFTYRES='"+_obj_tyrreinfo.TYREINFO_TYRENO+"',@OPERATION='FILLEMPTY_GRID'");
         return dt_report;*/


        DataTable dt_report = new DataTable();
        if (_obj_tyrreinfo.OPERATION == operation.Select)
        {
            dt_report = ExecuteQuery("EXEC USP_SMVTS_TYREINFO @TYREINFO_TYREID='" + _obj_tyrreinfo.TYREINFO_TYREID
                                            + "',@OPERATION='FILL_EDIT_GRID',@CATEGID='" + _obj_tyrreinfo.TYREINFO_CATEGID + "'");
        }
        else if (_obj_tyrreinfo.OPERATION == operation.Check)
        {
            dt_report = ExecuteQuery("EXEC USP_SMVTS_TYREINFO @OPERATION='CHECK_TYRES_SAVE',@CATEGID=" + _obj_tyrreinfo.TYREINFO_CATEGID);
        }
        else if (_obj_tyrreinfo.OPERATION == operation.Update)
        {
            dt_report = ExecuteQuery("EXEC USP_SMVTS_TYREINFO @OPERATION='CHECK_TYRES_UPDATE',@CATEGID=" + _obj_tyrreinfo.TYREINFO_CATEGID + ",@TYREINFO_TYREID=" + _obj_tyrreinfo.TYREINFO_TYREID);
        }
        else
        {

            dt_report = ExecuteQuery("EXEC USP_SMVTS_TYREINFO @TYRE_NOOFTYRES='" + _obj_tyrreinfo.TYREINFO_TYRENO + "',@OPERATION='FILLEMPTY_GRID'");

        }

        return dt_report;
    }

    internal static bool set_TyreInfo(SMVTS_TYREINFO _obj_tyrreinfo)
    {
        bool status = false;

        if (ExecuteNonQuery("EXEC USP_SMVTS_TYREINFO @OPERATION='INSERT',@TYREINFO_TYREID	='" + _obj_tyrreinfo.TYREINFO_TYREID
                                                                  + "', @TYREINFO_PLACEID='" + _obj_tyrreinfo.TYREINFO_PLACEID
                                                                  + "', @TYREINFO_TYRENO	='" + _obj_tyrreinfo.TYREINFO_TYRENO
                                                                  + "', @TYREINFO_GRADE	='" + _obj_tyrreinfo.TYREINFO_GRADE
                                                                  + "', @TYREINFO_FITTEDDATE='" + _obj_tyrreinfo.TYREINFO_FITTEDDATE
                                                                  + "', @TYREINFO_FITTEDREADING	='" + _obj_tyrreinfo.TYREINFO_FITTEDREADING
                                                                  + "',@TYREINFO_RUNKMS	='" + _obj_tyrreinfo.TYREINFO_RUNKMS
                                                                  + "',@TYREINFO_MAKE	='" + _obj_tyrreinfo.TYREINFO_MAKE + "'"))
        {
            status = true;
        }
        else
        {
            status = false;
        }
        return status;
    }

    internal static DataTable get_TyreMaster(SMVTS_TYREMASTER _objTyreMaster)
    {

        DataTable dt_report = new DataTable();


        switch (_objTyreMaster.OPERATION)
        {
            case operation.Check:
                dt_report = ExecuteQuery("EXEC USP_SMVTS_TYRE @OPERATION='CHECK_DEVICE', @TYRE_CATEGID='" + _objTyreMaster.CategId + "',@TYRE_DEVID='" + _objTyreMaster.DeviceId + "'");
                break;
        }

        return dt_report;
    }

    internal static DataTable setTyreMaster(SMVTS_TYREMASTER _objTyreMaster)
    {
        DataTable dt_report = new DataTable();

        switch (_objTyreMaster.OPERATION)
        {
            case operation.Insert:
                dt_report = ExecuteQuery("EXEC [USP_SMVTS_TYRE] @OPERATION='INSERT_TYREMASTER',@TYRE_CATEGID='" + _objTyreMaster.CategId
                                                                   + "',@TYRE_DEVID='" + _objTyreMaster.DeviceId
                                                                   + "',@NOOFTYRES='" + _objTyreMaster.NofTyres + "'");

                break;
            case operation.Update:
                dt_report = ExecuteQuery("EXEC [USP_SMVTS_TYRE] @OPERATION='UPDATE_TYREMASTER',@TYRE_CATEGID='" + _objTyreMaster.CategId
                                                               + "',@TYRE_DEVID='" + _objTyreMaster.DeviceId
                                                               + "',@NOOFTYRES='" + _objTyreMaster.NofTyres
                                                               + "',@TYRE_ID='" + _objTyreMaster.Tyre_Id + "'");

                break;


        }
        return dt_report;
    }

    internal static DataTable get_tyres(string categoryid)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("select *  FROM SMVTS_TYRE  where TYRE_STATUS=0 and TYRE_CATEGID=" + categoryid);
        return dt;
    }

    internal static bool setTyres(SMVTS_TYRE _objTyre)
    {
        bool status = false;
        switch (_objTyre.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC  [USP_SMVTS_TYREMASTER] @OPERATION='INSERT_TYRE', @TYRE_CATEGID="
                    + _objTyre.TYRE_CATEGORY_ID + ",@TYRE_NUMBER='"
                    + _objTyre.TYRE_NUMBER + "',@TYRE_MAKE='"
                    + _objTyre.TYRE_MAKE + "',@TYRE_STATUS=" + _objTyre.TYRE_STATUS))
                    status = true;
                else
                {
                    status = false;
                }
                break;
            case operation.Update:

                if (Dal.ExecuteNonQuery("EXEC  [USP_SMVTS_TYREMASTER] @OPERATION='UPDATE_TYRE', @TYRE_CATEGID="
                    + _objTyre.TYRE_CATEGORY_ID + ",@TYRE_NUMBER='"
                    + _objTyre.TYRE_NUMBER + "',@TYRE_MAKE='"
                    + _objTyre.TYRE_MAKE + "',@TYRE_STATUS=" + _objTyre.TYRE_STATUS + ",@TYRE_ID=" + _objTyre.TYRE_ID))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;



    }

    internal static DataTable getTyres(SMVTS_TYRE _objTyre)
    {
        DataTable dt = new DataTable();
        switch (_objTyre.OPERATION)
        {
            case operation.Select:
                dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_TYREMASTER] @OPERATION='SELECT',@TYRE_CATEGID=" + _objTyre.TYRE_CATEGORY_ID);
                break;
            case operation.Check:

                dt = Dal.ExecuteQuery("EXEC  [USP_SMVTS_TYREMASTER] @OPERATION='CHECK_TYRE',@TYRE_CATEGID=" + _objTyre.TYRE_CATEGORY_ID + ",@TYRE_NUMBER='" + _objTyre.TYRE_NUMBER + "',@TYRE_MAKE='" + _objTyre.TYRE_MAKE + "'");
                break;

            case operation.Empty:
                dt = Dal.ExecuteQuery("EXEC  [USP_SMVTS_TYREMASTER] @OPERATION='SELECT_TYRE',@TYRE_CATEGID=" + _objTyre.TYRE_CATEGORY_ID + ",@TYRE_ID=" + _objTyre.TYRE_ID);
                break;
        }
        return dt;
    }

    internal static void Storedt(DataTable dt)
    {
        Dal.ExecuteNonQuery("EXEC [USP_DGT_EXCELUPLOAD] @EXCELUPLOAD=" + dt);
    }

    internal static DataTable get_Routeremarks(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan)
    {
        DataTable dt = new DataTable();

        dt = Dal.ExecuteQuery("select * from SMVTS_TRIPREMARKS");
        return dt;
    }

    internal static DataTable getvehiclelasttripdate(SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_VEHICLEROUTE1] @OPERATION='LASTTRIP',@VEHROUTE_CATEGORY_ID=" + _obj_Smvts_RoutePlan.VEHROUTE_CATEGORY_ID + ",@VEHROUTE_DEVICE_ID=" + _obj_Smvts_RoutePlan.VEHROUTE_DEVICE_ID);
        return dt;
    }

    internal static DataTable get_ReportsData_Trips_static(string operation, string Landmark, string DevId, string fromDt, string toDt, string status, string userId, string model, string CategId)
    {

        DataTable dt_RptData = new DataTable();
        if (operation == "37")
        {
            dt_RptData = ExecuteQuery("EXEC [RPT_GHMC_CONSOLIDATEDTRIPS] @LAND_ID='" + Landmark + "', @DEVICEID =" + (DevId == string.Empty ? "null" : "'" + DevId + "'")
                                                                                  + ", @STARTDATE=" + (fromDt == string.Empty ? "null" : "'" + fromDt + "'") + ", @ENDDATE=" + (toDt == string.Empty ? "null" : "'" + toDt + "',@CATEGORYID='" + CategId + "',@VEHMODEL_ID='" + model
                                                                                  + "',@STATUS_BIT='" + status
                                                                                  + "',@USERID='" + userId
                                                                                  + "',@OPERATION='GETRPT_TABLE'"));
        }
        else
        {
            dt_RptData = ExecuteQuery("EXEC [RPT_GHMC_CONSOLIDATEDTRIPS] @LAND_ID='" + Landmark + "', @DEVICEID =" + (DevId == string.Empty ? "null" : "'" + DevId + "'")
                                                                                + ", @STARTDATE=" + (fromDt == string.Empty ? "null" : "'" + fromDt + "'") + ", @ENDDATE=" + (toDt == string.Empty ? "null" : "'" + toDt + "',@CATEGORYID='" + CategId + "',@VEHMODEL_ID='" + model
                                                                                + "',@STATUS_BIT='" + status
                                                                                + "',@USERID='" + userId
                                                                                + "',@OPERATION='DETAILED'"));
        }

        return dt_RptData;
    }

    internal static DataTable get_GridTrack_distance(SMVTS_GRIDTRACK _objGridTrack1, string userid)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE @USER_ID=" + userid);
        return dt;
    }

    internal static DataTable get_SarRouteplan(SMVTS_VEHICLES _objGridTrack2, string userid)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("exec USP_TRIP_REMARKS @OPERATION='TRIP_REPORT', @USERID=" + userid + ",@DEVID=" + _objGridTrack2.VEHICLES_DEVICE_ID);
        return dt;

    }

    internal static DataTable get_DhanushGridTrack(string p)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC USP_SMVTS_GRIDTRACK_DHANUSHDASHBOARD  @OPERAION = 'SELECTALL_AUDITING' , @USERID =1");
        return dt;
    }

    internal static DataTable get_GridTrack_TripStatus_DGT(string USER_ID, string CATEG_ID)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC SMVTS_TRIPSTATUS_DGT");
        return dt;
    }

    internal static DataTable getdgt_upload(SMVTS_DGTUPLOAD _OBJ_SMVTS_DGTUPLOAD)
    {
        DataTable dt = new DataTable();
        switch (_OBJ_SMVTS_DGTUPLOAD.OPERATION)
        {
            case operation.Select:
                dt = Dal.ExecuteQuery("EXEC SMVTS_USP_DGT_UPLAOD_ROUTE_PLAN @OPERATION='SELECT'");
                break;

            case operation.Check:
                dt = Dal.ExecuteQuery("EXEC SMVTS_USP_DGT_UPLAOD_ROUTE_PLAN @OPERATION='CHECK',@VEHICLENO='"
                    + _OBJ_SMVTS_DGTUPLOAD.VEHICLENO + "'");
                break;

            default:
                break;
        }
        return dt;
    }

    internal static bool setdgt_upload(SMVTS_DGTUPLOAD _OBJ_SMVTS_DGTUPLOAD)
    {

        bool status = false;
        switch (_OBJ_SMVTS_DGTUPLOAD.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC  [SMVTS_USP_DGT_UPLAOD_ROUTE_PLAN] @OPERATION='INSERT', @VEHICLENO='"
                    + _OBJ_SMVTS_DGTUPLOAD.VEHICLENO + "',@DRIVERNAME_CODE='"
                    + _OBJ_SMVTS_DGTUPLOAD.DRIVERNAME_CODE + "',@DRIVER_PHONENO='"
                    + _OBJ_SMVTS_DGTUPLOAD.DRIVER_PHONENO + "',@FORMAN='"
                    + _OBJ_SMVTS_DGTUPLOAD.FORMAN + "',@FROM_LOC='"
                    + _OBJ_SMVTS_DGTUPLOAD.FROM_LOC + "',@TO_LOC='"
                    + _OBJ_SMVTS_DGTUPLOAD.TO_LOC + "',@NATURE_OF_GOODS='"
                    + _OBJ_SMVTS_DGTUPLOAD.NATURE_OF_GOODS + "',@REACHED_DAY='"
                    + _OBJ_SMVTS_DGTUPLOAD.REACHED_DAY + "',@LOADING_DATE='"
                    + _OBJ_SMVTS_DGTUPLOAD.LOADING_DATE + "',@TRANSIT_TIME='"
                    + _OBJ_SMVTS_DGTUPLOAD.TRANSIT_TIME + "',@ZONE='"
                    + _OBJ_SMVTS_DGTUPLOAD.ZONE + "',@EXP_DATE_OF_DELIVERY='"
                    + _OBJ_SMVTS_DGTUPLOAD.EXP_DATE_OF_DELIVERY + "',@TOTAL_TRIP='"
                    + _OBJ_SMVTS_DGTUPLOAD.TOTAL_TRIP + "',@REPORTING_DATE='"
                    + _OBJ_SMVTS_DGTUPLOAD.REPORTING_DATE + "',@STATUS_OF_PLACE_ON_DATE='"
                    + _OBJ_SMVTS_DGTUPLOAD.STATUS_OF_PLACE_ON_DATE + "',@UNLOADING_DATE='"
                    + _OBJ_SMVTS_DGTUPLOAD.UNLOADING_DATE + "',@REMARK='"
                    + _OBJ_SMVTS_DGTUPLOAD.REMARK + "',@DELAY_DAYS='"
                    + _OBJ_SMVTS_DGTUPLOAD.DELAY_DAYS + "',@UPLOADED_DATE='"
                    + _OBJ_SMVTS_DGTUPLOAD.UPLOADED_DATE + "'"
                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
            case operation.Update:

                if (Dal.ExecuteNonQuery("EXEC  [SMVTS_USP_DGT_UPLAOD_ROUTE_PLAN] @OPERATION='UPDATE', @VEHICLENO='"
                     + _OBJ_SMVTS_DGTUPLOAD.VEHICLENO + "',@DRIVERNAME_CODE='"
                     + _OBJ_SMVTS_DGTUPLOAD.DRIVERNAME_CODE + "',@DRIVER_PHONENO='"
                     + _OBJ_SMVTS_DGTUPLOAD.DRIVER_PHONENO + "',@FORMAN='"
                     + _OBJ_SMVTS_DGTUPLOAD.FORMAN + "',@FROM_LOC='"
                     + _OBJ_SMVTS_DGTUPLOAD.FROM_LOC + "',@TO_LOC='"
                     + _OBJ_SMVTS_DGTUPLOAD.TO_LOC + "',@NATURE_OF_GOODS='"
                     + _OBJ_SMVTS_DGTUPLOAD.NATURE_OF_GOODS + "',@REACHED_DAY='"
                     + _OBJ_SMVTS_DGTUPLOAD.REACHED_DAY + "',@LOADING_DATE='"
                     + _OBJ_SMVTS_DGTUPLOAD.LOADING_DATE + "',@TRANSIT_TIME='"
                     + _OBJ_SMVTS_DGTUPLOAD.TRANSIT_TIME + "',@ZONE='"
                     + _OBJ_SMVTS_DGTUPLOAD.ZONE + "',@EXP_DATE_OF_DELIVERY='"
                     + _OBJ_SMVTS_DGTUPLOAD.EXP_DATE_OF_DELIVERY + "',@TOTAL_TRIP='"
                     + _OBJ_SMVTS_DGTUPLOAD.TOTAL_TRIP + "',@REPORTING_DATE='"
                     + _OBJ_SMVTS_DGTUPLOAD.REPORTING_DATE + "',@STATUS_OF_PLACE_ON_DATE='"
                     + _OBJ_SMVTS_DGTUPLOAD.STATUS_OF_PLACE_ON_DATE + "',@UNLOADING_DATE='"
                     + _OBJ_SMVTS_DGTUPLOAD.UNLOADING_DATE + "',@REMARK='"
                     + _OBJ_SMVTS_DGTUPLOAD.REMARK + "',@DELAY_DAYS='"
                     + _OBJ_SMVTS_DGTUPLOAD.DELAY_DAYS + "',@UPLOADED_DATE='"
                     + _OBJ_SMVTS_DGTUPLOAD.UPLOADED_DATE + "'"
                     ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;

    }

    internal static DataSet getCustomizableReport(string userId, string catgid, string VehicleNo, string StartDate, string EndDate, string Interval, string DBNAME)
    {
        //DataSet dt = new DataSet();
        //dt = ExecuteQueryDataset("EXEC RPT_CUSTOMIZED_ALLREPORTS @USERID ='" + userId + "',@CATEGORY_ID='" + catgid + "',@START_DATE ='" + StartDate + "',@END_DATE ='" + EndDate + "',@DEVICEID =" + (VehicleNo == string.Empty ? "null" : "'" + VehicleNo + "'") + ",@INTERVAL =" + (Interval == string.Empty ? "null" : "'" + VehicleNo + "'"));
        string QueryText = "EXEC RPT_CUSTOMIZED_ALLREPORTS @USERID ='" + userId + "',@CATEGORY_ID='" + catgid + "',@START_DATE ='" + StartDate + "',@END_DATE ='" + EndDate + "',@DEVICEID =" + (VehicleNo == string.Empty ? "null" : "'" + VehicleNo + "'") + ",@INTERVAL =" + (Interval == string.Empty ? "null" : "'" + VehicleNo + "'");
        string Connect = BLL.Decrypt(DBNAME);

        return SqlHelper.ExecuteDataset(Connect, CommandType.Text, QueryText);




    }

    internal static DataTable getAutoCompList_Routes(string prefixText)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("select * from SMVTS_ROUTEABBRIVATIONS where ROUTEABR_FROM like '%" + prefixText + "%' or ROUTEABR_FULLNAME like '%" + prefixText + "%'");
        return dt;

    }

    internal static DataTable get_pickupvehicles(SMVTS_SMSCONFIG _objSmscongifg)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC USP_SMVTS_PICKUP_VEHICLES @OPERATION='select'");
        //dt = Dal.ExecuteQuery("select * from SMVTS_ROUTEABBRIVATIONS where ROUTEABR_FROM like '%" + prefixText + "%' or ROUTEABR_FULLNAME like '%" + prefixText + "%'");
        return dt;

    }





    internal static DataTable get_assigngeofence_routes(string user_categoryid)
    {



        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_ROUTES_ASSIGNGEOFENCE] @OPERATION='SELECT',@ROUTES_ASSIGNGEOFENCE_CATEGORYID=" + user_categoryid);
        //dt = Dal.ExecuteQuery("select * from SMVTS_ROUTEABBRIVATIONS where ROUTEABR_FROM like '%" + prefixText + "%' or ROUTEABR_FULLNAME like '%" + prefixText + "%'");
        return dt;



    }

    internal static DataTable get_pickupvehicles(SMVTS_PICKUP_VEHICLES _obj_smvts_pickup_vehicles)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvts_pickup_vehicles.OPERATION)
        {
            case operation.Select:
                dt = Dal.ExecuteQuery("EXEC SMVTS_USP_DGT_UPLAOD_ROUTE_PLAN @OPERATION='SELECT'");
                break;

            case operation.Check:
                dt = Dal.ExecuteQuery("exec USP_SMVTS_PICKUP_VEHICLES @operation='check',@PICKUP_VEHICLES_ID='"
                    + _obj_smvts_pickup_vehicles.pickup_vehicles_id + "'");
                break;

            default:
                break;
        }
        return dt;
    }

    internal static bool set_pickup_vehicles(SMVTS_PICKUP_VEHICLES _obj_smvts_pickup_vehicles)
    {
        bool status = false;
        switch (_obj_smvts_pickup_vehicles.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_PICKUP_VEHICLES @OPERATION='INSERT', @PICKUP_VEHICLES_VEHICLENO='"
                    + _obj_smvts_pickup_vehicles.pickup_vehicle_number + "',@PICKUP_VEHICLES_ROUTEID='"
                    + _obj_smvts_pickup_vehicles.PICKUP_VEHICLES_ROUTEID + "',@PICKUP_VEHICLES_CATEGORYID='"
                    + _obj_smvts_pickup_vehicles.pickup_vehicles_categ_id + "',@PICKUP_VEHICLES_CREATEDDATE='"
                    + _obj_smvts_pickup_vehicles.pickup_created_date + "'"

                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
            case operation.Update:

                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_PICKUP_VEHICLES @OPERATION='UPDATE',@PICKUP_VEHICLES_ID='"
                    + _obj_smvts_pickup_vehicles.pickup_vehicles_id + "', @PICKUP_VEHICLES_VEHICLENO='"
                    + _obj_smvts_pickup_vehicles.pickup_vehicle_number + "',@PICKUP_VEHICLES_ROUTEID='"
                    + _obj_smvts_pickup_vehicles.PICKUP_VEHICLES_ROUTEID + "',@PICKUP_VEHICLES_CATEGORYID='"
                    + _obj_smvts_pickup_vehicles.pickup_vehicles_categ_id + "',@PICKUP_VEHICLES_CREATEDDATE='"
                    + _obj_smvts_pickup_vehicles.pickup_created_date + "'"

                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;

    }

    internal static DataTable get_abhitripstatusgrid(SMVTS_DGTUPLOAD _obj_smvts_dgtupload)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvts_dgtupload.OPERATION)
        {
            case operation.Select:
                dt = Dal.ExecuteQuery("EXEC tripstatus_abhi_grid @OPERATION='SELECT'");
                break;


            case operation.Check:
                dt = Dal.ExecuteQuery("EXEC tripstatus_abhi_grid @OPERATION='check',@vehiclenumber='" + _obj_smvts_dgtupload.VEHICLENO + "'");
                break;

            case operation.Empty:
                dt = Dal.ExecuteQuery("EXEC tripstatus_abhi_grid @OPERATION='select_vehicle',@startdate='"
                    + _obj_smvts_dgtupload.STARTDATE + "',@enddate='"
                    + _obj_smvts_dgtupload.ENDDATE + "',@vehiclenumber='" + _obj_smvts_dgtupload.VEHICLENO + "'");
                break;

            default:
                break;
        }
        return dt;
    }





    internal static bool set_abhitripstatusgrid(SMVTS_DGTUPLOAD _obj_smvts_dgtupload)
    {
        bool status = false;
        switch (_obj_smvts_dgtupload.OPERATION)
        {

            case operation.Update:

                if (Dal.ExecuteNonQuery("EXEC tripstatus_abhi_grid @OPERATION='edit', @vehiclenumber='"
                    + _obj_smvts_dgtupload.VEHICLENO + "',@Driver_name='"
                    + _obj_smvts_dgtupload.DRIVERNAME_CODE + "',@phone_no='"
                    + _obj_smvts_dgtupload.DRIVER_PHONENO + "',@From_loc='"
                    + _obj_smvts_dgtupload.FROM_LOC + "',@To_loc='"
                    + _obj_smvts_dgtupload.TO_LOC + "',@Natureofgoods='"
                    + _obj_smvts_dgtupload.NATURE_OF_GOODS + "',@Loadingdate='"
                    + _obj_smvts_dgtupload.LOADING_DATE + "',@reachingdate='"
                    + _obj_smvts_dgtupload.REACHED_DAY + "',@reportingdate='"
                    + _obj_smvts_dgtupload.REPORTING_DATE + "',@unloading_date='"
                    + _obj_smvts_dgtupload.UNLOADING_DATE + "',@Delaydays='"
                    + _obj_smvts_dgtupload.DELAY_DAYS + "',@Remarks='"
                    + _obj_smvts_dgtupload.REMARK + "'"

                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;

    }






    internal static DataTable getnearest_tripstatus(StringBuilder linesSB)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC smvts_getnearest_tripstatus @OPERATION='SELECT',@vehicles='" + linesSB + "'");
        return dt;

    }

    internal static DataTable getrouteabbrevations(SMVTS_ROUTEABBR _obj_smvts_routeabbr)
    {
        //USPSMVTS_ROUTEABBRIVATIONS

        DataTable dt = new DataTable();
        switch (_obj_smvts_routeabbr.OPERATION)
        {
            case operation.Select:

                dt = Dal.ExecuteQuery("EXEC USP_SMVTS_ROUTEABBRIVATIONS @OPERATION='SELECT'");
                break;

            case operation.Check:

                dt = Dal.ExecuteQuery("EXEC USP_SMVTS_ROUTEABBRIVATIONS @OPERATION='CHECK',@ROUTEABR_ID='" + _obj_smvts_routeabbr.Routeabr_id + "'");
                break;

            default:
                break;


        }
        return dt;
    }


    internal static bool set_routeabbrevation(SMVTS_ROUTEABBR _obj_smvts_routeabbr)
    {
        bool status = false;
        switch (_obj_smvts_routeabbr.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_ROUTEABBRIVATIONS @OPERATION='INSERT', @ROUTEABR_CATEGID='"
                    + _obj_smvts_routeabbr.USERS_CATEGORY_ID + "',@ROUTEABR_FROM='"
                    + _obj_smvts_routeabbr.Route_from + "',@ROUTEABR_FULLNAME='"
                    + _obj_smvts_routeabbr.Route_fullname + "',@ROUTEABR_ZONE='"
                    + _obj_smvts_routeabbr.Zone + "'"

                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
            case operation.Update:

                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_ROUTEABBRIVATIONS @OPERATION='INSERT', @ROUTEABR_CATEGID='"
                     + _obj_smvts_routeabbr.USERS_CATEGORY_ID + "',@ROUTEABR_FROM='"
                     + _obj_smvts_routeabbr.Route_from + "',@ROUTEABR_FULLNAME='"
                     + _obj_smvts_routeabbr.Route_fullname + "',@ROUTEABR_ZONE='"
                     + _obj_smvts_routeabbr.Zone + "',@ROUTEABR_ID='"
                     + _obj_smvts_routeabbr.Routeabr_id + "'"

                     ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;

    }

    internal static DataTable get_Accidentvehicles(SMVTS_ACCIDENTVEHICLES _obj_accidentvehicles)
    {

        DataTable dt = new DataTable();
        switch (_obj_accidentvehicles.OPERATION)
        {
            case operation.Select:

                dt = Dal.ExecuteQuery("EXEC USP_SMVTS_ACCIDENT_VEHICLES @OPERATION='SELECT'");
                break;

            case operation.Check:

                dt = Dal.ExecuteQuery("EXEC USP_SMVTS_ACCIDENT_VEHICLES @OPERATION='CHECK',@ACCIDENTVEHICLE_ID='" + _obj_accidentvehicles.ACCIDENTVEHICLE_ID + "'");
                break;

            default:
                break;


        }
        return dt;
    }
    internal static DataTable getassociateduserid(string userid)
    {

        DataTable dt = new DataTable();

        dt = Dal.ExecuteQuery("EXEC USP_SMVTS_ASSOCIATED_GRID @USERID='" + userid + "'");
        return dt;

    }

    internal static bool setaccidentvehicles(SMVTS_ACCIDENTVEHICLES _obj_accidentvehicles)
    {


        bool status = false;
        switch (_obj_accidentvehicles.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_ACCIDENT_VEHICLES @OPERATION='INSERT',@ACCIDENTVEHICLE_DEVICE_ID='"
                    + _obj_accidentvehicles.ACCIDENTVEHICLE_DEVICE_ID + "',@ACCDIDENTVEHICLE_CATEGORY='"
                    + _obj_accidentvehicles.ACCIDENTVEHICLE_CATEGORYID + "',@ACCIDENTVEHICLE_DATE='"
                    + _obj_accidentvehicles.ACCIDENTVEHICLE_DATE + "',@ACCIDENTVEHICLE_UPDATEDDATE='"
                    + _obj_accidentvehicles.ACCIDENTVEHICLE_UPDATEDDATE + "',@ACCIDENTVEHICLE_MODIFIED_DATE='"
                    + _obj_accidentvehicles.ACCIDENTVEHICLE_MODIFIED_DATE + "',@ACCIDENTVEHICLE_STATUS='"
                    + _obj_accidentvehicles.ACCIDENTVEHICLE_STATUS
                    + "'"

                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
            case operation.Update:

                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_ACCIDENT_VEHICLES @OPERATION='UPDATE', @ACCIDENTVEHICLE_ID='"
                   + _obj_accidentvehicles.ACCIDENTVEHICLE_ID + "',@ACCIDENTVEHICLE_DEVICE_ID='"
                   + _obj_accidentvehicles.ACCIDENTVEHICLE_DEVICE_ID + "',@ACCDIDENTVEHICLE_CATEGORY='"
                   + _obj_accidentvehicles.ACCIDENTVEHICLE_CATEGORYID + "',@ACCIDENTVEHICLE_DATE='"
                   + _obj_accidentvehicles.ACCIDENTVEHICLE_DATE + "',@ACCIDENTVEHICLE_UPDATEDDATE='"
                   + _obj_accidentvehicles.ACCIDENTVEHICLE_UPDATEDDATE + "',@ACCIDENTVEHICLE_MODIFIED_DATE='"
                   + _obj_accidentvehicles.ACCIDENTVEHICLE_MODIFIED_DATE + "',@ACCIDENTVEHICLE_STATUS='"
                   + _obj_accidentvehicles.ACCIDENTVEHICLE_STATUS
                   + "'"

                   ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;

    }

    internal static DataTable getzonewisereport(string id, string USERid)
    {
        DataTable dt = new DataTable();
        if (id == "DRIVER")
        {
            dt = Dal.ExecuteQuery("EXEC RPT_DRIVERZONE_VEHCOUNT");
        }
        else
        {

            dt = Dal.ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_ZONES @USER_ID=" + USERid + "");
        }
        return dt;
    }

    internal static DataTable get_fuelcalibration(SMVTS_FUELCALIBRATION _obj_fuel)
    {
        DataTable dt = new DataTable();
        switch (_obj_fuel.OPERATION)
        {
            case operation.SelectAll:
                if (_obj_fuel.FUEL_ID > 0)
                    dt = Dal.ExecuteQuery("EXEC USP_SMVTS_FUELCALIBRATION @OPERATION='SelectAll',@FUEL_ID='" + _obj_fuel.FUEL_ID + "'");
                //else
                //dt=ExecuteQuery ("select SMVTS_VEHICLES.VEHICLES_REGNUMBER,SMVTS_FUELCALIBRATION.* from SMVTS_FUELCALIBRATION(nolock)inner join SMVTS_VEHICLES(nolock)on SMVTS_FUELCALIBRATION.FUEL_DEVICEID=SMVTS_VEHICLES.VEHICLES_DEVICE_ID ");
                // dt = ExecuteQuery("select * from SMVTS_FUELCALIBRATION(nolock)");
                break;

            case operation.Select:

                dt = Dal.ExecuteQuery("EXEC USP_SMVTS_FUELCALIBRATION @OPERATION='select'");
                break;

            default:
                break;


        }
        return dt;
    }

    internal static bool set_fuelcalibration(SMVTS_FUELCALIBRATION _obj_fuel)
    {
        bool status = false;
        switch (_obj_fuel.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_FUELCALIBRATION @OPERATION='Insert', @FUEL_DEVICEID='"
                    + _obj_fuel.FUEL_DEVICEID + "',@FUEL_VOLTAGE='" + _obj_fuel.FUEL_VOLTAGE + "', @FUEL_PERCENTAGE='"
                    + _obj_fuel.FUEL_PERCENTAGE + "', @FUEL_STATUS='" + _obj_fuel.FUEL_STATUS + "', @FUEL_CREATEDBY='"
                    + _obj_fuel.FUEL_CREATEDBY + "', @FUEL_CREATEDDATE='" + _obj_fuel.FUEL_CREATEDDATE + "',@FUEL_MODIFIEDBY='"
                    + _obj_fuel.FUEL_MODIFIEDBY + "', @FUEL_MODIFIEDDATE='" + _obj_fuel.FUEL_MODIFIEDDATE + "'"
                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
            case operation.Update:

                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_FUELCALIBRATION @OPERATION='Update',@FUEL_ID='" + _obj_fuel.FUEL_ID + "', @FUEL_DEVICEID='"
                    + _obj_fuel.FUEL_DEVICEID + "',@FUEL_VOLTAGE='" + _obj_fuel.FUEL_VOLTAGE + "', @FUEL_PERCENTAGE='"
                    + _obj_fuel.FUEL_PERCENTAGE + "', @FUEL_STATUS='" + _obj_fuel.FUEL_STATUS + "', @FUEL_CREATEDBY='"
                    + _obj_fuel.FUEL_CREATEDBY + "', @FUEL_CREATEDDATE='" + _obj_fuel.FUEL_CREATEDDATE + "',@FUEL_MODIFIEDBY='"
                    + _obj_fuel.FUEL_MODIFIEDBY + "', @FUEL_MODIFIEDDATE='" + _obj_fuel.FUEL_MODIFIEDDATE + "'"
                     ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;
    }

    internal static DataTable get_Vehicles(SMVTS_FUELCALIBRATION _obj_fuel)
    {
        DataTable dt = new DataTable();
        //dt = ExecuteQuery("select SMVTS_VEHICLES.VEHICLES_REGNUMBER,SMVTS_FUELCALIBRATION.* from SMVTS_FUELCALIBRATION(nolock)inner join SMVTS_VEHICLES(nolock)on SMVTS_FUELCALIBRATION.FUEL_DEVICEID=SMVTS_VEHICLES.VEHICLES_DEVICE_ID ");
        dt = ExecuteQuery("EXEC USP_SMVTS_VEHICLES @operation='select' ,@VEHICLES_CATEGORY_ID= '" + _obj_fuel.FUEL_CATEGORYID + "'");
        return dt;
    }

    internal static DataTable get_associated(SMVTS_ASSOCIATED _obj_smvts_associated)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("SELECT distinct USERS_ID,USERS_USERNAME FROM SMVTS_ASSCGRID(NOLOCK) INNER JOIN SMVTS_USERS(NOLOCK) ON USERS_ID=ASSOCGRID_USERID WHERE ASSOCGRID_PARENT_USERID='" + _obj_smvts_associated.associated + "'");
        return dt;
    }

    internal static DataTable get_MONITERROUTES(SMVTS_ROUTES _obj_Smvts_Routes)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Routes.OPERATION)
        {
            case operation.SelectAll: dt = ExecuteQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION='SELECT_SOURCE',@MR_CATEID='" + _obj_Smvts_Routes.ROUTES_CATEGORY_ID + "'");

                break;
        }
        return dt;

    }

    internal static DataTable get_MONITERROUTES(SMVTS_MONITERROUTES _OBJ_SMVTS_MONITERROUTES)
    {
        DataTable dt = new DataTable();
        switch (_OBJ_SMVTS_MONITERROUTES.OPERATION)
        {
            //case operation.SelectAll:
            //    dt = ExecuteQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION='SELECT_ALLFORMS'");
            //break;
            case operation.select:
                if (Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CATEID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION = 'select',@MR_CATEID ='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CATEID) + "'");
                else
                    dt = ExecuteQuery("EXEC [USP_SMVTS_MONITERROUTES] @OPEARATION = 'select',  @MR_ID ='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_ID) + "'");

                break;

            case operation.Select:
                if (Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_ID) == "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION = 'Select_id'");
                else
                    dt = ExecuteQuery("EXEC [USP_SMVTS_MONITERROUTES] @OPEARATION = 'Select_id',  @MR_ID ='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_ID) + "'");

                break;
            case operation.Check:
                //if (Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_ID) == "0")
                dt = ExecuteQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION = 'Check', @MR_CATEID ='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CATEID) + "'");
                //else
                //    dt = ExecuteQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION = 'Check', @MR_CATEID ='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CATEID) + "'");
                break;
            default:
                break;
        }
        return dt;
    }


    internal static bool set_MONITERROUTES(SMVTS_MONITERROUTES _OBJ_SMVTS_MONITERROUTES)
    {
        bool status = false;
        switch (_OBJ_SMVTS_MONITERROUTES.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION = 'Insert' , @MR_CATEID ='" + (_OBJ_SMVTS_MONITERROUTES.MR_CATEID)
                                  + "', @MR_ROUTENAME ='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_ROUTENAME)
                                  + "', @MR_STATUS ='" + (_OBJ_SMVTS_MONITERROUTES.MR_STATUS)
                                  + "', @MR_CREATEDBY= '" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CREATEDBY)
                                  + "', @MR_CREATEDDATE='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CREATEDDATE)
                                  + "', @MR_MODIFIEDBY = '" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_MODIFIEDBY)
                                  + "', @MR_MODIFIEDDATE='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_MODIFIEDDATE) + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_MONITERROUTES @OPEARATION = 'Update' , @MR_ID='" + _OBJ_SMVTS_MONITERROUTES.MR_ID
                                  + "', @MR_CATEID ='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CATEID)
                                  + "', @MR_ROUTENAME ='" + (_OBJ_SMVTS_MONITERROUTES.MR_ROUTENAME)
                                  + "', @MR_STATUS ='" + (_OBJ_SMVTS_MONITERROUTES.MR_STATUS)
                                  + "', @MR_CREATEDBY= '" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CREATEDBY)
                                  + "', @MR_CREATEDDATE='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_CREATEDDATE)
                                  + "', @MR_MODIFIEDBY = '" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_MODIFIEDBY)
                                  + "', @MR_MODIFIEDDATE='" + Convert.ToString(_OBJ_SMVTS_MONITERROUTES.MR_MODIFIEDDATE)
                                  + "'"))
                    status = true;
                break;


            default:
                break;
        }
        return status;

    }

    internal static DataSet get_GeoZoneDashboard2(string userid, string lat, string lng, int radius, string categid, string citylat, string citylng, int cityradius, string operation, string DBNAME, int landmarkid)
    {
        string strConn = BLL.Decrypt(DBNAME);
        DataSet dt = new DataSet();
        string query = "EXEC USP_GETGEOZONEDASHBOARD3 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@statelat='" + citylat + "',@statelong='" + citylng + "',@stateradius='" + cityradius + "',@landmarkid='" + landmarkid + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }
    internal static DataSet get_Georouteviolation(string userid, string lat, string lng, int radius, string categid, string citylat, string citylng, int cityradius, string operation, string DBNAME)
    {
        string strConn = BLL.Decrypt(DBNAME);
        DataSet dt = new DataSet();
        string query = "EXEC USP_ROUTEVIOLATION_KML @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@statelat='" + citylat + "',@statelong='" + citylng + "',@stateradius='" + cityradius + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }
    internal static DataSet get_GeoZoneDashboard_triple(string userid, string lat, string lng, int radius, string categid, string citylat, string citylng, int cityradius, string operation, string DBNAME)
    {
        string strConn = BLL.Decrypt(DBNAME);
        DataSet dt = new DataSet();
        //string query = "EXEC USP_GETGEOZONEDASHBOARD2 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@statelat='" + citylat + "',@statelong='" + citylng + "',@stateradius='" + cityradius + "'";
        string query = "EXEC USP_GETGEOZONEDASHBOARD2 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }
    internal static DataSet get_GeoZoneDashboard3(string userid, string lat, string lng, int radius, string categid, string citylat, string citylng, int cityradius, string operation, string statelat, string statelong, int stateradius, int landmarkid, string dbname)
    {
        string strConn = BLL.Decrypt(dbname);
        DataSet dt = new DataSet();
        string query = "EXEC USP_GETGEOZONEDASHBOARD3 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@statelat='" + statelat + "',@statelong='" + statelong + "',@stateradius='" + stateradius + "',@landmarkid='" + landmarkid + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }

    internal static DataSet get_GeoZoneDashboardTglobal3(string userid, string lat, string lng, int radius, string categid, string citylat, string citylng, int cityradius, string operation, string statelat, string statelong, int stateradius, int landmarkid, string dbname)
    {
        string strConn = BLL.Decrypt(dbname);
        DataSet dt = new DataSet();
        string query = "EXEC USP_GETGEOZONEDASHBOARDTglobal3 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@statelat='" + statelat + "',@statelong='" + statelong + "',@stateradius='" + stateradius + "',@landmarkid='" + landmarkid + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }

    internal static DataSet get_GeoZoneDashboard(string userid, string lat, string lng, int radius, string categid, string DBNAME)
    {
        string strConn = BLL.Decrypt(DBNAME);
        DataSet dt = new DataSet();
        string query = "EXEC USP_GETGEOZONEDASHBOARD @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }
    internal static DataSet get_GeoZoneDashboard_kml(string userid, string lat, string lng, string categid, string DBNAME)
    {
        string strConn = BLL.Decrypt(DBNAME);
        DataSet dt = new DataSet();
        string query = "EXEC USP_ROUTEVIOLATION_KML1 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@CATEGID='" + categid + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }


    internal static DataTable get_BRIEFING(SMVTS_DRIVERS _OBJ_DRIVERS)
    {
        DataTable dt = new DataTable();
        switch (_OBJ_DRIVERS.OPERATION)
        {
            case operation.select:

                dt = ExecuteQuery("SELECT DRIVER_ID,DRIVER_NAME,DRIVER_CATEGORY_ID,CATEG_ID,CATEG_NAME,CATEG_DESC,CASE DRIVER_STATUS WHEN 1 THEN 'Active' WHEN 0 THEN 'Inactive' END AS DRIVER_STATUS,CATEG_STATUS FROM SMVTS_DRIVERS(NOLOCK)inner join SMVTS_CATEGORIES on DRIVER_CATEGORY_ID =CATEG_ID  where DRIVER_CATEGORY_ID='" +
                    _OBJ_DRIVERS.DRIVER_CATEGORY_ID + "' and DRIVER_STATUS=1 and DRIVER_NAME like'%" + _OBJ_DRIVERS.DRIVER_NAME + "%' ");

                break;
            default:
                break;

        }
        return dt;
    }



    internal static bool set_registrationbriefing(SMVTS_REGISTRATIONBRIEFING _OBJ)
    {
        bool status = false;
        switch (_OBJ.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_BRIEFING @OPERATION = 'INSERT' , @BRIEFINGDRIVERID='" + _OBJ.BRIEFING_DRIVERID
                                  + "',@BRIEFINGTRIPID ='" + _OBJ.BRIEFING_TRIPID + "',@BRIEFINGCATEGORYID ='" + _OBJ.BRIEFING_CATEGORYID
                                  + "',@BRIEFINGTRANSPORTERNAME='" + _OBJ.BRIEFING_TRANSPORTERNAME + "',@BRIEFINGCLEANERPASSPORT='" + _OBJ.BRIEFING_CLEANERPASSPORTID
                                  + "',@BRIEFINGCLEANERNAME ='" + _OBJ.BRIEFING_CLEANERNAME + "',@BRIEFINGTRIPSTARTPLACE='" + _OBJ.BRIEFING_TRIPSTARTPLACE
                                  + "',@BRIEFINGTRIPENDPLACE ='" + _OBJ.BRIEFING_TRIPENDPLACE + "',@briefingvehicles ='" + _OBJ.briefing_vehicles + "',@BRIEFINGCONTRACTDELIVERYDATE='" + _OBJ.BRIEFING_CONTRACRDELIVERYDATE
                                  + "',@BRIEFINGSAVEDATE ='" + _OBJ.BRIEFING_SAVEDATE + "',@BRIEFINGMODEOFBRIEFING='" + _OBJ.BRIEFING_MODEOFBRIEFING + "',@BRIEFINGMODEOFMAIL='" + _OBJ.BRIEFING_MAIL + "',@BRIEFINGSTATUS='" + _OBJ.BRIEFING_STATUS
                                  + "',@DRIVER_MOBILENO ='" + _OBJ.briefing_mobileno
                                  + "',@BRIEFINGCREATEDBY ='" + _OBJ.BRIEFING_CREATEDBY + "',@BRIEFINGCREATEDDATE='" + _OBJ.BRIEFING_CREATEDDATE + "',@BRIEFINGMODIFIEDBY='" + _OBJ.BRIEFING_MODIFIEDBY
                                  + "',@BRIEFINGMODIFIEDDATE='" + _OBJ.BRIEFING_MODIFIEDDATE + "'"))

                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataTable get_REGISTRATIONBRIEFING(SMVTS_REGISTRATIONBRIEFING _OBJ)
    {
        DataTable dt = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_BRIEFING @OPEARATION = 'Check', @BRIEFINGCATEGORYID ='" + Convert.ToString(_OBJ.BRIEFING_CATEGORYID) + "'");
                break;
            default:
                break;

        }
        return dt;
    }




    internal static DataTable GET_LOADHISTORY(SMVTS_BRIEFING _OBJ)
    {
        DataTable dt1 = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.select:
                dt1 = ExecuteQuery("SELECT* FROM SMVTS_BRIEFING(NOLOCK) INNER JOIN SMVTS_DRIVERHISTORY(NOLOCK) ON  BRIEFING_DRIVERID=DRIVERHISTORY_DRIVERID WHERE DRIVERHISTORY_DRIVERID='" + _OBJ.BRIEFING_DRIVERID + "'");

                break;
            default:
                break;

        }
        return dt1;

    }


    internal static DataTable GET_training(SMVTS_DRIVERS _obj)
    {
        DataTable dt2 = new DataTable();
        switch (_obj.OPERATION)
        {
            case operation.select:
                dt2 = ExecuteQuery("SELECT * FROM SMVTS_DRIVERS INNER JOIN SMVTS_DRIVERTRAININGDETAILS ON DRIVER_ID=DRIVERTRAINING_DRIVERID WHERE DRIVER_ID='" + _obj.DRIVER_ID + "'");


                break;
            default:
                break;

        }
        return dt2;
    }

    internal static DataTable GET_medical(SMVTS_DRIVERS _obj)
    {

        DataTable dt3 = new DataTable();
        switch (_obj.OPERATION)
        {
            case operation.select:
                dt3 = ExecuteQuery(" SELECT * FROM SMVTS_DRIVERS INNER JOIN SMVTS_DRIVERMEDICALDETAILS ON DRIVER_ID=DRIVERMEDICAL_DRIVERID WHERE DRIVER_ID='" + _obj.DRIVER_ID + "'");



                break;
            default:
                break;

        }
        return dt3;
    }

    internal static DataTable get_incentive(SMVTS_DRIVERS _OBJ_DRIVERS)
    {
        DataTable dt4 = new DataTable();
        switch (_OBJ_DRIVERS.OPERATION)
        {
            case operation.select:
                dt4 = ExecuteQuery("SELECT * FROM SMVTS_DRIVERS INNER JOIN SMVTS_DRIVERINCENTIVE ON DRIVER_ID=DRIVERINCENTIVE_DRIVERID INNER JOIN SMVTS_BRIEFING ON BRIEFING_TRIPID=DRIVERINCENTIVE_TRIPID WHERE DRIVERINCENTIVE_DRIVERID=204");

                break;
            default:
                break;

        }
        return dt4;
    }

    internal static DataTable Get_Details(SMVTS_DRIVERS _OBJ_DRIVERS)
    {
        DataTable dt5 = new DataTable();
        switch (_OBJ_DRIVERS.OPERATION)
        {
            case operation.select:
                dt5 = ExecuteQuery("SELECT TOP(1)* FROM SMVTS_DRIVERS INNER JOIN SMVTS_BRIEFING ON DRIVER_ID=BRIEFING_DRIVERID WHERE DRIVER_ID='" + _OBJ_DRIVERS.DRIVER_ID + "'");


                break;
            default:
                break;

        }
        return dt5;
    }

    internal static DataTable Get_message(SMVTS_DRIVERS _OBJ_DRIVERS)
    {
        DataTable dt6 = new DataTable();
        switch (_OBJ_DRIVERS.OPERATION)
        {
            case operation.select:
                dt6 = ExecuteQuery("SELECT * FROM SMVTS_DRIVERS INNER JOIN SMVTS_CAUTIONMESSAGES ON DRIVER_ID=CAUTIONMESSAGE_DRIVERID WHERE DRIVER_ID='" + _OBJ_DRIVERS.DRIVER_ID + "'");


                break;
            default:
                break;

        }
        return dt6;
    }

    internal static DataTable get_fatigue(SMVTS_BRIEFING _OBJ)
    {
        DataTable dt7 = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.select:
                dt7 = ExecuteQuery("SELECT HR24_DATE,HR24_VEHICLES_REGNUMBER,HR24_TOTALRUNNINGTIME,HR24_ACTUALKMS FROM SMVTS_24HOURANALYSIS(NOLOCK) WHERE HR24_DATE>=DATEADD(day, -7, getdate())AND HR24_VEHICLES_REGNUMBER IN (select TOP 1 briefing_vehicles from SMVTS_BRIEFING(nolock) where BRIEFING_ID='" + _OBJ.BRIEFING_ID + "')");


                break;
            default:
                break;

        }
        return dt7;
    }

    internal static object get_incidentsharing(smvts_incidentsharing _obj_incidentsharing)
    {
        DataTable dt7 = new DataTable();
        switch (_obj_incidentsharing.OPERATION)
        {
            case operation.select:
                dt7 = ExecuteQuery("select * from SMVTS_INCIDENTSHARING where INCIDENTSHARING_DRIVERID='" + _obj_incidentsharing.INCIDENTSHARING_DRIVERID + "'");

                break;
            default:
                break;

        }
        return dt7;
    }



    internal static DataTable get_tripid(SMVTS_REGISTRATIONBRIEFING _OBJ)
    {
        DataTable dt = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.select:
                dt = ExecuteQuery("EXEC USP_SMVTS_BRIEFING @OPERATION = 'Check', @BRIEFINGCATEGORYID ='" + Convert.ToString(_OBJ.BRIEFING_CATEGORYID) + "',@BRIEFINGTRIPID='" + _OBJ.BRIEFING_TRIPID + "'");

                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable get_incentive(SMVTS_BRIEFING _OBJ)
    {
        DataTable dt4 = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.select:
                dt4 = ExecuteQuery("SELECT * FROM SMVTS_DRIVERS INNER JOIN SMVTS_DRIVERINCENTIVE ON DRIVER_ID=DRIVERINCENTIVE_DRIVERID INNER JOIN SMVTS_BRIEFING ON BRIEFING_TRIPID=DRIVERINCENTIVE_TRIPID WHERE DRIVERINCENTIVE_DRIVERID=204");

                break;
            default:
                break;

        }
        return dt4;
    }

    internal static DataTable GET_training(SMVTS_BRIEFING _OBJ)
    {

        DataTable dt = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.select:
                dt = ExecuteQuery("select * from SMVTS_BRIEFING(nolock) inner join SMVTS_DRIVERTRAININGDETAILS(nolock) on BRIEFING_DRIVERID=DRIVERTRAINING_DRIVERID where DRIVERTRAINING_DRIVERID='" + _OBJ.BRIEFING_DRIVERID + "' and DRIVERTRAINING_STATUS=1 ");
                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable GET_medical(SMVTS_BRIEFING _OBJ)
    {

        DataTable dt = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.select:
                dt = ExecuteQuery("select * from SMVTS_BRIEFING(nolock) inner join SMVTS_DRIVERMEDICALDETAILS(nolock) on BRIEFING_DRIVERID=DRIVERMEDICAL_DRIVERID where DRIVERMEDICAL_DRIVERID='" + _OBJ.BRIEFING_DRIVERID + "' and DRIVERMEDICAL_STATUS=1  ");
                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable GET_caution(SMVTS_BRIEFING _OBJ)
    {
        DataTable dt = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.select:
                dt = ExecuteQuery(" select * from SMVTS_BRIEFING(nolock) inner join SMVTS_CAUTIONMESSAGES on BRIEFING_DRIVERID=CAUTIONMESSAGE_DRIVERID where CAUTIONMESSAGE_DRIVERID='" + _OBJ.BRIEFING_DRIVERID + "'  AND CAUTIONMESSAGE_STATUS=1  ");

                break;
            default:
                break;

        }
        return dt;
    }



    internal static DataTable get_DeBRIEFING(SMVTS_DRIVERS _OBJ_DRIVERS)
    {
        DataTable dt = new DataTable();
        switch (_OBJ_DRIVERS.OPERATION)
        {
            case operation.select:

                dt = ExecuteQuery("SELECT DRIVER_ID,DRIVER_NAME,DRIVER_CATEGORY_ID,CATEG_ID,CATEG_NAME,CATEG_DESC,CASE DRIVER_STATUS WHEN 1 THEN 'Active' WHEN 0 THEN 'Inactive' END AS DRIVER_STATUS,CATEG_STATUS FROM SMVTS_DRIVERS(NOLOCK)inner join SMVTS_CATEGORIES on DRIVER_CATEGORY_ID =CATEG_ID  where DRIVER_CATEGORY_ID='" +
                    _OBJ_DRIVERS.DRIVER_CATEGORY_ID + "' and DRIVER_STATUS=1 and DRIVER_NAME like'%" + _OBJ_DRIVERS.DRIVER_NAME + "%' ");

                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable get_briefingsaved(SMVTSBRIEFINGSAVED _OBJSAVED)
    {
        DataTable dt = new DataTable();
        switch (_OBJSAVED.OPERATION)
        {
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_BRIEFINGSAVED @OPERATION = 'CHECK', @BRIEFINGSAVEDID ='" + Convert.ToString(_OBJSAVED.BRIEFINGSAVED_ID) + "'");
                break;
            default:
                break;

        }
        return dt;
    }

    internal static bool set_briefingsaved(SMVTSBRIEFINGSAVED _OBJSAVED)
    {
        bool status = false;
        switch (_OBJSAVED.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_BRIEFINGSAVED @OPERATION = 'INSERT' , @BRIEFINGSAVEDDRIVERID='" + _OBJSAVED.BRIEFINGSAVEDDRIVER_ID
                                  + "',@BRIEFINGSAVEDDRIVERINCIDENTSHARINGDESC ='" + _OBJSAVED.BRIEFINGSAVEDDRIVERINCIDENTSHARING_DESC + "',@BRIEFINGSAVEDDRIVERDMCCOUNCELINGINPUT ='" + _OBJSAVED.BRIEFINGSAVEDDRIVERDMCCOUNCELING_INPUT
                                  + "',@BRIEFINGSAVEDDRIEVRTRAINERINPUT='" + _OBJSAVED.BRIEFINGSAVEDDRIVERTRAINER_INPUT + "',@BRIEFINGSAVEDDRIVERGOALCATEGORY='" + _OBJSAVED.BRIEFINGSAVEDDRIVERGOALCATEGORY
                                  + "',@BRIEFINGSAVEDDRIVERGOALOFCONVERSATION ='" + _OBJSAVED.BRIEFINGSAVEDDRIVERGOALOFCONVERSATION + "',@BRIEFINGSAVEDSTATUS='" + _OBJSAVED.BRIEFINGSAVED_STATUS
                                  + "',@BRIEFINGSAVEDCREATEDBY ='" + _OBJSAVED.BRIEFINGSAVED_CREATEDBY + "',@BRIEFINGSAVEDCREATEDDATE ='" + _OBJSAVED.BRIEFINGSAVED_CREATEDDATE + "',@BRIEFINGSAVEDMODIFIEDBY='" + _OBJSAVED.BRIEFINGSAVED_MODIFIEDBY
                                  + "',@BRIEFINGSAVEDMODIFIEDDATE ='" + _OBJSAVED.BRIEFINGSAVED_MODIFIEDDATE + "'"))

                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataTable get_DEREGISTRATION(SMVTS_DEREGISTRATION _OBJ)
    {
        DataTable dt = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_DEREGISTRATION @OPERATION = 'CHECK', @DEREGISTRATIONID ='" + Convert.ToString(_OBJ.DEREGISTRATION_ID) + "'");
                break;
            default:
                break;

        }
        return dt;
    }

    internal static bool set_DEregistration(SMVTS_DEREGISTRATION _OBJ)
    {
        bool status = false;
        switch (_OBJ.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_DEREGISTRATION @OPERATION = 'INSERT' , @DEREGISTRATIONREVERSEAUDIT='" + _OBJ.DEREGISTRATION_REVERSEAUDIT
                                  + "',@DEREGISTRATIONREJECTED ='" + _OBJ.DEREGISTRATION_REJECTED + "',@DEREGISTRATIONCLEANERPASSPORTID ='" + _OBJ.DEREGISTRATION_CLEANERPASSPORTID
                                  + "',@DEREGISTRATIONCLEANERNAME='" + _OBJ.DEREGISTRATION_CLEANERNAME + "',@DEREGISTRATIONTRIPID='" + _OBJ.DEREGISTRATION_TRIPID
                                  + "',@DEREGISTRATIONSTATUS ='" + _OBJ.DEREGISTRATION_STATUS + "',@DEREGISTRATIONCREATEDBY='" + _OBJ.DEREGISTRATION_CREATEDBY
                                  + "',@DEREGISTRATIONCREATEDDATE ='" + _OBJ.DEREGISTRATION_CREATEDDATE + "',@DEREGISTRATIONMODIFIEDBY ='" + _OBJ.DEREGISTRATION_MODIFIEDBY + "',@DEREGISTRATIONMODIFIEDDATE='" + _OBJ.DEREGISTRATION_MODIFIEDDATE + "'"))

                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static object get_debriefingtripid(SMVTS_BRIEFING _OBJ_BRIEFING)
    {
        DataTable dt = new DataTable();
        switch (_OBJ_BRIEFING.OPERATION)
        {
            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_BRIEFING @OPERATION = 'select', @BRIEFINGCATEGORYID ='" + Convert.ToString(_OBJ_BRIEFING.BRIEFING_CATEGORYID) + "',@BRIEFINGDRIVERID='" + _OBJ_BRIEFING.BRIEFING_DRIVERID + "' ");
                break;
            default:
                break;
        }
        return dt;
    }



    internal static DataTable GET_trip(SMVTS_BRIEFING _obj_briefing)
    {
        DataTable dt = new DataTable();
        switch (_obj_briefing.OPERATION)
        {
            case operation.select:
                dt = ExecuteQuery("SELECT top (7) * FROM SMVTS_BRIEFING INNER JOIN SMVTS_DETRIPDETAILS ON SMVTS_BRIEFING.BRIEFING_TRIPID=SMVTS_DETRIPDETAILS.TRIP_ID AND SMVTS_BRIEFING.BRIEFING_DRIVERID=SMVTS_DETRIPDETAILS.TRIP_DRIVERID WHERE TRIP_DRIVERID='" + _obj_briefing.BRIEFING_DRIVERID + "' ORDER BY SMVTS_BRIEFING.BRIEFING_CREATEDDATE DESC");


                break;
            default:
                break;
        }
        return dt;
    }


    internal static DataTable get_debriefingsaved(SMVTS_DEBRIEFINGSAVE _OBJSAVE)
    {
        DataTable dt = new DataTable();
        switch (_OBJSAVE.OPERATION)
        {
            case operation.Empty:
                dt = ExecuteQuery("EXEC USP_SMVTS_DEBRIEFINGSAVE @OPERATION = 'CHECK', @DEBRIEFINGID='" + Convert.ToString(_OBJSAVE.DEBRIEFING_ID) + "'");
                break;
            default:
                break;
        }
        return dt;
    }

    internal static bool set_debriefingsaved(SMVTS_DEBRIEFINGSAVE _OBJSAVE)
    {
        bool status = false;
        switch (_OBJSAVE.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_DEBRIEFINGSAVE @OPERATION = 'INSERT' , @DEBRIEFINGDRIVERID='" + _OBJSAVE.DEBRIEFING_DRIVERID
                                  + "',@DEBRIEFINGFROM ='" + _OBJSAVE.DEBRIEFING_FROM + "',@DEBRIEFINGTO ='" + _OBJSAVE.DEBRIEFING_TO
                                  + "',@DEBRIEFINGGOALADHERENCE='" + _OBJSAVE.DEBRIEFING_GOALADHERENCE + "',@DEBRIEFINGCOMPLETED='" + _OBJSAVE.DEBRIEFING_completed
                                  + "',@DEBRIEFINGSTATUS ='" + _OBJSAVE.DEBRIEFING_STATUS + "',@DEBRIEFINGCREATEDBY='" + _OBJSAVE.DEBRIEFING_CREATEDBY
                                  + "',@DEBRIEFINGCREATEDDATE ='" + _OBJSAVE.DEBRIEFING_CREATEDDATE + "',@DEBRIEFINGMODIFIEDBY ='" + _OBJSAVE.DEBRIEFING_MODIFIEDBY + "',@DEBRIEFINGMODIFIEDDATE='" + _OBJSAVE.DEBRIEFING_MODIFIEDDATE + "'"))

                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataTable GET_de_incentive(SMVTS_DEBRIEFINGSAVE _OBJSAVE)
    {
        throw new NotImplementedException();
    }

    internal static DataTable GET_AbstractReports(string Operation, string Deviceid, string fromDate, string toDate, string UserId, string VehicleModel, string CategId, string VehicleNo, string RouteName)
    {
        DataTable dt_ret = new DataTable();
        string Query = "EXEC USP_SMVTS_GHMC_LIVETRIPS @OPERATION='" + Operation
                        + "',@USERID='" + UserId + "',@CATEGID='" + CategId
                        + "',@STARTDATE='" + fromDate
                        + "',@ENDDATE='" + toDate
                        + "',@vehmm_name='" + VehicleModel
                        + "',@ROUTE_NAME='" + RouteName
                        + "',@DEVICEID ='" + Deviceid + "',@VNO='" + VehicleNo
                        + "'";
        dt_ret = BLL.ExecuteQuery(Query);
        return dt_ret;
    }



    internal static DataTable getSaleProducts()
    {
        string Query = "EXEC SMVTS_PRODUCTS_SALEINFO";
        DataTable DT = BLL.ExecuteQuery(Query);
        return DT;
    }






    internal static DataTable GetShoppingUsers(SMVTS_SHOPING_USERS _obj_shopping_Users)
    {
        DataTable dt = new DataTable();

        switch (_obj_shopping_Users.OPERATION)
        {
            case operation.Check:

                dt = BLL.ExecuteQuery("EXEC USP_SMVTS_SHOPING_USERS @OPERATION='CHECK',@USER_EMAILID='" + _obj_shopping_Users.USER_EMAILID + "',@USER_PASSWORD='" + _obj_shopping_Users.USER_PASSWORD + "'");

                break;
            default: break;
        }
        return dt;
    }
    internal static DataTable GetShoppingUsersPassword(SMVTS_SHOPING_USERS _obj_shopping_Users)
    {
        DataTable dt = new DataTable();
        switch (_obj_shopping_Users.OPERATION)
        {
            case operation.Check:

                dt = BLL.ExecuteQuery("EXEC USP_SMVTS_SHOPING_USERS @OPERATION='Getpassword',@USER_EMAILID='" + _obj_shopping_Users.USER_EMAILID + "'");

                break;
            default: break;
        }
        return dt;
    }
    internal static DataTable setShoppingUser(SMVTS_SHOPING_USERS _obj_shopping_Users)
    {
        DataTable dt = new DataTable();
        bool retvale = false;
        string Query = "EXEC USP_SMVTS_SHOPING_USERS" + " @OPERATION='INSERT',"
                                                   + "@USER_EMAILID='" + _obj_shopping_Users.USER_EMAILID + "',"
                                                  + "@USER_PASSWORD='" + _obj_shopping_Users.USER_PASSWORD + "'," +
  "@USER_DATE='" + _obj_shopping_Users.USER_DATE + "'," +
  "@USER_STATUS='" + _obj_shopping_Users.USER_STATUS + "'," +
  "@USER_CREATEDBY='" + _obj_shopping_Users.USER_CREATEDBY + "'," +
  "@USER_MODIFIEDBY='" + _obj_shopping_Users.USER_MODIFIEDBY + "'," +
  "@USER_MODIFIEDDATE='" + _obj_shopping_Users.USER_MODIFIEDDATE + "'";
        dt = BLL.ExecuteQuery(Query);
        return dt;
    }

    internal static DataTable GETSHOPINGDETAILS(SMVTS_SHOPING_DETAILS _obj_shopping_UsersDETAILS)
    {
        DataTable dt_details = new DataTable();

        switch (_obj_shopping_UsersDETAILS.OPERATION)
        {
            case operation.Check:

                dt_details = BLL.ExecuteQuery("EXEC USP_SMVTS_SHOPINGUSERDETAILS @OPERATION='CHECK',@DETAILS_USERID='" + _obj_shopping_UsersDETAILS.DETAILS_USERID + "'");

                break;
            default: break;
        }
        return dt_details;
    }

    internal static bool setShoppingUserDETAILS(SMVTS_SHOPING_DETAILS _obj_shopping_UsersDETAILS)
    {
        bool status = false;


        string query = "EXEC USP_SMVTS_SHOPINGUSERDETAILS @OPERATION = 'INSERT' , @DETAILS_USERID='" + _obj_shopping_UsersDETAILS.DETAILS_USERID
                          + "',@DETAILS_USERNAME ='" + _obj_shopping_UsersDETAILS.DETAILS_USERNAME + "',@DETAILS_USERFULLNAME ='" + _obj_shopping_UsersDETAILS.DETAILS_USERFULLNAME
                          + "',@DETAILS_USERADDRESS='" + _obj_shopping_UsersDETAILS.DETAILS_USERADDRESS + "',@DETAILS_USERCOUNTRY_ID='" + _obj_shopping_UsersDETAILS.DETAILS_USERCOUNTRY
                          + "',@DETAILS_USERSTATE_ID ='" + _obj_shopping_UsersDETAILS.DETAILS_USERSTATE + "',@DETAILS_USERCITY_ID='" + _obj_shopping_UsersDETAILS.DETAILS_USERCITY
                          + "',@DETAILS_USERPIN ='" + _obj_shopping_UsersDETAILS.DETAILS_USERPIN + "',@DETAILS_USERMOBILENO ='" + _obj_shopping_UsersDETAILS.DETAILS_USERMOBILENO
                          + "',@DETAILS_USERDATE='" + _obj_shopping_UsersDETAILS.DETAILS_USERDATE + "',@DETAILS_USERSTATUS='" + _obj_shopping_UsersDETAILS.DETAILS_USERSTATUS
                          + "',@DETAILS_USER_CREATEDBY='" + _obj_shopping_UsersDETAILS.DETAILS_USER_CREATEDBY + "',@DETAILS_USER_CREATEDDATE='" + _obj_shopping_UsersDETAILS.DETAILS_USER_CREATEDDATE
                          + "',@DETAILS_USER_MODIFIEDBY='" + _obj_shopping_UsersDETAILS.DETAILS_USER_MODIFIEDBY + "',@DETAILS_USER_MODIFIEDDATE='" + _obj_shopping_UsersDETAILS.DETAILS_USER_MODIFIEDDATE + "'";
        if (BLL.ExecuteNonQuery(query))
        {
            status = true;
        }

        return status;
    }


    internal static DataTable Get_CMS_ADV(smvts_flashbanner _obj_banner)
    {
        try
        {
            DataTable dt = new DataTable();
            switch (_obj_banner.OPERATION)
            {

                case operation.get_structure://to load static advertise in dynamic manner here screen
                    dt = ExecuteQuery("EXEC USP_SMVTS_WEBSITEBANNER @OPERATION='SELECT' ");
                    break;
                default:
                    break;
            }
            return dt;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    internal static bool RFID_RollBackAllocation(int rEADER_ID)
    {
        throw new NotImplementedException();
    }

    internal static bool CloseTripManually(SMVTS_TRIPINFO _OBJ)
    {
        bool status = false;
        if (BLL.ExecuteNonQuery("EXEC USP_MANUAL_TRIPCLOSE @CATEGID ='" + _OBJ.CategId + "',@DEVICEID ='" + _OBJ.DeviceId
                            + "',@REACHDATE ='" + _OBJ.Reachdate + "', @UNLOADING_DATE ='" + _OBJ.UnloadDate
                            + "',@TICL_BIT =NULL,   @user_id ='" + _OBJ.Userid + "' ,@vehicle ='" + _OBJ.VehicleNo + "'"))
        {
            status = true;

        }
        return status;
    }

    internal static bool set_distributer(SMVTS_DISTRIBUTER _OBJ_DISTRIBUTER)
    {
        bool status = false;
        switch (_OBJ_DISTRIBUTER.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_DISTRIBUTER @Operation = 'Insert'"
                                  + ", @DISTRIBUTER_FULLNAME='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_FULLNAME)
                                  + "', @DISTRIBUTER_USERNAME='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_USERNAME)
                                  + "', @DISTRIBUTER_EMAILID='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_EMAILID)
                                  + "', @DISTRIBUTER_COMPANYNAME='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_COMPANYNAME)
                                  + "', @DISTRIBUTER_Legalstatusofyourfirm='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_Legalstatusofyourfirm)
                                  + "', @DISTRIBUTER_Totalexperienceinbusiness='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_Totalexperienceinbusiness)
                                  + "', @DISTRIBUTER_Doyouhaveanexperienceinrunningafranchiseebusiness='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_Doyouhaveanexperienceinrunningafranchiseebusiness)
                                  + "', @DISTRIBUTER_Ifyeswhichindustry='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_Ifyeswhichindustry)
                                  + "', @DISTRIBUTER_INVESTMENTRANGE='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_INVESTMENTRANGE)
                                  + "', @DISTRIBUTER_WEBSITE='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_WEBSITE)
                                  + "', @DISTRIBUTER_ADDRESS='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_ADDRESS)
                                  + "', @DISTRIBUTER_COUNTRYID='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_COUNTRYID)
                                  + "', @DISTRIBUTER_STATEID='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_STATEID)
                                  + "', @DISTRIBUTER_CITYID='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_CITYID)
                                  + "', @DISTRIBUTER_ZIPCODE='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_ZIPCODE)
                                  + "', @DISTRIBUTER_MOBILENO='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_MOBILENO)
                                  + "', @DISTRIBUTER_ALTERNATEMOBILENO='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_ALTERNATEMOBILENO)
                                  + "', @DISTRIBUTER_DESC='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_DESC)
                                  + "', @DISTRIBUTER_CREATEDBY='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_CREATEDBY)
                                  + "', @DISTRIBUTER_CREATEDDATE='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_CREATEDDATE)
                                  + "', @DISTRIBUTER_MODIFIEDBY='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_MODIFIEDBY)
                                  + "', @DISTRIBUTER_MODIFIEDDATE='" + Convert.ToString(_OBJ_DISTRIBUTER.DISTRIBUTER_MODIFIEDDATE)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;

    }
    public static DataTable get_salesrep_dropdown(SMVTS_SALESREPRESENTATIVE _obj_smvts_salesrep)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvts_salesrep.OPERATION)
        {
            case operation.SelectAll:
                dt = ExecuteQuery("EXEC USP_SMVTS_SALESREP @OPERATION = 'selectAll'");
                break;
        }
        return dt;


    }


    public static bool set_salesrep(SMVTS_SALESREPRESENTATIVE _objsalesrep)
    {
        bool status = false;

        switch (_objsalesrep.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SALESREP @OPERATION = 'INSERT',@SALESREP_FULLNAME = '" + Convert.ToString(_objsalesrep.SALESREP_FULLNAME)
                                  + "',@SALESREP_ADDRESS='" + Convert.ToString(_objsalesrep.SALESREP_ADDRESS)
                                  + "',@SALESREP_REFERREDBY='" + Convert.ToString(_objsalesrep.SALESREP_REFERREDBY)
                                  + "',@SALESREP_EMAILID='" + Convert.ToString(_objsalesrep.SALESREP_EMAILID)
                                  + "', @SALESREP_USERNAME='" + Convert.ToString(_objsalesrep.SALESREP_USERNAME)

                                  + "',@SALESREP_PASSWORD='" + Convert.ToString(_objsalesrep.SALESREP_PASSWORD)
                                  + "',@SALESREP_COUNTRY='" + Convert.ToString(_objsalesrep.SALESREP_COUNTRY)
                                  + "',@SALESREP_STATE='" + Convert.ToString(_objsalesrep.SALESREP_STATE)
                                   + "',@SALESREP_CITY='" + Convert.ToString(_objsalesrep.SALESREP_CITY)
                                   + "',@SALESREP_STATUS='" + (_objsalesrep.SALESREP_STATUS)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;

            case operation.Update:
                string strsql = "EXEC USP_SMVTS_SALESREP @OPERATION = 'UPDATE',@SALESREP_USER_ID='" + Convert.ToString(_objsalesrep.SALESREP_USER_ID) + "' , @SALESREP_FULLNAME = '" + Convert.ToString(_objsalesrep.SALESREP_FULLNAME)
                                 + "',@SALESREP_ADDRESS='" + Convert.ToString(_objsalesrep.SALESREP_ADDRESS)
                                 + "',@SALESREP_REFERREDBY='" + Convert.ToString(_objsalesrep.SALESREP_REFERREDBY)
                                 + "',@SALESREP_EMAILID='" + Convert.ToString(_objsalesrep.SALESREP_EMAILID)
                                 + "', @SALESREP_USERNAME='" + Convert.ToString(_objsalesrep.SALESREP_USERNAME)

                                 + "',@SALESREP_PASSWORD='" + Convert.ToString(_objsalesrep.SALESREP_PASSWORD)
                                 + "',@SALESREP_COUNTRY='" + Convert.ToString(_objsalesrep.SALESREP_COUNTRY)
                                 + "',@SALESREP_STATE='" + Convert.ToString(_objsalesrep.SALESREP_STATE)
                                  + "',@SALESREP_CITY='" + Convert.ToString(_objsalesrep.SALESREP_CITY)
                                  + "',@SALESREP_STATUS='" + (_objsalesrep.SALESREP_STATUS)
                                 + "'";
                if (ExecuteNonQuery(strsql))
                    status = true;

                else
                    status = false;
                break;

        }
        return status;
    }


    internal static SMVTS_SALESREPRESENTATIVE get_salesrep(string username)
    {
        string strQry = " EXEC usp_smvts_salesrep    @Operation='check_login', @SALESREP_USERNAME='" + ReplaceQuote(username) + "'";
        DataTable dt = ExecuteQuery(strQry);
        //if (dt != null)
        //{
        if (dt.Rows.Count != 0)
        {
            return new SMVTS_SALESREPRESENTATIVE(Convert.ToInt32(dt.Rows[0]["SALESREP_USER_ID"]), Convert.ToString(dt.Rows[0]["SALESREP_FULLNAME"]),
                         Convert.ToString(dt.Rows[0]["SALESREP_ADDRESS"]),
                        Convert.ToString(dt.Rows[0]["SALESREP_REFERREDBY"]),
                        Convert.ToString(dt.Rows[0]["SALESREP_EMAILID"]),
                        Convert.ToString(dt.Rows[0]["SALESREP_USERNAME"]),
                        Convert.ToString(dt.Rows[0]["SALESREP_PASSWORD"]),
                        Convert.ToInt32(dt.Rows[0]["SALESREP_COUNTRY"]),
                         Convert.ToInt32(dt.Rows[0]["SALESREP_STATE"]),
                          Convert.ToInt32(dt.Rows[0]["SALESREP_CITY"]),
                          Convert.ToBoolean(dt.Rows[0]["SALESREP_STATUS"]),
                          Convert.ToInt32(dt.Rows[0]["SALESREP_CATEGORYID"])
                          );
        }
        else
        {
            return null;
        }
        //}
        //else
        //    return null;
    }

    public static DataTable get_Salesrepmatrix()
    {
        DataTable dtsalesrep = new DataTable();

        dtsalesrep = ExecuteQuery("EXEC usp_smvts_salesrepmatrix @Operation = 'selectmatrix1'");



        return dtsalesrep;
    }
    public static DataTable get_Salesrepmatrix(string ReferredNamesQuery)
    {
        DataTable dtsalesrep = new DataTable();
        dtsalesrep = ExecuteQuery("EXEC usp_smvts_salesrepmatrixes @Operation = 'string',@ReferredNamesQuery='" + ReferredNamesQuery + "'");

        return dtsalesrep;

    }


    internal static DataTable get_Salesrepmatrixdirectsales(string ReferredNamesQuery)
    {
        DataTable dtsalesrep = new DataTable();
        dtsalesrep = ExecuteQuery("EXEC usp_smvts_salesrepmatrixes @Operation = 'DirectSales',@ReferredNamesQuery='" + ReferredNamesQuery + "'");

        return dtsalesrep;

    }
    public static DataTable get_DirectSalesPrice(string ReferredNamesQuery)
    {
        DataTable dtsalesrep = new DataTable();
        dtsalesrep = ExecuteQuery("EXEC usp_smvts_salesrepmatrixes @Operation = 'Refer_Price',@ReferredNamesQuery='" + ReferredNamesQuery + "'");

        return dtsalesrep;
    }
    public static DataTable get_ReferedPrice(string ReferredNamesQuery)
    {
        DataTable dtsalesrep = new DataTable();
        dtsalesrep = ExecuteQuery("EXEC usp_smvts_salesrepmatrixes @Operation = 'ReferPrice',@ReferredNamesQuery='" + ReferredNamesQuery + "'");
        return dtsalesrep;
    }



    internal static DataTable get_Refered_Referprice(string ReferredNamesQuery)
    {
        DataTable dtsalesrep = new DataTable();
        dtsalesrep = ExecuteQuery("EXEC usp_smvts_salesrepmatrixes @Operation = 'Refer-Referprice',@ReferredNamesQuery='" + ReferredNamesQuery + "'");
        return dtsalesrep;

    }



    public static DataTable get_salesrep_dropdownreg(SMVTS_SALESREPRESENTATIVE _obj_smvts_salesrep)
    {
        DataTable dt = new DataTable();
        switch (_obj_smvts_salesrep.OPERATION)
        {
            case operation.select:
                dt = ExecuteQuery("EXEC USP_SMVTS_SALESREP @OPERATION = 'select', @SALESREP_USER_ID='" + _obj_smvts_salesrep.SALESREP_USER_ID + "'");
                break;
            case operation.SelectAll:
                dt = ExecuteQuery("EXEC USP_SMVTS_SALESREP @OPERATION = 'selectAll'");
                break;
        }
        return dt;


    }


    public static bool set_salesrepreg(SMVTS_SALESREPRESENTATIVE _objsalesrep)
    {
        bool status = false;

        switch (_objsalesrep.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_SALESREP @OPERATION = 'INSERT',@SALESREP_FULLNAME = '" + Convert.ToString(_objsalesrep.SALESREP_FULLNAME)
                                  + "',@SALESREP_ADDRESS='" + Convert.ToString(_objsalesrep.SALESREP_ADDRESS)
                                  + "',@SALESREP_REFERREDBY='" + Convert.ToString(_objsalesrep.SALESREP_REFERREDBY)
                                  + "',@SALESREP_EMAILID='" + Convert.ToString(_objsalesrep.SALESREP_EMAILID)
                                  + "', @SALESREP_USERNAME='" + Convert.ToString(_objsalesrep.SALESREP_USERNAME)

                                  + "',@SALESREP_PASSWORD='" + Convert.ToString(_objsalesrep.SALESREP_PASSWORD)
                                  + "',@SALESREP_COUNTRY='" + Convert.ToString(_objsalesrep.SALESREP_COUNTRY)
                                  + "',@SALESREP_STATE='" + Convert.ToString(_objsalesrep.SALESREP_STATE)
                                   + "',@SALESREP_CITY='" + Convert.ToString(_objsalesrep.SALESREP_CITY)
                                   + "',@SALESREP_STATUS='" + (_objsalesrep.SALESREP_STATUS)
                                  + "'"))
                    status = true;
                else
                    status = false;
                break;

            case operation.Update:
                string strsql = "EXEC USP_SMVTS_SALESREP @OPERATION = 'UPDATE',@SALESREP_USER_ID='" + Convert.ToString(_objsalesrep.SALESREP_USER_ID) + "', @SALESREP_FULLNAME = '" + Convert.ToString(_objsalesrep.SALESREP_FULLNAME)
                                 + "',@SALESREP_ADDRESS='" + Convert.ToString(_objsalesrep.SALESREP_ADDRESS)
                                 + "',@SALESREP_REFERREDBY='" + Convert.ToString(_objsalesrep.SALESREP_REFERREDBY)
                                 + "',@SALESREP_EMAILID='" + Convert.ToString(_objsalesrep.SALESREP_EMAILID)
                                 + "', @SALESREP_USERNAME='" + Convert.ToString(_objsalesrep.SALESREP_USERNAME)

                                 + "',@SALESREP_PASSWORD='" + Convert.ToString(_objsalesrep.SALESREP_PASSWORD)
                                 + "',@SALESREP_COUNTRY='" + Convert.ToString(_objsalesrep.SALESREP_COUNTRY)
                                 + "',@SALESREP_STATE='" + Convert.ToString(_objsalesrep.SALESREP_STATE)
                                  + "',@SALESREP_CITY='" + Convert.ToString(_objsalesrep.SALESREP_CITY)
                                  + "',@SALESREP_STATUS='" + (_objsalesrep.SALESREP_STATUS)
                                 + "'";
                if (ExecuteNonQuery(strsql))
                    status = true;

                else
                    status = false;
                break;

        }
        return status;
    }


    internal static DataTable get_saleserepcheck(SMVTS_SALESREPRESENTATIVE _OBJSAVED)
    {
        DataTable dt = new DataTable();
        switch (_OBJSAVED.OPERATION)
        {
            case operation.Check:
                dt = ExecuteQuery("EXEC USP_SMVTS_SALESREP @OPERATION = 'CHECK', @SALESREP_USERNAME ='" + Convert.ToString(_OBJSAVED.SALESREP_USERNAME) + "'");
                break;
            default:
                break;


        }
        return dt;
    }


    public static DataTable get_salesrepreg(SMVTS_SALESREPRESENTATIVE _obj_Smvts_salesrep)
    {
        DataTable dtsalesrep = new DataTable();
        switch (_obj_Smvts_salesrep.OPERATION)
        {
            case operation.SelectAll:
                dtsalesrep = ExecuteQuery("EXEC USP_SMVTS_SALESREP @operation = 'selectAll'");
                break;




            case operation.select:
                dtsalesrep = ExecuteQuery("EXEC USP_SMVTS_SALESREP @operation = 'select',@SALESREP_USER_ID='" + _obj_Smvts_salesrep.SALESREP_USER_ID + "'");
                break;


            case operation.checkemail:
                dtsalesrep = ExecuteQuery("EXEC USP_SMVTS_SALESREP @operation = 'CHECKEMAIL' ,  @SALESREP_EMAILID = '" + _obj_Smvts_salesrep.SALESREP_EMAILID + "'");
                break;
            case operation.Select:

                dtsalesrep = ExecuteQuery("EXEC USP_SMVTS_SALESREP @Operation = 'select-grid'");



                break;




            case operation.Check:

                dtsalesrep = ExecuteQuery("EXEC USP_SMVTS_SALESREP @Operation = 'Check', @SALESREP_USERNAME ='" + Convert.ToString(_obj_Smvts_salesrep.SALESREP_USERNAME) + "'");
                break;


            case operation.Update:

                dtsalesrep = ExecuteQuery("EXEC USP_SMVTS_SALESREP @Operation = 'Update' , @SALESREP_USER_ID = '" + _obj_Smvts_salesrep.SALESREP_USER_ID + "'");


                break;

            case operation.Insert:

                dtsalesrep = ExecuteQuery("EXEC USP_SMVTS_SALESREP @Operation = 'Insert' ,@SALESREP_USER_ID = ''" + Convert.ToString(_obj_Smvts_salesrep.SALESREP_USER_ID) + "'");


                break;

            default:
                break;
        }
        return dtsalesrep;
    }


    public static string getDatabase(string Orgname)
    {
        string Dbname = "";

        //string Query = "SELECT top 1 CATEG_DBNAME from smvts_categories WHERE CATEG_NAME='"+Orgname+"'";
        string Query = "";
        if (Orgname.Trim().Contains("(C)"))
        {
            Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname.Replace("(C)", "").Trim() + "'";
        }
        else if(Orgname.Trim().Contains("(P)"))
        {
            Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname.Replace("(P)", "").Trim() + "'";
        }
        else if (Orgname.Trim().Contains("(WLP)"))
        {
            Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname.Replace("(WLP)", "").Trim() + "'";
        }
        else if (Orgname.Trim().Contains("(SWLP)"))
        {
            Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname.Replace("(SWLP)", "").Trim() + "'";
        }
        else 
        {
            Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname + "'";
        }

        DataTable dt_table = Dal.ExecuteQueryDB(Query);

        if (dt_table != null)
        {
            if (dt_table.Rows.Count > 0)
            {
                Dbname = dt_table.Rows[0][0].ToString();
            }
        }
        return Dbname;
    }
    //by Ajith
    internal static DataTable getDatabaseForUser(string username, string password)
    {
         string Dbname = "";

        //string Query = "SELECT top 1 CATEG_DBNAME from smvts_categories WHERE CATEG_NAME='"+Orgname+"'";
        string Query = "";
        string Encpassword = BLL.Encrypt(password);
        Query = "select C.CATEG_NAME,C.CATEG_DBNAME,CATEG_VALID_TO,C.CATEG_WEBSITENAME from smvts_users U INNER JOIN SMVTS_CATEGORIES C ON U.USERS_CATEGORY_ID=C.CATEG_ID where U.USERS_USERNAME='" + username + "' AND U.USERS_PASSWORD='" + Encpassword + "' AND USERS_STATUS=1";
        DataTable dt_table = Dal.ExecuteQueryDB(Query);

        //if (dt_table != null)
        //{
        //    if (dt_table.Rows.Count > 0)
        //    {
        //        Dbname = dt_table.Rows[0][0].ToString();
        //    }
        //}
        return dt_table;

     }
    internal static string getDatabase_deviceupdate(string patnerid)
    {
        string Dbname = "";
        string Query = "SELECT  CATEG_DBNAME from smvts_categories WHERE CATEG_ID=" + patnerid + "";
        DataTable dt_Connection = Dal.ExecuteQuery(Query);
        string dbname = dt_Connection.Rows[0]["CATEG_DBNAME"].ToString();
        //   string Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname.Replace("(C)", "").Trim() + "'";
        DataTable dt_table = Dal.ExecuteQueryDB1(Query, dbname);

        if (dt_table != null)
        {
            if (dt_table.Rows.Count > 0)
            {
                Dbname = dt_table.Rows[0][0].ToString();
            }
        }
        return Dbname;
    }
    internal static string getDatabase_categ(string patnerid)
    {
        string Dbname = "";

        string Query = "SELECT  CATEG_DBNAME from smvts_categories WHERE CATEG_ID=" + patnerid + "";

        //   string Query = "SELECT TOP 1 CATEG_DBNAME FROM SMVTS_CATEGORIES WHERE CATEG_NAME='" + Orgname.Replace("(C)", "").Trim() + "'";
        DataTable dt_table = Dal.ExecuteQueryDB(Query);

        if (dt_table != null)
        {
            if (dt_table.Rows.Count > 0)
            {
                Dbname = dt_table.Rows[0][0].ToString();
            }
        }
        return Dbname;

    }
    internal static DataTable get_PRODUCTS(SMVTS_PRODUCTS _OBJ_PRODUCTS)
    {
        DataTable dt = new DataTable();
        switch (_OBJ_PRODUCTS.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("EXEC USP_SMVTS_PRODUCTS @OPERATION = 'SELECT'");
                break;
            default:
                break;

        }
        return dt;
    }



    internal static DataTable getMerchantId()
    {
        DataTable dt = new DataTable();
        dt = BLL.ExecuteQuery("select * from SMVTS_PAYMENTGATEWAY_LOGIN(nolock)");
        return dt;
    }



    public static bool SET_SMVTS_TRANSACTION_DETAILS(SMVTS_TRANSACTION_DETAILS _OBJ_SMVTS_TRANSACTION_DETAILS)
    {
        bool status = false;
        switch (_OBJ_SMVTS_TRANSACTION_DETAILS.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_TRANSACTION_DETAILS @OPERATION = 'INSERT', @DETAILSID = '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_DETAILS.DETAILSID)
                    + "', @DETAILS_PRODUCTID= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_DETAILS.DETAILS_PRODUCTID)
                    + "', @DETAILS_AMOUNT = '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_DETAILS.DETAILS_AMOUNT)
                    + "', @DETAILS_SHIPPINGCHARGES = '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_DETAILS.DETAILS_SHIPPINGCHARGES)
                   + "', @DETAILS_QUANTITY= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_DETAILS.DETAILS_QUANTITY)
                   + "', @DETAILS_SUBTOTAL = '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_DETAILS.DETAILS_SUBTOTAL)
                    + "', @DETAILS_TRANSACTIONID = '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_DETAILS.DETAILS_TRANSACTIONID)
                    + "'"))
                    status = true;
                else
                    status = false;
                break;
        }
        return status;

    }
    public static bool SET_SMVTS_TRANSACTION_BILLINGADDRESS(SMVTS_TRANSACTION_BILLINGADDRESS _OBJ_SMVTS_TRANSACTION_BILLINGADDRESS)
    {
        bool status = false;
        switch (_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_TRANSACTION_BILLINGADDRESS @OPERATION = 'INSERT', @BILLINGID= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.BILLINGID)
                    + "',@BILLING_USERID= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.BILLING_USERID)
                    + "',@BILLING_TRANSACTIONID= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.BILLING_TRANSACTIONID)
                    + "',@DETAILS_USERFULLNAME= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERFULLNAME)
                    + "',@DETAILS_USERADDRESS= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERADDRESS)
                    + "',@DETAILS_USERCOUNTRY_ID= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERCOUNTRY_ID)
                    + "',@DETAILS_USERSTATE_ID= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERSTATE_ID)
                     + "',@DETAILS_USERCITY_ID= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERCITY_ID)
                    + "',@DETAILS_USERPIN= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERPIN)
                    + "',@DETAILS_USERMOBILENO= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERMOBILENO)
                    + "',@DETAILS_USERDATE= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERDATE)
                    + "',@DETAILS_USERSTATUS= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USERSTATUS)
                    + "',@DETAILS_USER_CREATEDDATE= '" + Convert.ToString(_OBJ_SMVTS_TRANSACTION_BILLINGADDRESS.DETAILS_USER_CREATEDDATE)
                    + "'"))

                    status = true;
                else
                    status = false;
                break;
        }
        return status;

    }

    public static DataTable set_SMVTS_SHOPPING_TRANSACTION(SMVTS_SHOPPING_TRANSACTION _obj_SMVTS_SHOPPING_TRANSACTION)
    {
        DataTable status = new DataTable();
        switch (_obj_SMVTS_SHOPPING_TRANSACTION.OPERATION)
        {
            case operation.Insert:

                string querry = "EXEC usp_SMVTS_SHOPPING_TRANSACTION @Operation = 'Insert', @TRANSACTIONID='" + _obj_SMVTS_SHOPPING_TRANSACTION.TRANSACTIONID
                                  + "', @TRANSACTION_USERID ='" + (_obj_SMVTS_SHOPPING_TRANSACTION.TRANSACTION_USERID)
                                  + "', @TRANSACTION_TOTALAMOUNT ='" + (_obj_SMVTS_SHOPPING_TRANSACTION.TRANSACTION_TOTALAMOUNT)
                                  + "', @TRANSACTION_STATUS='" + (_obj_SMVTS_SHOPPING_TRANSACTION.TRANSACTION_STATUS) + "'";
                status = ExecuteQuery(querry);

                break;


            case operation.Update:

                string querry1 = "EXEC usp_SMVTS_SHOPPING_TRANSACTION @Operation = 'UPDATE', @TRANSACTIONID='" + _obj_SMVTS_SHOPPING_TRANSACTION.TRANSACTIONID

                                  + "', @TRANSACTION_STATUS='" + (_obj_SMVTS_SHOPPING_TRANSACTION.TRANSACTION_STATUS) + "'";
                status = ExecuteQuery(querry1);

                break;


        }


        return status;


    }



    //internal static DataTable get_gridmatrix(int loginid)
    //{
    //    DataTable dt = new DataTable();
    //    switch (loginid.OPERATION)
    //    {
    //        case operation.Select:
    //            dt = ExecuteQuery("EXEC  USP_SMVTS_SALESINCENTIVEMATRIX @LOGINID='" + loginid + "'");
    //            break;
    //    }
    //    return dt;
    //}

    internal static DataTable get_gridmatrix(SMVTS_SALESREPRESENTATIVE _obj_salesrep)
    {
        DataTable dt = new DataTable();
        switch (_obj_salesrep.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("EXEC  USP_SMVTS_SALESINCENTIVEMATRIX @LOGINID='" + _obj_salesrep.SALESREP_USER_ID + "'");
                // dt = ExecuteQuery("EXEC  USP_SMVTS_SALESINCENTIVEMATRIX @LOGINID=100000");
                break;
        }
        return dt;
    }


    internal static object get_servicecharges(SMVTS_SERVICECHARGES _OBJ_SERVICECHARGES)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_SERVICECHARGES @Operation = 'SelectOrderBy'");
        return dt;
    }

    internal static DataTable GetShoppingemail(SMVTS_SHOPING_USERS _obj_shopping_Users)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_SHOPING_USERS @operation='check_login',@USER_EMAILID='" + _obj_shopping_Users.USER_EMAILID + "'");
        return dt;
    }

    internal static bool set_raiseticket(SMVTS_RAISETICKET _obj_DemoReq)
    {
        bool status = false;
        switch (_obj_DemoReq.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery1("EXEC USP_SMVTS_RAISETICKET @OPERATION = 'Insert'"
                                 + ",  @TICKET_REQUESTORNAME='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_REQUESTORNAME)
                                 + "', @TICKET_DATETIME='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_DATETIME)
                                 + "', @TICKET_EMAILID='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_EMAILID)
                                 + "', @TICKET_COMPANYNAME='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_COMPANYNAME)
                                 + "', @TICKET_MOBILENO='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_MOBILENO)
                                 + "',@TICKET_TICKETDESC='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_DESC)
                                 + "',@TICKET_COMPLETEDBY='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_COMPLETEDBY)
                                 + "',@TICKET_COMPLETEDDATE='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_COMPLETEDDATE)
                                 + "',@TICKET_COMMENTS='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_COMMENTS)
                                 + "',@TICKET_STATUS=0"))
                    status = true;
                else
                    status = false;
                break;



            default:
                break;
        }
        return status;
    }






    internal static DataTable Get_INCOMECALCULATOR(SMVTS_INCOMECALCULATOR _obj_CALCULATOR)
    {
        try
        {
            DataTable dt = new DataTable();
            switch (_obj_CALCULATOR.OPERATION)
            {

                case operation.get_structure://to load static advertise in dynamic manner here screen
                    dt = ExecuteQuery("EXEC USP_SMVTS_INCOMECALCULATOR @OPERATION='SELECT' ");
                    break;
                default:
                    break;
            }
            return dt;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    internal static DataTable Get_customerid(SMVTS_OUTSTANDINGAMOUNT _obj_OUTSTANDINGAMOUNT)
    {
        DataTable dt = new DataTable();
        switch (_obj_OUTSTANDINGAMOUNT.OPERATION)
        {
            case operation.Check:

                dt = ExecuteQuery("select CATEG_ID,CATEG_NAME,CATEG_CONTACTPERSON,CATEG_NOOFDEVICES,CATEG_MOBILENUMBER,CATEG_EMAILID,CATEG_ADDRESS,CATEG_COUNTRY_ID,CATEG_STATE_ID,CATEG_CITY_ID,CATEG_ZIPCODE,OUTSTANDING_CUSTOMERID,OUTSTANDING_CUSTOMER_LOGINID,OUTSTANDING_DATE,OUTSTANDING_AMOUNT,OUTSTANDING_AMOUNTTYPE,OUTSTANDING_STATUS from SMVTS_CATEGORIES(nolock) inner join SMVTS_OUTSTANDINGAMOUNT(nolock) on CATEG_ID=OUTSTANDING_CUSTOMERID where OUTSTANDING_CUSTOMER_LOGINID='" + _obj_OUTSTANDINGAMOUNT.OUTSTANDING_CUSTOMER_LOGINID + "'");

                break;
            default:
                break;

        }
        return dt;
    }



    internal static DataTable Get_outstanding(SMVTS_CLIENTOUTSTANDINGAMOUNT _OBJ)
    {
        DataTable dt = new DataTable();
        switch (_OBJ.OPERATION)
        {
            case operation.Check:

                dt = ExecuteQuery("SELECT* FROM SMVTS_CLIENTOUTSTANDINGAMOUNT(NOLOCK) WHERE CLIENTOUTSTANDING_CUSTOMERID='" + _OBJ.CLIENTOUTSTANDING_CUSTOMERID + "' AND CLIENTOUTSTANDING_STATUS=1");

                break;
            default:
                break;

        }
        return dt;
    }
    internal static DataTable set_Invoice(SMVTS_INVOICE _objinvoice)
    {
        DataTable status = new DataTable();
        switch (_objinvoice.OPERATION)
        {
            case operation.Insert:
                status = (ExecuteQuery("EXEC USP_SMVTS_INVOICE @OPERATION='Insert',@INV_NUMBER='" + _objinvoice.INV_NUMBER + "',@INV_QUANTITY='" + _objinvoice.INV_QUANTITY + "',@INV_AMOUNT='" + _objinvoice.INV_AMOUNT + "',@INV_DESC='" + _objinvoice.INV_DESC + "',@INV_CATEGID='" + _objinvoice.INV_CATEGID + "'"));
                break;
            default:
                break;
        }
        return status;



    }



    internal static DataTable get_countries_quickpay(SMVTS_COUNTRIES _obj_countries)
    {
        DataTable dt = new DataTable();
        switch (_obj_countries.OPERATION)
        {
            case operation.Check:

                dt = ExecuteQuery("select SMVTS_COUNTRIES.COUNTRY_ID,SMVTS_COUNTRIES.COUNTRY_NAME,CATEG_ID,CATEG_COUNTRY_ID,CATEG_NAME,CATEG_STATE_ID,CATEG_CITY_ID from SMVTS_CATEGORIES  inner join SMVTS_COUNTRIES on CATEG_COUNTRY_ID=SMVTS_COUNTRIES.COUNTRY_ID where SMVTS_COUNTRIES.COUNTRY_ID='" + _obj_countries.COUNTRY_ID + "'");

                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable get_statequickpay(SMVTS_STATES _obj_states_quickpay)
    {
        DataTable dt = new DataTable();
        switch (_obj_states_quickpay.OPERATION)
        {
            case operation.Check:

                dt = ExecuteQuery("select STATE_COUNTRY_ID,STATE_ID,STATE_NAME,CATEG_ID,CATEG_COUNTRY_ID,CATEG_NAME,CATEG_STATE_ID,CATEG_CITY_ID from SMVTS_CATEGORIES inner join SMVTS_STATES on CATEG_STATE_ID=STATE_ID where STATE_ID='" + _obj_states_quickpay.STATE_ID + "'");

                break;
            default:
                break;

        }
        return dt;
    }



    internal static DataTable get_cities_quickpay(SMVTS_CITIES _obj_cities_quickpay)
    {
        DataTable dt = new DataTable();
        switch (_obj_cities_quickpay.OPERATION)
        {
            case operation.Check:

                dt = ExecuteQuery("select CITY_CITYID,CITY_NAME,CATEG_ID,CATEG_COUNTRY_ID,CATEG_NAME,CATEG_STATE_ID,CATEG_CITY_ID from SMVTS_CATEGORIES inner join SMVTS_CITIES on CATEG_CITY_ID=CITY_CITYID where CITY_CITYID='" + _obj_cities_quickpay.CITY_CITYID + "'");
                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable Get_outstanding(SMVTS_OUTSTANDINGAMOUNT _obj_OUT)
    {
        DataTable dt = new DataTable();
        switch (_obj_OUT.OPERATION)
        {
            case operation.Check:

                dt = ExecuteQuery("create table #table2(tval varchar(50)) select CATEG_ID,CATEG_NAME,CATEG_CONTACTPERSON,CATEG_NOOFDEVICES,CATEG_MOBILENUMBER,CATEG_EMAILID,CATEG_ADDRESS,CATEG_COUNTRY_ID,CATEG_STATE_ID,CATEG_CITY_ID,CATEG_ZIPCODE,OUTSTANDING_CUSTOMERID,OUTSTANDING_CUSTOMER_LOGINID,OUTSTANDING_DATE,OUTSTANDING_AMOUNT,OUTSTANDING_AMOUNTTYPE,OUTSTANDING_STATUS into #table1 from SMVTS_CATEGORIES(nolock) inner join SMVTS_OUTSTANDINGAMOUNT(nolock) on CATEG_ID=OUTSTANDING_CUSTOMERID where OUTSTANDING_CUSTOMER_LOGINID='" + _obj_OUT.OUTSTANDING_CUSTOMER_LOGINID + "' insert into #table2 select convert(varchar,(SUM(cast(isnull(OUTSTANDING_AMOUNT,0) as decimal(12,2))))) from SMVTS_CATEGORIES(nolock) inner join SMVTS_OUTSTANDINGAMOUNT(nolock) on CATEG_ID=OUTSTANDING_CUSTOMERID where OUTSTANDING_CUSTOMER_LOGINID='" + _obj_OUT.OUTSTANDING_CUSTOMER_LOGINID + "' select * from #table1,#table2 drop table #table1 drop table #table2");

                break;
            case operation.select:

                dt = ExecuteQuery("select OUTSTANDING_PRESENTINVOICEAMOUNT,CATEG_ID from smvts_outstandingamount(nolock) inner join SMVTS_CATEGORIES(nolock)on OUTSTANDING_CUSTOMERID=CATEG_ID  where OUTSTANDING_CUSTOMER_LOGINID='" + _obj_OUT.OUTSTANDING_CUSTOMER_LOGINID + "'");


                break;
            default:
                break;

        }
        return dt;
    }
    internal static DataTable get_Vehicleslist_db(SMVTS_VEHICLES _obj_vehicles, string DBNAME)
    {
        DataTable dt = new DataTable();
        switch (_obj_vehicles.OPERATION)
        {
            case operation.Check:

                dt = Dal.ExecuteQueryDB1("select * from SMVTS_VEHICLES(nolock) where VEHICLES_REGNUMBER='" + _obj_vehicles.VEHICLES_REGNUMBER + "' and VEHICLES_CATEGORY_ID='" + _obj_vehicles.VEHICLES_CATEGORY_ID + "'", DBNAME);
                break;
            default:
                break;

        }
        return dt;
    }
    internal static DataTable get_Vehicleslist(SMVTS_VEHICLES _obj_vehicles)
    {
        DataTable dt = new DataTable();
        switch (_obj_vehicles.OPERATION)
        {
            case operation.Check:

                dt = ExecuteQuery("select * from SMVTS_VEHICLES(nolock) where VEHICLES_REGNUMBER='" + _obj_vehicles.VEHICLES_REGNUMBER + "' and VEHICLES_CATEGORY_ID='" + _obj_vehicles.VEHICLES_CATEGORY_ID + "'");
                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable get_outstandingamount(SMVTS_CUSTOMERSERVICECHARGESOUTSTANDINGAMOUNT _obj_Smvts_outstanding)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_outstanding.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("select * from SMVTS_CATEGORIES(nolock) inner join SMVTS_CUSTOMERSERVICECHARGESOUTSTANDINGAMOUNT(nolock) on SERVICECHARGES_CATEGID=CATEG_ID where CATEG_ID='" + _obj_Smvts_outstanding.SERVICECHARGES_CATEGID + "'");

                break;
            case operation.SelectAll:

                dt = ExecuteQuery("EXEC USP_SMVTS_CUSTOMERSERVICECHARGESOUTSTANDINGAMOUNT @OPERATION = 'SELECTALL', @SERVICECHARGES_CATEGID ='" + _obj_Smvts_outstanding.SERVICECHARGES_CATEGID + "'");

                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable get_outstanding(SMVTS_CUSTOMERSERVICECHARGESOUTSTANDINGAMOUNT _obj)
    {
        DataTable dt = new DataTable();
        switch (_obj.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_SMVTS_CUSTOMERSERVICECHARGESOUTSTANDINGAMOUNT @OPERATION = 'SELECT', @SERVICECHARGES_CATEGID ='" + _obj.SERVICECHARGES_CATEGID + "'");
                break;
            default:
                break;

        }
        return dt;
    }

    internal static DataTable Get_out(SMVTS_OUTSTANDINGAMOUNT _obj_OUT)
    {
        DataTable dt = new DataTable();
        switch (_obj_OUT.OPERATION)
        {
            case operation.select:

                dt = ExecuteQuery("create table #table2(tval float)select CATEG_ID,CATEG_NAME,CATEG_CONTACTPERSON,CATEG_NOOFDEVICES,CATEG_MOBILENUMBER,CATEG_EMAILID,CATEG_ADDRESS,CATEG_COUNTRY_ID,CATEG_STATE_ID,CATEG_CITY_ID,CATEG_ZIPCODE,OUTSTANDING_ID,OUTSTANDING_CUSTOMERID,OUTSTANDING_CUSTOMER_LOGINID,OUTSTANDING_DATE,OUTSTANDING_AMOUNT,OUTSTANDING_AMOUNTTYPE,OUTSTANDING_STATUS into #table1 from SMVTS_CATEGORIES(nolock) inner join SMVTS_OUTSTANDINGAMOUNT(nolock) on CATEG_ID=OUTSTANDING_CUSTOMERID where OUTSTANDING_CUSTOMER_LOGINID='" + _obj_OUT.OUTSTANDING_CUSTOMER_LOGINID + "' insert into #table2 select isnull(sum(convert(decimal,o.OUTSTANDING_AMOUNT)),0) from SMVTS_CATEGORIES(nolock) c inner join SMVTS_OUTSTANDINGAMOUNT(nolock)  o on c.CATEG_ID=o.OUTSTANDING_CUSTOMERID where OUTSTANDING_CUSTOMER_LOGINID='" + _obj_OUT.OUTSTANDING_CUSTOMER_LOGINID + "' select * into #table3 from #table1,#table2 select OUTSTANDING_ID,OUTSTANDING_CUSTOMERID,OUTSTANDING_CUSTOMER_LOGINID,OUTSTANDING_AMOUNT,OUTSTANDING_AMOUNTTYPE,tval from #table3  drop table #table1 drop table #table2 drop table #table3");



                break;
            default:
                break;

        }
        return dt;
    }
    internal static bool set_SMVTS_OUTSTANDINGTRANSATION(SMVTS_OUTSTANDINGTRANSATION _obj_SMVTS_OUTSTANDINGTRANSATION)
    {
        bool status = false;
        switch (_obj_SMVTS_OUTSTANDINGTRANSATION.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQuery("EXEC USP_SMVTS_OUTSTANDINGTRANSACTION @OPERATION='Insert', @OUTSTANDINGTRANSATION_TRANSACTIONID='"
                    + _obj_SMVTS_OUTSTANDINGTRANSATION.OUTSTANDINGTRANSATION_TRANSACTIONID + "',@OUTSTANDINGTRANSATION_categid='"
                    + _obj_SMVTS_OUTSTANDINGTRANSATION.OUTSTANDINGTRANSATION_categid + "',@OUTSTANDINGTRANSATION_monthname='"
                    + _obj_SMVTS_OUTSTANDINGTRANSATION.OUTSTANDINGTRANSATION_monthname + "',@OUTSTANDINGTRANSATION_monthamount='"
                    + _obj_SMVTS_OUTSTANDINGTRANSATION.OUTSTANDINGTRANSATION_monthamount + "'"

                    ))
                    status = true;
                else
                {
                    status = false;
                }
                break;
        }
        return status;
    }
    internal static DataSet get_GeoUniZoneDashboard(string userid, string lat, string lng, int radius, string categid, string pondicherylat, string pondicherylong, string chennailat, string chennailong, string bangalorelat, string bangalorelong, string itclat, string itclong, string hydlat, string hydlong, string mrflat, string mrflong, string mrfgoalat, string mrfgoalong, int pondicheryradius, int chennairadius, int bangaloreradius, int itcradius, int hydradius, int mrfradius, int mrfgoaradius, string dbname)
    {
        string strConn = BLL.Decrypt(dbname);
        DataSet dt = new DataSet();
        //string query = "EXEC USP_STOPPAGE_NOTIFICATIONS_NonGEOfence @USER_ID='" + userid + "',@INTERVAL=" + radius + ",@CATEGID='" + categid + "'";

        //dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);
        string query = "EXEC USP_GETGEOUniZONEDASHBOARD @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "', @pondicherylat='" + pondicherylat + "',@pondicherylong='" + pondicherylong + "',@chennailat='" + chennailat + "',@chennailong='" + chennailong + "',@bangalorelat='" + bangalorelat + "',@bangalorelong='" + bangalorelong + "',@itclat='" + itclat + "',@itclong='" + itclong + "',@hydlat='" + hydlat + "',@hydlong='" + hydlong + "',@mrflat='" + mrflat + "',@mrflong='" + mrflong + "',@mrfgoalat='" + mrfgoalat + "',@mrfgoalong='" + mrfgoalong + "',@pondicheryradius=" + pondicheryradius + ",@chennairadius=" + chennairadius + ",@bangaloreradius=" + bangaloreradius + ",@itcradius=" + itcradius + ",@hydradius=" + hydradius + ",@mrfradius=" + mrfradius + ",@mrfgoaradius=" + mrfgoaradius + "";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }

    internal static DataSet get_UniZoneDashboard2(string userid, string lat, string lng, int radius, string categid, string citylat, string citylng, int cityradius, string mumbailat, string mumbailong, string punelat, string punelong, string vapilat, string vapilong, string ahmedabadlat, string ahmedabadlong, string delhlat, string delhilong, string nagpurlat, string nagpurlong, string aurangabadlat, string aurangabadlong, int mumbairad, int punerad, int vapirad, int ahmedabadradius, int delhiradius, int nagpurradius, int aurangabadradius, string operation, string dbname)
    {
        string strConn = BLL.Decrypt(dbname);
        DataSet dt = new DataSet();
        //string query = "EXEC USP_SMVTS_PETROLPUMP_LOCATION @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@mumbailat='" + mumbailat + "',@mumbailong='" + mumbailong + "',@punelat='" + punelat + "',@punelong='" + punelong + "',@vapilat='" + vapilat + "',@vapilong='" + vapilong + "',@ahmedabadlat='" + ahmedabadlat + "',@ahmedabadlong='" + lat + "',@delhlat='" + delhlat + "',@delhilong='" + delhilong + "',@nagpurlat='" + nagpurlat + "',@nagpurlong='" + nagpurlong + "',@aurangabadlat='" + aurangabadlat + "',@aurangabadlong='" + aurangabadlong + "',@mumbairad=" + mumbairad + ",@punerad=" + punerad + ",@vapirad=" + vapirad + ",@ahmedabadradius=" + ahmedabadradius + ",@delhiradius=" + delhiradius + ",@nagpurradius=" + nagpurradius + ",@aurangabadradius=" + aurangabadradius + "";
        string query = "EXEC USP_GETUniZONEDASHBOARD2 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@mumbailat='" + mumbailat + "',@mumbailong='" + mumbailong + "',@punelat='" + punelat + "',@punelong='" + punelong + "',@vapilat='" + vapilat + "',@vapilong='" + vapilong + "',@ahmedabadlat='" + ahmedabadlat + "',@ahmedabadlong='" + lat + "',@delhlat='" + delhlat + "',@delhilong='" + delhilong + "',@nagpurlat='" + nagpurlat + "',@nagpurlong='" + nagpurlong + "',@aurangabadlat='" + aurangabadlat + "',@aurangabadlong='" + aurangabadlong + "',@mumbairad=" + mumbairad + ",@punerad=" + punerad + ",@vapirad=" + vapirad + ",@ahmedabadradius=" + ahmedabadradius + ",@delhiradius=" + delhiradius + ",@nagpurradius=" + nagpurradius + ",@aurangabadradius=" + aurangabadradius + "";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }

    internal static DataSet get_petrolpumplocation(string userid, string categid, string dbname)
    {
        string strConn = BLL.Decrypt(dbname);
        DataSet dt = new DataSet();
        string query = "EXEC USP_SMVTS_PETROLPUMP_VEHICLES @USERID=" + userid + ",@CATEGID='" + categid + "'";
        // dt =ExecuteQuery("EXEC USP_SMVTS_PETROLPUMP_LOCATION @USERID=" + userid + ",@CATEGID='" + categid + "'");
        // string query = "EXEC USP_GETUniZONEDASHBOARD2 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@mumbailat='" + mumbailat + "',@mumbailong='" + mumbailong + "',@punelat='" + punelat + "',@punelong='" + punelong + "',@vapilat='" + vapilat + "',@vapilong='" + vapilong + "',@ahmedabadlat='" + ahmedabadlat + "',@ahmedabadlong='" + lat + "',@delhlat='" + delhlat + "',@delhilong='" + delhilong + "',@nagpurlat='" + nagpurlat + "',@nagpurlong='" + nagpurlong + "',@aurangabadlat='" + aurangabadlat + "',@aurangabadlong='" + aurangabadlong + "',@mumbairad=" + mumbairad + ",@punerad=" + punerad + ",@vapirad=" + vapirad + ",@ahmedabadradius=" + ahmedabadradius + ",@delhiradius=" + delhiradius + ",@nagpurradius=" + nagpurradius + ",@aurangabadradius=" + aurangabadradius + "";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }

    internal static DataSet get_allpetrolpumplocation(string categid, string dbname)
    {
        string strConn = BLL.Decrypt(dbname);
        DataSet dt = new DataSet();
        string query = "EXEC USP_PETROL_LOCATION @CATEGID='" + categid + "'";
        // dt =ExecuteQuery("EXEC USP_SMVTS_PETROLPUMP_LOCATION @USERID=" + userid + ",@CATEGID='" + categid + "'");
        // string query = "EXEC USP_GETUniZONEDASHBOARD2 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@mumbailat='" + mumbailat + "',@mumbailong='" + mumbailong + "',@punelat='" + punelat + "',@punelong='" + punelong + "',@vapilat='" + vapilat + "',@vapilong='" + vapilong + "',@ahmedabadlat='" + ahmedabadlat + "',@ahmedabadlong='" + lat + "',@delhlat='" + delhlat + "',@delhilong='" + delhilong + "',@nagpurlat='" + nagpurlat + "',@nagpurlong='" + nagpurlong + "',@aurangabadlat='" + aurangabadlat + "',@aurangabadlong='" + aurangabadlong + "',@mumbairad=" + mumbairad + ",@punerad=" + punerad + ",@vapirad=" + vapirad + ",@ahmedabadradius=" + ahmedabadradius + ",@delhiradius=" + delhiradius + ",@nagpurradius=" + nagpurradius + ",@aurangabadradius=" + aurangabadradius + "";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }
    internal static DataTable get_Database_Names(SMVTS_Database _obj_database_names)
    {

        string query = "select * from SMVTS_ARCHIVE_ID";

        DataTable dt = ExecuteQuery(query);


        return dt;
    }
    internal static DataTable get_Database_ID(string name)
    {
        string query = "select ARCHIVEID,ARCHIVE_DBNAME,ARCHIVE_TRIPDATAID from SMVTS_ARCHIVE_ID where ARCHIVE_DBNAME like '%" + name + "%'";
        DataTable dt = ExecuteQuery(query);
        return dt;
    }

    internal static DataSet get_TripGeofence(string deviceid, string startdate, string enddate, string strConn)
    {
        string query = "EXEC RPT_GEOFENCE_TRIPCOUNSELLING @DEVICEID=" + deviceid + " ,@FROMDATE='" + startdate + "',@TODATE='" + enddate + "'  ";
        DataSet dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);
        return dt;
    }
    public static bool CHECKMRL(int USERID, string DBNAME, string VehicleNo)
    {


        bool strAns = false;
        string query = "SELECT VEHICLES_REGNUMBER,VEHICLES_CATEGORY_ID,VEHICLES_DEVICE_ID  FROM FN_CLIENT_DEVICES(" + USERID + ") INNER JOIN SMVTS_VEHICLES(NOLOCK) ON VEHICLES_DEVICE_ID=DEVICE_ID AND VEHICLES_STATUS=1 and VEHICLES_REGNUMBER='" + VehicleNo + "'";
        DataTable DTQUERRY = Dal.ExecuteQueryDB1(query, DBNAME);
        if (DTQUERRY != null)
        {
            if (DTQUERRY.Rows.Count > 0)
            {
                strAns = true;
            }
        }

        return strAns;
    }

    internal static DataTable get_TRIPINFO_LOADSTATUS(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate, string dbname)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {

            case "GETLOC":
                dt_TripHistory = Dal.ExecuteQueryDB1(" EXEC USP_SMVTS_TRIPINFO_LOADSTATUS @Operation =null, @DEVICEID='" + Device_ID + "', @FROMDATE='" + StartDate + "' , @TODATE = '" + EndDate + "'", dbname);
                break;
            default:
                break;

        }
        return dt_TripHistory;
    }

    internal static DataTable get_ticketid(SMVTS_RAISETICKET _obj_DemoReq)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("EXEC USP_SMVTS_RAISETICKET @OPERATION = 'GetLastrec' ");


        return dt;
    }

    internal static DataTable get_TripHistory_DBname(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate, string dbname)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {
            case "DEVICES":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_TRIPHISTORY @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
                break;
            case "POINTS":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
                break;
            case "GETLOC":
                dt_TripHistory = Dal.ExecuteQueryDB1(" EXEC USP_SMVTS_TRIPHISTORY @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'", dbname);
                break;
            default:
                break;
        }
        return dt_TripHistory;
    }

    //by venkatesh archive tollgate mapping 25-09-2017
    internal static DataTable get_TripHistory_DBname_archive(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate, string dbname)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {
            case "DEVICES":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_TRIPHISTORY_ARCHIEVE @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
                break;
            case "POINTS":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
                break;
            case "GETLOC":
                dt_TripHistory = Dal.ExecuteQueryDB1(" EXEC USP_SMVTS_TRIPHISTORY_ARCHIEVE @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'", dbname);
                break;
            default:
                break;
        }
        return dt_TripHistory;
    }


    internal static DataTable get_TripHistory_castrol(string Operation, string Users_ID, string Category_ID, string Device_ID, string StartDate, string EndDate, string dbname)
    {
        DataTable dt_TripHistory = new DataTable();

        switch (Operation.ToUpper())
        {
            case "DEVICES":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_TRIPHISTORY @Operation ='DEVICES', @USERS_ID='" + Users_ID + "'");
                break;
            case "POINTS":
                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_GETNEARBYLANDMARKS @LATITUDE='" + Users_ID + "', @LONGITUDE='" + Device_ID + "', @DISTANCE='2',@CATEGORY_ID='" + Category_ID + "'");
                break;
            case "GETLOC":
                dt_TripHistory = Dal.ExecuteQueryDB1(" EXEC USP_SMVTS_TRIPHISTORY @Operation ='lOCATION', @DEVICE_ID='" + Device_ID + "', @START_DATE='" + StartDate + "' , @END_DATE = '" + EndDate + "'", dbname);
                break;
            default:
                break;
        }
        return dt_TripHistory;
    }

    internal static DataTable get_outstanding(SMVTS_OUTSTANDINGAMOUNT _obj)
    {
        DataTable dt_TripHistory = new DataTable();
        switch (_obj.OPERATION)
        {
            case operation.Select:

                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_OUTSTANDINGAMOUNT @OPERATION='select_grig'");

                break;
            case operation.Check:

                dt_TripHistory = ExecuteQuery("EXEC USP_SMVTS_OUTSTANDINGAMOUNT @OPERATION='select_grig'");

                break;
            default:
                break;
        }
        return dt_TripHistory;
    }

    internal static bool set_outstanding(SMVTS_OUTSTANDINGAMOUNT _obj)
    {
        bool status = false;
        switch (_obj.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_OUTSTANDINGAMOUNT @OPERATION = 'Insert'"
                                 + ",  @OUTSTANDING_CUSTOMERID='" + _obj.OUTSTANDING_CUSTOMERID
                                 + "', @OUTSTANDING_DATE='" + Convert.ToDateTime(_obj.OUTSTANDING_DATE)
                                 + "', @OUTSTANDING_AMOUNT='" + _obj.OUTSTANDING_AMOUNT
                                 + "', @OUTSTANDING_AMOUNTTYPE='Service Charges',@OUTSTANDING_STATUS='" + _obj.OUTSTANDING_STATUS
                                 + "',@OUTSTANDING_CREATEDBY='" + _obj.OUTSTANDING_CREATEDBY
                                 + "',@OUTSTANDING_CREATEDDATE='" + _obj.OUTSTANDING_CREATEDDATE
                    + "',@OUTSTANDING_MODIFIEDBY='" + _obj.OUTSTANDING_MODIFIEDBY
                    + "',@OUTSTANDING_MODIFIEDDATE='" + _obj.OUTSTANDING_MODIFIEDDATE
                    + "',OUTSTANDING_PRESENTINVOICEAMOUNT='" + _obj.OUTSTANDING_PRESENTINVOICEAMOUNT
                    + "',@OUTSTANDING_CUSTOMER_LOGINID='" + _obj.OUTSTANDING_CUSTOMER_LOGINID + "'"))
                    status = true;
                else
                    status = false;
                break;



            default:
                break;
        }
        return status;
    }

    internal static DataTable get_riskzone(SMVTS_ROUTES_RISKZONES _obj)
    {
        DataTable dt = new DataTable();
        switch (_obj.OPERATION)
        {
            case operation.select:

                dt = ExecuteQuery("EXEC USP_SMVTS_ROUTES_RISKZONES @OPERATION='select'");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_kml(string categ_id)
    {
        DataTable dt = new DataTable();


        dt = ExecuteQuery("SELECT * FROM SMVTS_KMLFILEURL(NOLOCK) where FILECATEGID='" + categ_id + "'");


        return dt;


    }
    internal static DataTable get_pvtsnew_driverhistory(int userid, string categid, string driverid)
    {
        DataTable dt = new DataTable();


        dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=" + userid + ",@CATEGID=" + categid + ",@DRIVERID=" + driverid + ",@OPERATION='DRIVERHISTORY',@trip_id=null");

        return dt;
    }

    internal static DataTable get_pvts_driverhistory(PVTS_DRIVERHISTORY _obj_PVTS_Drivers)
    {
        DataTable dt = new DataTable();
        switch (_obj_PVTS_Drivers.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=889,@CATEGID=86,@DRIVERID=6885,@OPERATION='DRIVERHISTORY',@trip_id=null");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_pvts_driverhistory_cd(PVTS_DRIVERHISTORY_cd _obj_cd, int userid)
    {
        DataTable dt = new DataTable();
        switch (_obj_cd.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=" + userid + ",@CATEGID=" + _obj_cd.VIOLATION_CATEGID + ",@DRIVERID=" + _obj_cd.VIOLATION_DRIVERID + ",@OPERATION='CD',@trip_id=" + _obj_cd.VIOLATION_TRIPID + "");

                break;
            default:
                break;
        }
        return dt;
    }
    internal static DataTable get_pvts_driverhistory_enginehours(PVTS_DRIVERHISTORY_cd _obj_cd, int userid)
    {
        DataTable dt = new DataTable();
        switch (_obj_cd.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=" + userid + ",@CATEGID=" + _obj_cd.VIOLATION_CATEGID + ",@DRIVERID=" + _obj_cd.VIOLATION_DRIVERID + ",@OPERATION='DRIVINGHOURS',@trip_id=" + _obj_cd.VIOLATION_TRIPID + "");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_pvts_driverhistory_rd(PVTS_DRIVERHISTORY_cd _obj_rd, int userid)
    {
        DataTable dt = new DataTable();
        switch (_obj_rd.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=" + userid + ",@CATEGID=" + _obj_rd.VIOLATION_CATEGID + ",@DRIVERID=" + _obj_rd.VIOLATION_DRIVERID + ",@OPERATION='RD',@trip_id=" + _obj_rd.VIOLATION_TRIPID + "");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_pvts_driverhistory_ra(PVTS_DRIVERHISTORY_cd _obj_ra, int userid)
    {
        DataTable dt = new DataTable();
        switch (_obj_ra.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=" + userid + ",@CATEGID=" + _obj_ra.VIOLATION_CATEGID + ",@DRIVERID=" + _obj_ra.VIOLATION_DRIVERID + ",@OPERATION='RA',@trip_id=" + _obj_ra.VIOLATION_TRIPID + "");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_pvts_driverhistory_os(PVTS_DRIVERHISTORY_cd _obj_os, int userid)
    {
        DataTable dt = new DataTable();
        switch (_obj_os.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=" + userid + ",@CATEGID=" + _obj_os.VIOLATION_CATEGID + ",@DRIVERID=" + _obj_os.VIOLATION_DRIVERID + ",@OPERATION='OS',@trip_id=" + _obj_os.VIOLATION_TRIPID + "");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_pvts_driverhistory_nd(PVTS_DRIVERHISTORY_cd _obj_nd, int userid)
    {
        DataTable dt = new DataTable();
        switch (_obj_nd.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("EXEC USP_PVTS_DRIVERHISTORY @USERID=" + userid + ",@CATEGID=" + _obj_nd.VIOLATION_CATEGID + ",@DRIVERID=" + _obj_nd.VIOLATION_DRIVERID + ",@OPERATION='ND',@trip_id=" + _obj_nd.VIOLATION_TRIPID + "");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable GET_routeId(int Trip_id)
    {
        DataTable dt = BLL.ExecuteQuery("select TRIPINFO_CASTROLROUTE_ID from PVTS_TRIPINFO(nolock) where TRIPINFO_TRIPID=" + Trip_id + "");
        return dt;
    }

    internal static DataTable GET_Journeyplanne(int Trip_id)
    {
        DataTable dt = BLL.ExecuteQuery("select TRIPINFO_VNO,TRIPINFO_TRIPID,TRIPINFO_VDEVICEID,TRIPINFO_DRIVERID,TRIPINFO_STARTDATE,TRIPINFO_DELIVERYDATE from PVTS_TRIPINFO(nolock) where TRIPINFO_TRIPID=" + Trip_id + "");
        return dt;
    }
    internal static DataTable get_tripdetails(string tripid)
    {
        DataTable dt = BLL.ExecuteQuery("exec USP_PVTS_CASTROLOPERATION @OPERATION='DEBRIEFCATEGNAME',@TRIPINFO_TRIPID=" + tripid + "");
        return dt;
    }
    internal static DataTable get_tripids(string driverid)
    {
        DataTable dt = BLL.ExecuteQuery("exec USP_PVTS_CASTROLOPERATION @OPERATION='DEBRIEFTRIPSTATUS',@TRIPINFO_DRIVERID=" + driverid + "");
        return dt;
    }


    internal static bool set_TrainerType(PVTS_TRAINERINPUT _objtrainerinput)
    {
        bool status = false;
        switch (_objtrainerinput.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("INSERT INTO PVTS_TRAINERINPUT VALUES('" + _objtrainerinput.TRAINER_TYPE + "','" + _objtrainerinput.TRAINER_DESC + "','" + _objtrainerinput.TRAINER_DATE + "'," + _objtrainerinput.TRAINER_CREATEDBY + "," + _objtrainerinput.TRAINER_STATUS + ")"))

                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataTable check_TRAINER_TYPE(string Trainertype)
    {
        DataTable dt = new DataTable();

        dt = BLL.ExecuteQuery("SELECT TRAINER_TYPE from PVTS_TRAINERINPUT(NOLOCK) where TRAINER_TYPE='" + Trainertype + "'");
        return dt;
    }

    internal static DataTable check_INCIDENT_TYPE(string Incidenttype)
    {
        DataTable dt = new DataTable();

        dt = BLL.ExecuteQuery("SELECT INCIDENT_TYPE from PVTS_INCIDENTSHARING WHERE INCIDENT_TYPE='" + Incidenttype + "'");
        return dt;
    }

    internal static bool set_IncidentType(PVTS_INCIDENTSHARING _objincidentsharing)
    {
        bool status = false;
        switch (_objincidentsharing.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("INSERT INTO PVTS_INCIDENTSHARING VALUES('" + _objincidentsharing.INCIDENT_TYPE + "','" + _objincidentsharing.INCIDENT_TYPEDATE + "'," + _objincidentsharing.INCIDENT_STATUS + ")"))

                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataTable get_PSims(PVTS_SIMS _obj_Pvts_Sims)
    {
        DataTable dt = new DataTable();
        switch (_obj_Pvts_Sims.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("select * from PRAGATIPADH_SIMS(nolock) where PSIM_STATUS=1");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_ticketclosed(SMVTS_RAISETICKET _obj_DemoReq)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("select * from SMVTS_RAISETICKET(nolock)");
        return dt;
    }

    internal static bool set_closeticket(SMVTS_TICKETCLOSE _obj_close)
    {
        bool status = false;
        switch (_obj_close.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_CLOSETICKET @OPERATION = 'Insert'"
                                 + ",  @CLOSE_TICKETID='" + Convert.ToInt32(_obj_close.CLOSE_TICKETID)
                                 + "', @CLOSE_COMPLETEDBY='" + Convert.ToString(_obj_close.CLOSE_COMPLETEDBY)
                                 + "', @CLOSE_COMPLETEDDATE='" + Convert.ToString(_obj_close.CLOSE_COMPLETEDDATE)
                                 + "', @CLOSE_COMMENTS='" + Convert.ToString(_obj_close.CLOSE_COMMENTS) + "'"))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataTable get_notworking(pvts_notworkingdevices _obj_working, string USERS_ID, string date)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_NOTWORKING_DEVICES @USER_ID = '" + USERS_ID + "',@RPT_DATE='" + date + "',@OPERATION='UP',@vehicleNo=NULL,@REMARKS=NULL,@up_date=NULL");

        return dt;
    }

    internal static DataSet getstoppage(string USER_ID, int interval, string CategId, string dbname)
    {
        string strConn = BLL.Decrypt(dbname);
        DataSet dt = new DataSet();
        string query = "EXEC USP_STOPPAGE_NOTIFICATIONS_NonGEOfence @USER_ID='" + USER_ID + "',@INTERVAL=" + interval + ",@CATEGID='" + CategId + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }

    internal static DataTable get_closed(SMVTS_RAISETICKET _obj_DemoReq)
    {
        DataTable dt = new DataTable();
        switch (_obj_DemoReq.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("select * from SMVTS_RAISETICKET(nolock)");

                break;
            case operation.Check:

                dt = ExecuteQuery("select * from SMVTS_RAISETICKET(nolock) where TICKET_STATUS=1 order by TICKET_ID desc");

                break;
            case operation.Update:

                dt = ExecuteQuery("select * from SMVTS_RAISETICKET(nolock) where TICKET_STATUS=0 order by TICKET_ID desc");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable get_count(SMVTS_RAISETICKET _obj_DemoReq)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("select * from SMVTS_RAISETICKET(nolock) where TICKET_ID=" + _obj_DemoReq.DEMOREQUEST_ID + " and TICKET_STATUS=1");
        return dt;
    }

    internal static bool set_count(SMVTS_RAISETICKET _obj_DemoReq)
    {
        bool status = false;
        switch (_obj_DemoReq.OPERATION)
        {
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_RAISETICKET @OPERATION = 'Update',@TICKET_ID=" + Convert.ToInt32(_obj_DemoReq.DEMOREQUEST_ID)
                                 + ",  @TICKET_COMPLETEDBY='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_COMPLETEDBY)
                                 + "', @TICKET_COMPLETEDDATE='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_COMPLETEDDATE)
                                 + "', @TICKET_COMMENTS='" + Convert.ToString(_obj_DemoReq.DEMOREQUEST_COMMENTS)
                                 + "', @TICKET_STATUS=" + Convert.ToBoolean(_obj_DemoReq.DEMOREQUEST_STATUS) + ""))
                    status = true;
                else
                    status = false;
                break;
            default:
                break;
        }
        return status;
    }

    internal static DataSet getviolationMarquee(string USER_ID, string p1, string p2, string categ, string DBNAME)
    {
        string strConn = BLL.Decrypt(DBNAME);
        DataSet dt = new DataSet();
        string query = "EXEC USP_ROUTEVIOLATION_KML1 @USERID=" + USER_ID + ",@LOCATION_LAT='" + p1 + "',@LOCATION_LONG ='" + p2 + "',@CATEGID='" + categ + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }

    public static DataTable getfuelvalue(SMVTS_FUELTYPE _obj_Smvts_fuelvalue)
    {
        DataTable dt = new DataTable();
        if (_obj_Smvts_fuelvalue.OPERATION == operation.select)
        {
            dt = ExecuteQuery("select * from SMVTS_FUELTYPE(nolock)");
        }
        return dt;
    }
    internal static DataTable get_fuelrefil(string strUserID, string strDeviceID, string strStartDate, string strEndDate, int interval, string operation)
    {
        return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                           + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@MININTERVAL=" + interval + ",@OPERATION='" + operation + "'");
       // return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
        //                    + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @MININTERVAL=" + interval);//", @STARTDATE ="
    }

    internal static DataTable get_fuelconsumption_report(string strUserID, string strDeviceID, string strStartDate, string strEndDate, int interval)
    {
        return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                           + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@MININTERVAL=" + interval + "");
    }

    //one time VEhicle Registration from Dhanush Login
    public static DataTable get_Vehicles_details(SMVTS_VEHICLES _obj_Smvts_Vehicles, string dbname)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Vehicles.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'select',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'select', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'", dbname);

                break;

            case operation.Check:
                // checking Devices
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'", dbname);

                break;
            case operation.Delete:
                // checking Drivers
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Check', @VEHICLES_DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'", dbname);

                break;
            case operation.Update:
                // checking Register number no to repeat (Add)
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'", dbname);
                else
                    // checking Register number no to repeat (Edit)
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'checkregno', @VEHICLES_REGNUMBER ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_REGNUMBER) + "',@VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID) + "'", dbname);

                break;
            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Vehicles.CREATEDBY) == "0")
                {

                    if (Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY) != "-1")
                    {
                        dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'", dbname);
                    }
                    else
                    {
                        dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAssignedVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "', @VEHICLES_MODIFIEDBY = '" + _obj_Smvts_Vehicles.LASTMDFBY + "'", dbname);
                    }
                }
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Select', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "' ,@VEHICLES_STATUS='" + _obj_Smvts_Vehicles.VEHICLES_STATUS + "',@VEHICLES_CREATEDBY='" + _obj_Smvts_Vehicles.CREATEDBY + "' ", dbname);
                break;

            case operation.Insert:  // for showing in the grid
                if (Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) != "")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'SelectAllVehicles', @VEHICLES_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID) + "'", dbname);

                break;

            default:
                break;


        }
        return dt;
    }

    public static DataTable get_Drivers_details(SMVTS_DRIVERS _obj_Smvts_Drivers, string dbname)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Drivers.OPERATION)
        {
            case operation.Select:
                dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'select', @DRIVER_CATEGORY_ID=" + (Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) == "0" ? "null" : "'" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'")
                                            + ", @DRIVER_ID =" + (Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) == "0" ? "null" : "'" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) + "'") + "", dbname);
                break;

            case operation.Check://to check for already exising Driver name
                if (Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Check', @DRIVER_NAME ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_NAME) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Check', @DRIVER_NAME ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_NAME) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) + "'", dbname);

                break;

            case operation.Insert: //to check for already exising Licence No
                if (Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Checklicense', @DRIVER_LICENSENO ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Checklicense', @DRIVER_LICENSENO ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO) + "', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID) + "'", dbname);

                break;


            case operation.Empty:
                if (!(_obj_Smvts_Drivers.DRIVER_STATUS))
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Select', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Select', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_STATUS ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS) + "'", dbname);
                break;
            case operation.Update:

                dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'FreeDrivers', @DRIVER_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID) + "', @DRIVER_STATUS ='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS) + "', @DRIVER_ID=" + (_obj_Smvts_Drivers.DRIVER_ID == 0 ? "null" : "'" + _obj_Smvts_Drivers.DRIVER_ID + "'"), dbname);



                break;

            default:
                break;
        }
        return dt;
    }

    public static DataTable get_Devices_details(SMVTS_DEVICES _obj_Smvts_Devices, string dbname)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Devices.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'select'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'select', @DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) + "'", dbname);

                break;

            case operation.Check:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) == "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'Check', @DEVICE_NAME ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_NAME) + "', @DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'Check', @DEVICE_NAME ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_NAME) + "', @DEVICE_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) + "'", dbname);

                break;

            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) != "0")
                    //Edit Mode of vehicles
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'FreeDevice', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "', @DEVICE_ID=" + (_obj_Smvts_Devices.DEVICE_ID == 0 ? "null" : "'" + _obj_Smvts_Devices.DEVICE_ID + "'"), dbname);
                else
                    //Add Mode of vehicles
                    //dt = ExecuteQuery("EXEC USP_SMVTS_DEVICES @Operation = 'FreeDeviceforaCat', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'");
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'FreeDevice', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'", dbname);
                break;

            case operation.Update:
                dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'AllforCateg', @DEVICE_CATEGORY_ID  ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "'", dbname);
                break;

            case operation.Insert:
                dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'GetLastrec' ", dbname);
                break;

            default:
                break;
        }
        return dt;
    }

    public static DataTable get_Sims_details(SMVTS_SIMS _obj_Smvts_Sims, string dbname)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Sims.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Sims.SIM_ID) != "0")
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Select', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "'", dbname);
                else if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_NUMBER != "0"))
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Select', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Select', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'", dbname);
                break;
            case operation.Insert:

                dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Select' ", dbname);
                break;

            case operation.Check:
                if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_NUMBER != "0"))
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_NUMBER ='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER) + "' ,@SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_NUMBER ='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER) + "', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'", dbname);
                break;
            case operation.Delete:

                if ((Convert.ToString(_obj_Smvts_Sims.SIM_ID) == "0") && (_obj_Smvts_Sims.SIM_SERIALNO != "0"))
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'", dbname);
                else
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Check', @SIM_SERIALNO ='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO) + "', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'", dbname);

                break;

            case operation.Empty:
                if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
                    //client add
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "'", dbname);


                else if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) == "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
                    //dhnaush add
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'FreeSim', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'", dbname);

                break;

            case operation.Update:
                if ((Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_ID) != "0") && (Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) != "0"))
                    //Find out Current Sim and Free sim for Client  (edit)
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'FreeSimEdit', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_CATEGORY_ID) + "', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'", dbname);

                else
                    //Find out Current Sim and Free sim for Org (edit)
                    dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'FreeSimEdit', @SIM_ID ='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID) + "', @SIM_STATUS ='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS) + "'", dbname);

                break;
            default:
                break;
        }
        return dt;
    }

    public static bool set_Vehicles_details(SMVTS_VEHICLES _obj_Smvts_Vehicles, string dbname, string categname)
    {
        bool status = false;
        switch (_obj_Smvts_Vehicles.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Insert' , @VEHICLES_CATEGORY_ID='" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID
                                  + "', @VEHICLES_REGNUMBER='" + _obj_Smvts_Vehicles.VEHICLES_REGNUMBER
                                  + "', @VEHICLES_VEHICLEMAKEMODEL_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_VEHICLEMAKEMODEL_ID)
                                  + "', @VEHICLES_MAXSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MAXSPEED)
                                  + "', @VEHICLES_MILEAGE='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MILEAGE)
                                  + "', @VEHICLES_OPENINGODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OPENINGODOMETER)
                                  + "', @VEHICLES_CURRENTODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CURRENTODOMETER)
                                  + "', @VEHICLES_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID)
                                  + "', @VEHICLES_DRIVER_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID)
                                  + "', @VEHICLES_RESERVEVOLUME='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_RESERVEVOLUME)
                                  + "', @VEHICLES_TANKCAPACITY='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_TANKCAPACITY)
                                  + "', @VEHICLES_STATUS='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_STATUS)
                                  + "', @VEHICLES_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Vehicles.CREATEDBY)
                                  + "', @VEHICLES_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.CREATEDDATE)
                                  + "', @VEHICLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY)
                                  + "', @VEHICLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFDATE)
                    // + "', @VEHICLES_AVGSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_AVGSPEED)
                                  + "', @VEHICLES_CAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CAPACITY)
                                  + "', @VEHICLES_SEATINGCAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_SEATINGCAPACITY)
                                  + "', @VEHICLES_VENDORMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_VENDORMASTER_ID)
                                  + "', @VEHICLES_OFFICEMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OFFICEMASTER_ID)
                    // + "', @VEHICLES_TRAVELDISTINDAY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY)
                                  + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_VEHICLES @Operation = 'Update',@VEHICLES_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_ID)
                                 + "',  @VEHICLES_CATEGORY_ID='" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID
                                  + "', @VEHICLES_REGNUMBER='" + _obj_Smvts_Vehicles.VEHICLES_REGNUMBER
                                  + "', @VEHICLES_VEHICLEMAKEMODEL_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_VEHICLEMAKEMODEL_ID)
                                  + "', @VEHICLES_MAXSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MAXSPEED)
                                  + "', @VEHICLES_MILEAGE='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_MILEAGE)
                                  + "', @VEHICLES_OPENINGODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OPENINGODOMETER)
                                  + "', @VEHICLES_CURRENTODOMETER='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CURRENTODOMETER)
                                  + "', @VEHICLES_DEVICE_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DEVICE_ID)
                                  + "', @VEHICLES_DRIVER_ID='" + Convert.ToInt32(_obj_Smvts_Vehicles.VEHICLES_DRIVER_ID)
                                  + "', @VEHICLES_RESERVEVOLUME='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_RESERVEVOLUME)
                                  + "', @VEHICLES_TANKCAPACITY='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_TANKCAPACITY)
                                  + "', @VEHICLES_STATUS='" + Convert.ToDouble(_obj_Smvts_Vehicles.VEHICLES_STATUS)
                                  + "', @VEHICLES_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFBY)
                                  + "', @VEHICLES_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Vehicles.LASTMDFDATE)
                    //    + "', @VEHICLES_AVGSPEED='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_AVGSPEED)
                                  + "', @VEHICLES_CAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_CAPACITY)
                                  + "', @VEHICLES_SEATINGCAPACITY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_SEATINGCAPACITY)
                                  + "', @VEHICLES_VENDORMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_VENDORMASTER_ID)
                                  + "', @VEHICLES_OFFICEMASTER_ID='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_OFFICEMASTER_ID)
                    //    + "',  @VEHICLES_TRAVELDISTINDAY='" + Convert.ToString(_obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY)
                                  + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            //case operation.Check:
            //    if (ExecuteNonQuery("EXEC USP_SMVTS_VEHICLES @Operation = 'updateeta',@VEHICLES_CATEGORY_ID=" + _obj_Smvts_Vehicles.VEHICLES_CATEGORY_ID + ",@VEHICLES_DEVICE_ID=" + _obj_Smvts_Vehicles.VEHICLES_DEVICE_ID + ",@VEHICLES_AVGSPEED=" + _obj_Smvts_Vehicles.VEHICLES_AVGSPEED + ",@VEHICLES_TRAVELDISTINDAY=" + _obj_Smvts_Vehicles.VEHICLES_TRAVELDISTINDAY))
            //        status = true;
            //    else
            //        status = false;
            //    break;


            default:
                break;
        }
        return status;
    }

    public static bool set_Sims_details(SMVTS_SIMS _obj_Smvts_Sims, string dbname, string categname)
    {
        bool status = false;
        switch (_obj_Smvts_Sims.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Insert', @SIM_CATEGORY_ID='" + _obj_Smvts_Sims.SIM_CATEGORY_ID
                                  + "', @SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                  + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                  + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                  + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                  + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                  + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                  + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                  + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                  + "', @SIM_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Sims.CREATEDBY)
                                  + "', @SIM_CREATEDDATE='" + _obj_Smvts_Sims.CREATEDDATE.ToString("MM/dd/yyyy")
                                  + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                  + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'", dbname))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_SIMS @Operation = 'Update',@SIM_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_ID)
                                  + "', @SIM_CATEGORY_ID='" + _obj_Smvts_Sims.SIM_CATEGORY_ID
                                  + "', @SIM_OPERATORNAME='" + _obj_Smvts_Sims.SIM_OPERATORNAME
                                  + "', @SIM_SERIALNO='" + Convert.ToString(_obj_Smvts_Sims.SIM_SERIALNO)
                                  + "', @SIM_NUMBER='" + Convert.ToString(_obj_Smvts_Sims.SIM_NUMBER)
                                  + "', @SIM_APNWEBSITE='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNWEBSITE)
                                  + "', @SIM_APNIP='" + Convert.ToString(_obj_Smvts_Sims.SIM_APNIP)
                                  + "', @SIM_COUNTRY_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_COUNTRY_ID)
                                  + "', @SIM_STATE_ID='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATE_ID)
                                  + "', @SIM_STATUS='" + Convert.ToString(_obj_Smvts_Sims.SIM_STATUS)
                                  + "', @SIM_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Sims.LASTMDFBY)
                                  + "', @SIM_MODIFIEDDATE='" + _obj_Smvts_Sims.LASTMDFDATE.ToString("MM/dd/yyyy") + "'", dbname))
                    status = true;
                else
                    status = false;
                break;

            default:
                break;
        }
        return status;
    }

    public static bool set_Drivers_details(SMVTS_DRIVERS _obj_Smvts_Drivers, string dbname, string categname)
    {
        bool status = false;
        switch (_obj_Smvts_Drivers.OPERATION)
        {
            case operation.Insert:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Insert', @DRIVER_NAME='" + _obj_Smvts_Drivers.DRIVER_NAME
                                 + "', @DRIVER_DESC='" + _obj_Smvts_Drivers.DRIVER_DESC
                                 + "', @DRIVER_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID)
                                 + "', @DRIVER_MOBILENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_MOBILENO)
                                 + "', @DRIVER_ADDRESS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ADDRESS)
                                 + "', @DRIVER_LICENSENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO)
                                 + "', @DRIVER_ISSUEDATE=" + (_obj_Smvts_Drivers.DRIVER_ISSUEDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_ISSUEDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_EXPIRYDATE=" + (_obj_Smvts_Drivers.DRIVER_EXPIRYDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_EXPIRYDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_STATUS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS)
                                 + "', @DRIVER_CREATEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.CREATEDBY)
                                 + "', @DRIVER_CREATEDDATE='" + _obj_Smvts_Drivers.CREATEDDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.LASTMDFBY)
                                 + "', @DRIVER_MODIFIEDDATE='" + _obj_Smvts_Drivers.LASTMDFDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_BLOODGROUP='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_BLOODGROUP)
                                 + "',  @DRIVER_PHOTO_PATH='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_PHOTO_PATH)
                                 + "', @DRIVER_LANGUAGES='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LANGUAGES)
                                 + "',@DRIVER_FORMAN='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_FORMAN)
                                 + "'", dbname))


                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (Dal.ExecuteNonQueryDB1("EXEC USP_SMVTS_DRIVERS @Operation = 'Update',@DRIVER_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ID)
                                 + "', @DRIVER_NAME='" + _obj_Smvts_Drivers.DRIVER_NAME
                                 + "', @DRIVER_DESC='" + _obj_Smvts_Drivers.DRIVER_DESC
                                 + "', @DRIVER_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_CATEGORY_ID)
                                 + "', @DRIVER_MOBILENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_MOBILENO)
                                 + "', @DRIVER_ADDRESS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_ADDRESS)
                                 + "', @DRIVER_LICENSENO='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LICENSENO)
                                 + "', @DRIVER_ISSUEDATE=" + (_obj_Smvts_Drivers.DRIVER_ISSUEDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_ISSUEDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_EXPIRYDATE=" + (_obj_Smvts_Drivers.DRIVER_EXPIRYDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_Drivers.DRIVER_EXPIRYDATE).ToString("MM/dd/yyyy") + "'")
                                 + " , @DRIVER_STATUS='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_STATUS)
                                 + "', @DRIVER_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Drivers.LASTMDFBY)
                                 + "', @DRIVER_MODIFIEDDATE='" + _obj_Smvts_Drivers.LASTMDFDATE.ToString("MM/dd/yyyy")
                                 + "', @DRIVER_BLOODGROUP='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_BLOODGROUP)
                                 + "', @DRIVER_PHOTO_PATH='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_PHOTO_PATH)
                                 + "', @DRIVER_LANGUAGES='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_LANGUAGES)
                                  + "',@DRIVER_FORMAN='" + Convert.ToString(_obj_Smvts_Drivers.DRIVER_FORMAN)
                                 + "'", dbname))
                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }

    internal static DataTable gettyrevalue(SMVTS_TYRE_NEWMODEL _obj_Smvts_fuelvalue, int categid)
    {
        DataTable dt = new DataTable();
        if (_obj_Smvts_fuelvalue.OPERATION == operation.select)
        {
            dt = ExecuteQuery("SELECT * FROM SMVTS_TYRE_NEWMODEL(nolock) where TYRE_CATEGID=" + categid + "");
        }
        return dt;
    }

    internal static DataTable get_tyrereport(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string tyreno, string operation)
    {
        return ExecuteQuery("EXEC RPT_USP_TYREINFO  @USERID='" + strUserID + "', @DEVICEID =" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                            + ", @STARTDATE =" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ", @ENDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ",@TYRE_NO='" + tyreno + "',@RPT_TYPE='" + operation + "'");
    }

    internal static DataTable get_TimezoneData(string strUserID, string strDeviceID, string strStartDate, string strEndDate, string Category_id)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("EXEC [USP_SPECIFICTIMEZONEHISTORY] @USERID='" + strUserID + "',@DEVICEID=" + (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'") + ",@STARTDATE=" + (strStartDate == string.Empty ? "null" : "'" + strStartDate + "'") + ",@ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = -1, @GEOFENCE_ONLY = 0");
        return dt_RptData;
    }

    public static DataTable get_tyremodel(SMVTS_TYRE_NEWMODEL _obj_Smvts_tyremodel)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_tyremodel.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_tyremodel.TYREID) != "0")
                    dt = ExecuteQuery("EXEC usp_SMVTS_TYRE_NEWMODEL @OPERATION = 'Select', @TYREID ='" + Convert.ToString(_obj_Smvts_tyremodel.TYREID) + "'");
                else
                    dt = ExecuteQuery("select TYREID,TYRE_VNO,TYRE_NUMBER,TYRE_MAKE,TYRE_FITDATE,TYRE_FITKMS,TYRE_GRADE,TYRE_POSITION,TYRE_RUNKMS,case (TYRE_STATUS) when 0 then 'Closed' else 'Active' end 'TYRE_STATUS' ,TYRE_CLOSEDDATE,TYRE_CATEGID from SMVTS_TYRE_NEWMODEL(nolock) where TYRE_CATEGID=" + _obj_Smvts_tyremodel.TYRE_CATEGID + " order by TYRE_NUMBER");
                break;
            case operation.Check:
                if (((_obj_Smvts_tyremodel.TYREID) == 0) && (_obj_Smvts_tyremodel.TYRE_NUMBER != "0"))
                    dt = ExecuteQuery("EXEC usp_SMVTS_TYRE_NEWMODEL @OPERATION = 'Check', @TYRE_NUMBER ='" + Convert.ToString(_obj_Smvts_tyremodel.TYRE_NUMBER) + "' ,@TYRE_CATEGID ='" + Convert.ToString(_obj_Smvts_tyremodel.TYRE_CATEGID) + "'");
                else
                    //dt = ExecuteQuery("SELECT count(*) as 'count' from SMVTS_TYRE_NEWMODEL  Where  (TYRE_CATEGID = " + _obj_Smvts_tyremodel.TYRE_CATEGID + " and TYRE_NUMBER='" + _obj_Smvts_tyremodel.TYRE_NUMBER + "') or TYREID=" + _obj_Smvts_tyremodel.TYREID + " ");
                    dt = ExecuteQuery("SELECT count(*) as 'count' from SMVTS_TYRE_NEWMODEL  Where  (TYRE_CATEGID = " + _obj_Smvts_tyremodel.TYRE_CATEGID + " and TYRE_NUMBER='" + _obj_Smvts_tyremodel.TYRE_NUMBER + "' and TYRE_GRADE='" + _obj_Smvts_tyremodel.TYRE_GRADE + "' and TYRE_POSITION='" + _obj_Smvts_tyremodel.TYRE_POSITION + "' and TYRE_VNO='" + _obj_Smvts_tyremodel.TYRE_VNO + "') or TYREID=" + _obj_Smvts_tyremodel.TYREID + "");
                break;
            case operation.select:
                if ((Convert.ToString(_obj_Smvts_tyremodel.TYREID) != "0") && (_obj_Smvts_tyremodel.TYRE_NUMBER != "0"))
                    dt = ExecuteQuery("EXEC usp_SMVTS_TYRE_NEWMODEL @OPERATION = 'Check', @TYRE_CATEGID='" + Convert.ToString(_obj_Smvts_tyremodel.TYRE_CATEGID) + "',@TYRE_NUMBER ='" + Convert.ToString(_obj_Smvts_tyremodel.TYRE_NUMBER) + "',@TYRE_STATUS=" + _obj_Smvts_tyremodel.TYRE_STATUS + ",@TYREID=" + _obj_Smvts_tyremodel.TYREID + "");
                else
                    dt = ExecuteQuery("EXEC usp_SMVTS_TYRE_NEWMODEL @OPERATION='Check',@TYRE_CATEGID='" + Convert.ToString(_obj_Smvts_tyremodel.TYRE_CATEGID) + "',@TYRE_STATUS=" + _obj_Smvts_tyremodel.TYRE_STATUS + ",@TYRE_NUMBER ='" + Convert.ToString(_obj_Smvts_tyremodel.TYRE_NUMBER) + "',@TYREID=" + _obj_Smvts_tyremodel.TYREID + "");
                break;
            default:
                break;
        }
        return dt;
    }
    internal static bool set_tyremodel(SMVTS_TYRE_NEWMODEL _obj_Smvts_TYRENEWMODEL)
    {
        bool status = false;
        switch (_obj_Smvts_TYRENEWMODEL.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC usp_SMVTS_TYRE_NEWMODEL @OPERATION = 'INSERT', @TYRE_VNO='" + _obj_Smvts_TYRENEWMODEL.TYRE_VNO
                                 + "', @TYRE_NUMBER='" + _obj_Smvts_TYRENEWMODEL.TYRE_NUMBER
                                 + "', @TYRE_MAKE='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_MAKE)
                                 + "', @TYRE_FITDATE=" + (_obj_Smvts_TYRENEWMODEL.TYRE_FITDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_TYRENEWMODEL.TYRE_FITDATE).ToString("MM/dd/yyyy") + "'")
                                 + ", @TYRE_FITKMS='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_FITKMS)
                                 + "',@TYRE_RUNKMS='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.Tyre_RUNKMS)
                                 + "', @TYRE_GRADE='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_GRADE)
                                 + "', @TYRE_POSITION='" + (_obj_Smvts_TYRENEWMODEL.TYRE_POSITION)
                                 + "', @TYRE_STATUS=" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_STATUS)
                                 + ", @TYRE_CATEGID = '" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_CATEGID)
                                 + "',@TYRE_CLOSEDDATE=Null"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC usp_SMVTS_TYRE_NEWMODEL @OPERATION = 'UPDATE',@TYREID='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYREID)
                                 + "', @TYRE_VNO='" + _obj_Smvts_TYRENEWMODEL.TYRE_VNO
                                 + "', @TYRE_NUMBER='" + _obj_Smvts_TYRENEWMODEL.TYRE_NUMBER
                                 + "', @TYRE_MAKE='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_MAKE)
                                 + "', @TYRE_FITDATE=" + (_obj_Smvts_TYRENEWMODEL.TYRE_FITDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_TYRENEWMODEL.TYRE_FITDATE).ToString("MM/dd/yyyy") + "'")
                                 + ",@TYRE_FITKMS='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_FITKMS)
                                 + "',@TYRE_RUNKMS='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.Tyre_RUNKMS)
                                 + "', @TYRE_GRADE='" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_GRADE)
                                 + "', @TYRE_POSITION = '" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_POSITION)
                                  + "',@TYRE_STATUS='" + (_obj_Smvts_TYRENEWMODEL.TYRE_STATUS)
                                  + "',@TYRE_CATEGID = '" + Convert.ToString(_obj_Smvts_TYRENEWMODEL.TYRE_CATEGID)
                                  + "',@TYRE_CLOSEDDATE=" + (_obj_Smvts_TYRENEWMODEL.TYRE_CLOSEDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_TYRENEWMODEL.TYRE_CLOSEDDATE).ToString("MM/dd/yyyy") + "'") + ""))
                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }

    internal static DataTable get_tyremake(SMVTS_TYRE_GRADE _obg_tyregrade)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("SELECT * FROM SMVTS_TYRE_GRADE(nolock) where GRADE_STATUS=1");
        return dt_RptData;
    }

    internal static DataTable get_tyreposition(SMVTS_TYRE_POSITION _obg_tyreposition)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("select * from SMVTS_TYRE_POSITION(nolock) where POSITION_STATUS=1");
        return dt_RptData;
    }

    internal static object get_Selectedvno(string vno, int categid)
    {
        DataTable dt_RptData = new DataTable();
        dt_RptData = ExecuteQuery("select * from SMVTS_TYRE_NEWMODEL(nolock) where TYRE_VNO='" + vno + "' and TYRE_CATEGID=" + categid + "");
        return dt_RptData;
    }

    internal static DataTable get_TyreData(string value, string categid, string vno, string sdate, string edate, string tyrenumber)
    {
        DataTable dt_RptData = new DataTable();
        if (value == "all")
        {
            dt_RptData = ExecuteQuery("select * from SMVTS_TYRE_NEWMODEL(nolock) where TYRE_VNO='" + vno + "' and TYRE_FITDATE between '" + sdate + "' and '" + edate + "' and TYRE_CATEGID=" + categid + "");
        }
        else if (value == "select")
        {
            dt_RptData = ExecuteQuery("select * from SMVTS_TYRE_NEWMODEL(nolock) where TYRE_VNO='" + vno + "' and TYRE_FITDATE between '" + sdate + "' and '" + edate + "' and TYRE_CATEGID=" + categid + " and TYRE_NUMBER='" + tyrenumber + "'");
        }
        else if (value == "allvehicles")
        {
            dt_RptData = ExecuteQuery("select * from SMVTS_TYRE_NEWMODEL(nolock) where TYRE_FITDATE between '" + sdate + "' and '" + edate + "' and TYRE_CATEGID=" + categid + "");
        }
        return dt_RptData;
    }

    internal static DataTable get_GridTrack_routename(SMVTS_GRIDTRACK _objGridTrack, string Userid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_ROUTENAME @USER_ID = '" + Userid + "'");

        return dt;
    }

    internal static DataTable get_GridTrack_TripMailStatus_DGT(string categid, string userid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC uSP_SMVTS_TRIPINFOMAIL_GRID @categid = '" + categid + "',@user_id='" + userid + "'");

        return dt;
    }

    internal static DataTable get_fuelmillage(string userid, string deviceid, string startdate, string enddate, int interval, string operation)
    {
        return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + userid + "', @DEVICEID =" + (deviceid == string.Empty ? "null" : "'" + deviceid + "'")
                           + ", @STARTDATE =" + (startdate == string.Empty ? "null" : "'" + startdate + "'") + ", @ENDDATE =" + (enddate == string.Empty ? "null" : "'" + enddate + "'") + ",@MININTERVAL=" + interval + ",@OPERATION='" + operation + "'");
    }
    internal static DataTable get_fuelTheft(string userid, string deviceid, string startdate, string enddate, int interval, string operation)
    {
        return ExecuteQuery("EXEC RPT_USP_TRIPDATA_INTERVAL_FUEL  @USERID='" + userid + "', @DEVICEID =" + (deviceid == string.Empty ? "null" : "'" + deviceid + "'")
                           + ", @STARTDATE =" + (startdate == string.Empty ? "null" : "'" + startdate + "'") + ", @ENDDATE =" + (enddate == string.Empty ? "null" : "'" + enddate + "'") + ",@MININTERVAL=" + interval + ",@OPERATION='" + operation + "'");
    }

    internal static DataTable get_landmark_to(string categid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_LANDMARKS(nolock) where LANDMARKS_CATEGORY_ID=" + categid + " and LANDMARKS_LOCATIONTYPE=24 and LANDMARKS_GEOSTATUS=1");

        return dt;
    }

    internal static DataTable get_Rbudget(SMVTS_ROUTE_BUDGET _obj_Smvts_Rbudget)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Rbudget.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_Rbudget.RBUDGET_ID) != "0")
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTE_BUDGET @OPERATION = 'SELECT', @RBUDGET_ID ='" + Convert.ToString(_obj_Smvts_Rbudget.RBUDGET_ID) + "'");
                else
                    dt = ExecuteQuery("EXEC USP_SMVTS_ROUTE_BUDGET @OPERATION = 'SELECT', @RBUDGET_CATEGID ='" + Convert.ToString(_obj_Smvts_Rbudget.RBUDGET_CATEGID) + "'");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static object get_ERPLroutefrom(SMVTS_ERPL_MASTERROUTES _obj_Smvts_routes)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_routes.OPERATION)
        {
            case operation.Select:

                dt = ExecuteQuery("select * from SMVTS_ERPL_MASTERROUTES(nolock) where ERP_ROUTECATEGID=" + _obj_Smvts_routes.ERP_ROUTECATEGID + "");

                break;
            case operation.select:

                dt = ExecuteQuery("select * from SMVTS_ERPL_MASTERROUTES(nolock) where ERP_ROUTECATEGID=" + _obj_Smvts_routes.ERP_ROUTECATEGID + "");

                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable getlocation()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select ERP_ROUTEFROM from SMVTS_ERPL_MASTERROUTES(nolock) where ERP_ROUTECATEGID=11");
        return dt;
    }
    internal static bool set_Rbudget(SMVTS_ROUTE_BUDGET _obj_Smvts_rbudget)
    {
        bool status = false;
        switch (_obj_Smvts_rbudget.OPERATION)
        {
            case operation.Insert:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ROUTE_BUDGET @OPERATION = 'INSERT', @RBUDGET_CATEGID=" + _obj_Smvts_rbudget.RBUDGET_CATEGID
                                 + ", @RBUDGET_VEHMODELID=" + _obj_Smvts_rbudget.RBUDGET_VEHMODELID
                                 + ", @RBUDGET_FROMID=" + _obj_Smvts_rbudget.RBUDGET_FROMID
                                 + ", @RBUDGET_TOID=" + _obj_Smvts_rbudget.RBUDGET_TOID
                                 + ", @RBUDGET_UPTOID=" + _obj_Smvts_rbudget.RBUDGET_UPTOID
                                 + ", @RBUDGET_TRIPDAYS=" + _obj_Smvts_rbudget.RBUDGET_TRIPDAYS
                                 + ", @RBUDGET_ROUTECODE='" + Convert.ToString(_obj_Smvts_rbudget.RBUDGET_ROUTECODE)
                                 + "', @RBUDGET_DISTANCE=" + (_obj_Smvts_rbudget.RBUDGET_DISTANCE)
                                  + ", @RBUDGET_AVG_LTR=" + (_obj_Smvts_rbudget.RBUDGET_AVG_LTR)
                                   + ", @RBUDGET_FUELQUANTITY=" + (_obj_Smvts_rbudget.RBUDGET_FUELQUANTITY)
                                    + ", @RBUDGET_FUELPERLITER=" + (_obj_Smvts_rbudget.RBUDGET_FUELPERLITER)
                                     + ", @RBUDGET_FIXED_CASH=" + (_obj_Smvts_rbudget.RBUDGET_FIXED_CASH)
                                      + ", @RBUDGET_STARTDATE='" + (_obj_Smvts_rbudget.RBUDGET_STARTDATE)
                                       + "', @RBUDGET_ENDDDATE='" + (_obj_Smvts_rbudget.RBUDGET_ENDDDATE)
                                       + "', @RBUDGET_REMARKS='" + (_obj_Smvts_rbudget.RBUDGET_REMARKS)
                                        + "', @RBUDGET_CREATEDDATE='" + (_obj_Smvts_rbudget.RBUDGET_CREATEDDATE)
                                 + "', @RBUDGET_STATUS=" + ((_obj_Smvts_rbudget.RBUDGET_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_rbudget.RBUDGET_STATUS) + "'")
                                 + ", @RBUDGET_ROUTENAME = '" + Convert.ToString(_obj_Smvts_rbudget.RBUDGET_ROUTENAME) + "'"))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_ROUTE_BUDGET @OPERATION = 'UPDATE', @RBUDGET_ID=" + _obj_Smvts_rbudget.RBUDGET_ID
                    + ",@RBUDGET_CATEGID=" + _obj_Smvts_rbudget.RBUDGET_CATEGID
                                + ", @RBUDGET_VEHMODELID='" + _obj_Smvts_rbudget.RBUDGET_VEHMODELID
                                + "', @RBUDGET_FROMID='" + _obj_Smvts_rbudget.RBUDGET_FROMID
                                + "', @RBUDGET_TOID='" + _obj_Smvts_rbudget.RBUDGET_TOID
                                + "', @RBUDGET_UPTOID=" + _obj_Smvts_rbudget.RBUDGET_UPTOID
                                + ", @RBUDGET_TRIPDAYS=" + _obj_Smvts_rbudget.RBUDGET_TRIPDAYS
                                + ", @RBUDGET_ROUTECODE='" + Convert.ToString(_obj_Smvts_rbudget.RBUDGET_ROUTECODE)
                                + "', @RBUDGET_DISTANCE=" + (_obj_Smvts_rbudget.RBUDGET_DISTANCE)
                                 + ", @RBUDGET_AVG_LTR=" + (_obj_Smvts_rbudget.RBUDGET_AVG_LTR)
                                  + ", @RBUDGET_FUELQUANTITY=" + (_obj_Smvts_rbudget.RBUDGET_FUELQUANTITY)
                                   + ", @RBUDGET_FUELPERLITER=" + (_obj_Smvts_rbudget.RBUDGET_FUELPERLITER)
                                    + ", @RBUDGET_FIXED_CASH=" + (_obj_Smvts_rbudget.RBUDGET_FIXED_CASH)
                                     + ", @RBUDGET_STARTDATE='" + (_obj_Smvts_rbudget.RBUDGET_STARTDATE)
                                      + "', @RBUDGET_ENDDDATE='" + (_obj_Smvts_rbudget.RBUDGET_ENDDDATE)
                                      + "', @RBUDGET_REMARKS='" + (_obj_Smvts_rbudget.RBUDGET_REMARKS)
                                       + "', @RBUDGET_CREATEDDATE='" + (_obj_Smvts_rbudget.RBUDGET_CREATEDDATE)
                                + "', @RBUDGET_STATUS=" + ((_obj_Smvts_rbudget.RBUDGET_STATUS) == null ? "null" : "'" + Convert.ToString(_obj_Smvts_rbudget.RBUDGET_STATUS) + "'")
                                + ", @RBUDGET_ROUTENAME = '" + Convert.ToString(_obj_Smvts_rbudget.RBUDGET_ROUTENAME) + "'"))
                    status = true;
                else
                    status = false;

                break;

            default:
                break;
        }
        return status;
    }

    internal static DataTable get_routebudget(SMVTS_ROUTE_BUDGET sMVTS_ROUTE_BUDGET)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_ROUTE_BUDGET where RBUDGET_ID=" + sMVTS_ROUTE_BUDGET.RBUDGET_ID + "");

        return dt;
    }
    public static DataTable get_ConsignmentTrackDistance(SMVTS_CONSIGNMENTTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_CONSIGNMENT_TRACK @USER_ID = '" + parUserID + "'");

        return dt;
    }
    internal static bool er_tripinfo(int devid, SMVTS_ROUTEPLAN _obj_Smvts_RoutePlan)
    {
        bool status = false;
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select VEHICLES_REGNUMBER from SMVTS_VEHICLES(nolock) where VEHICLES_DEVICE_ID=" + devid + "");
        if (dt.Rows.Count != 0)
        {
            status = Dal.ExecuteNonQuery("update SMVTS_ER_TRIPINFO set ER_EXPECTED_DATE='" + _obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY + "' where ER_VEHICLENO='" + dt.Rows[0][0] + "' and ER_DISPATCHDATE='" + _obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE + "'");
            status = Dal.ExecuteNonQuery("update SMVTS_LOG_ER_TRIPINFO set ER_EXPECTED_DATE='" + _obj_Smvts_RoutePlan.CONSIGNMENT_EXPDATEOFDELIVERY + "' where ER_VEHICLENO='" + dt.Rows[0][0] + "' and ER_DISPATCHDATE='" + _obj_Smvts_RoutePlan.CONSIGNMENT_LOADINGDATE + "'");
        }

        return status;
    }

    internal static DataTable getbudgetdata()
    {
        DataTable dt = ExecuteQuery("Select RBUDGET_VEHMODELID,RBUDGET_FROMID,RBUDGET_TOID,RBUDGET_TRIPDAYS,RBUDGET_ROUTECODE,RBUDGET_ROUTENAME,RBUDGET_DISTANCE,RBUDGET_AVG_LTR,RBUDGET_FUELQUANTITY,RBUDGET_FUELPERLITER,RBUDGET_FIXED_CASH,RBUDGET_STARTDATE,RBUDGET_ENDDDATE from SMVTS_ROUTE_BUDGET order by RBUDGET_CREATEDDATE desc");
        return dt;
    }
    internal static int insertexcel(DataTable dtexcel)
    {
        int result = 0;
        bool r;
        try
        {
            for (int i = 0; i < dtexcel.Rows.Count; i++)
            {
                //r = Dal.ExecuteNonQuery("insert into SMVTS_ROUTE_BUDGET(RBUDGET_CATEGID,RBUDGET_VEHMODELID,RBUDGET_FROMID,RBUDGET_TOID,RBUDGET_UPTOID,RBUDGET_TRIPDAYS,RBUDGET_ROUTECODE,RBUDGET_DISTANCE,RBUDGET_AVG_LTR,RBUDGET_FUELQUANTITY,RBUDGET_FUELPERLITER,RBUDGET_FIXED_CASH,RBUDGET_STARTDATE,RBUDGET_ENDDDATE,RBUDGET_REMARKS,RBUDGET_CREATEDDATE,RBUDGET_STATUS,RBUDGET_ROUTENAME) values(" + dtexcel.Rows[i][0] + ", " + dtexcel.Rows[i][1].ToString() + "," + dtexcel.Rows[i][2] + "," + dtexcel.Rows[i][3] + "," + dtexcel.Rows[i][4] + "," + dtexcel.Rows[i][5] + ",'" + dtexcel.Rows[i][6].ToString() + "'," + dtexcel.Rows[i][7] + "," + dtexcel.Rows[i][8] + "," + dtexcel.Rows[i][9] + "," + dtexcel.Rows[i][10] + "," + dtexcel.Rows[i][11].ToString() + ",'" + dtexcel.Rows[i][12].ToString().Replace("/", "-") + "','" + dtexcel.Rows[i][13].ToString().Replace("/", "-") + "','" + dtexcel.Rows[i][14].ToString() + "','" + dtexcel.Rows[i][15].ToString().Replace("/", "-") + "'," + dtexcel.Rows[i][16] + ",'" + dtexcel.Rows[i][17].ToString() + "')");
                r = Dal.ExecuteNonQuery("insert into SMVTS_ROUTE_BUDGET(RBUDGET_VEHMODELID,RBUDGET_FROMID,RBUDGET_TOID,RBUDGET_ROUTECODE,RBUDGET_ROUTENAME,RBUDGET_TRIPDAYS,RBUDGET_DISTANCE,RBUDGET_AVG_LTR,RBUDGET_FUELQUANTITY,RBUDGET_FUELPERLITER,RBUDGET_FIXED_CASH,RBUDGET_CREATEDDATE) values('" + dtexcel.Rows[i][0].ToString() + "','" + dtexcel.Rows[i][1].ToString() + "','" + dtexcel.Rows[i][2].ToString() + "','" + dtexcel.Rows[i][3] + "','" + dtexcel.Rows[i][4].ToString() + "'," + dtexcel.Rows[i][5] + "," + dtexcel.Rows[i][6] + "," + dtexcel.Rows[i][7] + "," + dtexcel.Rows[i][8] + "," + dtexcel.Rows[i][9].ToString() + "," + dtexcel.Rows[i][10] + ",getdate())");
                if (r == true)
                    result++;
                else
                    continue;
            }
        }
        catch (Exception ex)
        {

        }
        return result;

    }


    internal static int insertentryexcel(DataTable dtexcel)
    {
        int result = 0;
        bool r;
        try
        {
            for (int i = 0; i < dtexcel.Rows.Count; i++)
            {
                //r = Dal.ExecuteNonQuery("insert into SMVTS_ROUTE_BUDGET(RBUDGET_CATEGID,RBUDGET_VEHMODELID,RBUDGET_FROMID,RBUDGET_TOID,RBUDGET_UPTOID,RBUDGET_TRIPDAYS,RBUDGET_ROUTECODE,RBUDGET_DISTANCE,RBUDGET_AVG_LTR,RBUDGET_FUELQUANTITY,RBUDGET_FUELPERLITER,RBUDGET_FIXED_CASH,RBUDGET_STARTDATE,RBUDGET_ENDDDATE,RBUDGET_REMARKS,RBUDGET_CREATEDDATE,RBUDGET_STATUS,RBUDGET_ROUTENAME) values(" + dtexcel.Rows[i][0] + ", " + dtexcel.Rows[i][1].ToString() + "," + dtexcel.Rows[i][2] + "," + dtexcel.Rows[i][3] + "," + dtexcel.Rows[i][4] + "," + dtexcel.Rows[i][5] + ",'" + dtexcel.Rows[i][6].ToString() + "'," + dtexcel.Rows[i][7] + "," + dtexcel.Rows[i][8] + "," + dtexcel.Rows[i][9] + "," + dtexcel.Rows[i][10] + "," + dtexcel.Rows[i][11].ToString() + ",'" + dtexcel.Rows[i][12].ToString().Replace("/", "-") + "','" + dtexcel.Rows[i][13].ToString().Replace("/", "-") + "','" + dtexcel.Rows[i][14].ToString() + "','" + dtexcel.Rows[i][15].ToString().Replace("/", "-") + "'," + dtexcel.Rows[i][16] + ",'" + dtexcel.Rows[i][17].ToString() + "')");
                r = Dal.ExecuteNonQuery("insert into SMVTS_LORRY_ENTRY(LENTRY_LORRYNO,LEMNTRY_FROMSTATION,LENTRY_TODESTINATION,LENTRY_ORDERDATETIME,LENTRY_NONPLACEMENTREASON,LENTRY_CREATEDDATE) values('" + dtexcel.Rows[i][0].ToString() + "','" + dtexcel.Rows[i][1].ToString() + "','" + dtexcel.Rows[i][2].ToString() + "','" + dtexcel.Rows[i][3] + "','" + dtexcel.Rows[i][4].ToString() + "',getdate())");
                if (r == true)
                    result++;
                else
                    continue;
            }
        }
        catch (Exception ex)
        {

        }
        return result;
    }

    internal static DataTable getrePortingdata()
    {
        DataTable dt = new DataTable();
        //dt = ExecuteQuery(" SELECT LENTRY_LORRYNO,LENTRY_NONPLACEMENTREASON,LEMNTRY_FROMSTATION,LENTRY_TODESTINATION,LENTRY_ORDERDATETIME FROM SMVTS_LORRY_ENTRY where LENTRY_NONPLACEMENTREASON='Order Done' and LENTRY_ORDERDATETIME<=getdate()  ORDER BY LENTRY_ID DESC");
        // dt = ExecuteQuery("select ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH FROM SMVTS_ER_TRIPINFO WHERE ER_EXPECTED_DATE<=GETDATE() AND  ER_CATEGID=11 AND ER_VEHICLENO NOT IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_REPORTDATE IS  NOT NULL)  ORDER BY ER_ID DESC ");
        // dt = ExecuteQuery("select ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,(select  top 1 dbo.fn_get_nearbygeofence(TRIPDATA_LATITUDE,TRIPDATA_LONGITUDE,11) AS geofence from SMVTS_LANDMARKS where LANDMARKS_CATEGORY_ID=11 and LANDMARKS_GEOSTATUS=1) FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE ER_EXPECTED_DATE<=GETDATE() AND  ER_CATEGID=11 AND ER_VEHICLENO NOT IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_REPORTDATE IS  NOT NULL)  ORDER BY ER_ID DESC");
        //dt = ExecuteQuery("select  distinct ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,GPS_VALID FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE ER_EXPECTED_DATE<=GETDATE() AND  ER_CATEGID=11 AND ER_VEHICLENO NOT IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_REPORTDATE IS  NOT NULL)  ORDER BY ER_ID DESC");
        dt = ExecuteQuery("select distinct(ER_VEHICLENO),ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,GPS_VALID FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE ER_EXPECTED_DATE<=GETDATE() AND  ER_CATEGID=11 AND ER_VEHICLENO NOT IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_REPORTDATE IS  NOT NULL)  ORDER BY ER_EXPECTED_DATE DESC");
        return dt;
    }

    internal static int dataintotracking(SMVTS_LORRY_TRACKING obj_lorytrack)
    {
        int i = 0;
        bool r = false;
        bool s = false;
        r = Dal.ExecuteNonQuery("insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_DATE,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_CREATEDDATE) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "',getdate())");
        if (r == true)
        {
            s = Dal.ExecuteNonQuery("update SMVTS_LORRY_ENTRY set LENTRY_NONPLACEMENTREASON='Empty' where LENTRY_LORRYNO='" + obj_lorytrack.LTRACKING_LORRYNO + "' ");
            if (s == true)
            {
                i = i + 1;
            }
        }

        return i;



    }

    internal static DataTable getunloadingdata()
    {
        // DataTable dt = Dal.ExecuteQuery("SELECT * FROM SMVTS_LORRY_TRACKING where LTRACKING_REPORTDATE IS  NOT NULL and LTRACKING_UNLOADDATE IS NULL and LTRACKING_UNLOADLOCATION IS NULL order by LTRACKING_ID desc ");
        DataTable dt = Dal.ExecuteQuery("SELECT *,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,GPS_VALID FROM SMVTS_LORRY_TRACKING r inner join SMVTS_DASHBOARD_VIEW t on r.LTRACKING_LORRYNO=t.VNO where  LTRACKING_REPORTDATE IS  NOT NULL and LTRACKING_UNLOADDATE IS NULL and LTRACKING_UNLOADLOCATION IS NULL order by LTRACKING_ID desc");
        return dt;
    }

    internal static DataTable getloryload()
    {
        DataTable dt = Dal.ExecuteQuery("select ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,ER_CURRENT_STATUS FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE ER_CURRENT_STATUS='Loading' AND  ER_CATEGID=11 AND ER_VEHICLENO NOT IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_TACKINGON IS  NOT NULL) ORDER BY ER_ID DESC");
        //DataTable dt = Dal.ExecuteQuery("select distinct ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,ER_CURRENT_STATUS,GPS_VALID FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE ER_CURRENT_STATUS='Loading' AND  ER_CATEGID=11");
        //DataTable dt = Dal.ExecuteQuery("select  distinct ER_ID,routes_startlat,routes_startlong,ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,ER_CURRENT_STATUS,GPS_VALID,(select top 1  dbo.distance(routes_startlat,routes_startlong,TRIPDATA_LATITUDE,TRIPDATA_LONGITUDE,'k')) as distance  from SMVTS_DASHBOARD_VIEW D inner join SMVTS_ER_TRIPINFO T on D.VNO=T.ER_VEHICLENO inner join   smvts_routes r on T.ER_FROM=r.ROUTES_FROM WHERE ER_CURRENT_STATUS='Loading' AND  ER_CATEGID=11  ORDER BY ER_ID DESC");
        //DataTable dt = Dal.ExecuteQuery("select distinct ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,ER_CURRENT_STATUS,GPS_VALID,(select top 1 dbo.FN_DISPATCHDATE(ER_VEHICLENO,ER_FROM,ER_DISPATCHDATE)) as distance FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE ER_CURRENT_STATUS='Loading' AND  ER_CATEGID=11 ");
        return dt;
    }
    internal static DataTable getlorytackupdated(string vehno)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("Select * from SMVTS_LORRY_TRACKING where LTRACKING_LORRYNO='" + vehno + "'");
        return dt;
    }

    internal static DataTable getloryexptrackupdated(string vhno)
    {
        DataTable dt = new DataTable();
        string connstr = ConfigurationManager.ConnectionStrings["EXPRESSCONNECTION"].ToString();
        string query = "Select * from SMVTS_LORRY_TRACKING where LTRACKING_LORRYNO='" + vhno + "'";
        dt = Dal.ExecuteQueryDB1(query, connstr);
        return dt;

    }
    internal static bool insertintotracklog(SMVTS_LORRY_TRACKING_LOG obj_lorytracklog)
    {
        bool result = false;
        result = Dal.ExecuteNonQuery("Insert into SMVTS_LORRY_TRACKING_LOG(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_PARTYNAME,LTRACKING_LOCATION,LTRACKING_UNLOADLOCATION,LTRACKING_REPORTDATE,LTRACKING_UNLOADDATE,LTRACKING_MODOFIEDDATE) values('" + obj_lorytracklog.LTRACKING_LORRYNO + "','" + obj_lorytracklog.LTRACKING_FROMSTATION + "','" + obj_lorytracklog.LTRACKING_TOSTATION + "','" + obj_lorytracklog.LTRACKING_DATE + "','" + obj_lorytracklog.LTRACKING_DELVDATE + "','" + obj_lorytracklog.LTRACKING_PARTYNAME + "','" + obj_lorytracklog.LTRACKING_LOCATION + "','" + obj_lorytracklog.LTRACKING_UNLOADLOCATION + "','" + obj_lorytracklog.LTRACKING_REPORTDATE + "','" + obj_lorytracklog.LTRACKING_UNLOADDATE + "','" + obj_lorytracklog.LTRACKING_MODOFIEDDATE + "') ");
        return result;
    }


    //internal static bool insertintoexpress(SMVTS_LORRY_TRACKING_LOG obj_lorytracklog)
    //{
    //     int i = 0;
    //    bool r = false;
    //    string connstr =BLL.Decrypt(ConfigurationManager.ConnectionStrings["EXPRESSCONNECTION"].ToString());
    //    string query="Insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_PARTYNAME,LTRACKING_TACKINGON) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_TACKINGON + "') ";
    //    r = Dal.ExecuteNonQueryDB(query, connstr);
    //    return r;
    //}
    internal static DataTable getemptyvehlory()
    {
        DataTable dt = Dal.ExecuteQuery("EXEC USP_SMVTS_EMPTYLORRY_TRACKING @OPERATION='SELECT'");
        //DataTable dt = Dal.ExecuteQuery("select ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,ER_CURRENT_STATUS,GPS_VALID FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE  ER_CATEGID=11 AND ER_VEHICLENO  IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_UNLOADDATE is not null)  ORDER BY ER_ID DESC");
        return dt;
    }
    internal static DataTable getlorytransit()
    {
        DataTable dt = Dal.ExecuteQuery("select ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH,TRIPDATA_LATITUDE,PLACE,TRIPDATA_LONGITUDE,ER_CURRENT_STATUS,GPS_VALID FROM SMVTS_ER_TRIPINFO T INNER JOIN SMVTS_DASHBOARD_VIEW D ON T.ER_VEHICLENO=D.VNO  WHERE  ER_CATEGID=11 AND ER_VEHICLENO  IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_TACKINGON='In Transit' and LTRACKING_DATE>getdate())");
        return dt;
    }
    internal static bool savelorytrack(SMVTS_LORRY_TRACKING obj_lorytrack, int i)
    {
        bool r = false;
        r = Dal.ExecuteNonQuery("update SMVTS_LORRY_TRACKING set LTRACKING_UNLOADLOCATION='" + obj_lorytrack.LTRACKING_UNLOADLOCATION + "',LTRACKING_UNLOADDATE='" + obj_lorytrack.LTRACKING_UNLOADDATE + "',LTRACKING_DATE=null,LTRACKING_FROMSTATION=null where LTRACKING_ID=" + i + " ");
        return r;
    }

    internal static bool saveexpressdetails(SMVTS_LORRY_TRACKING obj_lorytrack, int i)
    {
        bool r = false;
        string connstr = BLL.Decrypt(ConfigurationManager.ConnectionStrings["EXPRESSCONNECTION"].ToString());
        string query = "update SMVTS_LORRY_TRACKING set LTRACKING_UNLOADLOCATION='" + obj_lorytrack.LTRACKING_UNLOADLOCATION + "',LTRACKING_UNLOADDATE='" + obj_lorytrack.LTRACKING_UNLOADDATE + "',LTRACKING_DATE=null,LTRACKING_FROMSTATION=null where LTRACKING_ID=" + i + "  ";
        r = Dal.ExecuteNonQueryDB(query, connstr);
        return r;
    }

    internal static int savinglorytrack(SMVTS_LORRY_TRACKING obj_lorytrack)
    {
        int i = 0;
        bool r = false;
        r = Dal.ExecuteNonQuery("Insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_REPORTDATE,LTRACKING_PARTYNAME,LTRACKING_LOCATION) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_REPORTDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_LOCATION + "') ");
        if (r == true)
        {
            i = i + 1;
        }
        return i;
    }

    internal static int expsavinglorytrack(SMVTS_LORRY_TRACKING obj_lorytrack)
    {
        int i = 0;
        bool r = false;
        string connstr = BLL.Decrypt(ConfigurationManager.ConnectionStrings["EXPRESSCONNECTION"].ToString());
        string query = "Insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_REPORTDATE,LTRACKING_PARTYNAME,LTRACKING_LOCATION) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_REPORTDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_LOCATION + "')";
        r = Dal.ExecuteNonQueryDB(query, connstr);
        if (r == true)
        {
            i = i + 1;
        }
        return i;
    }
    internal static int savinglorytracklog(SMVTS_LORRY_TRACKING_LOG obj_lorytracklog)
    {
        int i = 0;
        bool r = false;
        r = Dal.ExecuteNonQuery("Insert into SMVTS_LORRY_TRACKING_LOG(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_REPORTDATE,LTRACKING_PARTYNAME,LTRACKING_LOCATION) values('" + obj_lorytracklog.LTRACKING_LORRYNO + "','" + obj_lorytracklog.LTRACKING_FROMSTATION + "','" + obj_lorytracklog.LTRACKING_TOSTATION + "','" + obj_lorytracklog.LTRACKING_DATE + "','" + obj_lorytracklog.LTRACKING_DELVDATE + "','" + obj_lorytracklog.LTRACKING_REPORTDATE + "','" + obj_lorytracklog.LTRACKING_PARTYNAME + "','" + obj_lorytracklog.LTRACKING_LOCATION + "') ");
        if (r == true)
        {
            i = i + 1;
        }
        return i;
    }
    internal static int savingloryload(SMVTS_LORRY_TRACKING obj_lorytrack)
    {
        int i = 0;
        bool r = false;
        r = Dal.ExecuteNonQuery("Insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_PARTYNAME,LTRACKING_TACKINGON) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_TACKINGON + "') ");
        if (r == true)
        {
            i = i + 1;
        }
        return i;
    }

    internal static int exprsavingloryload(SMVTS_LORRY_TRACKING obj_lorytrack)
    {

        int i = 0;
        bool r = false;
        string connstr = BLL.Decrypt(ConfigurationManager.ConnectionStrings["EXPRESSCONNECTION"].ToString());
        string query = "Insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_PARTYNAME,LTRACKING_TACKINGON) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_TACKINGON + "') ";
        r = Dal.ExecuteNonQueryDB(query, connstr);

        // r = Dal.ExecuteNonQuery("Insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_PARTYNAME,LTRACKING_TACKINGON) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_TACKINGON + "') ");
        if (r == true)
        {
            i = i + 1;
        }
        return i;

    }

    internal static int savetranslog(SMVTS_LORRY_TRACKING_LOG obj_lorytrack)
    {
        int i = 0;
        bool r = false;
        r = Dal.ExecuteNonQuery("Insert into SMVTS_LORRY_TRACKING_LOG(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_PARTYNAME,LTRACKING_TACKINGON) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_TACKINGON + "') ");
        if (r == true)
        {
            i = i + 1;
        }
        return i;
    }
    internal static int savinghaltloryload(SMVTS_LORRY_TRACKING obj_lorytrack)
    {
        int i = 0;
        bool r = false;
        r = Dal.ExecuteNonQuery("Insert into SMVTS_LORRY_TRACKING(LTRACKING_LORRYNO,LTRACKING_FROMSTATION,LTRACKING_TOSTATION,LTRACKING_DATE,LTRACKING_DELVDATE,LTRACKING_PARTYNAME,LTRACKING_TACKINGON) values('" + obj_lorytrack.LTRACKING_LORRYNO + "','" + obj_lorytrack.LTRACKING_FROMSTATION + "','" + obj_lorytrack.LTRACKING_TOSTATION + "','" + obj_lorytrack.LTRACKING_DATE + "','" + obj_lorytrack.LTRACKING_DELVDATE + "','" + obj_lorytrack.LTRACKING_PARTYNAME + "','" + obj_lorytrack.LTRACKING_TACKINGON + "') ");
        if (r == true)
        {
            i = i + 1;
        }
        return i;
    }

    internal static DataTable showtrackdetails()
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("select ER_VEHICLENO,ER_FROM,ER_TO,ER_EXPECTED_DATE,ER_PARTYNAME,ER_DISPATCHDATE,ER_REPORTING_DATE,ER_UPLOADEDDATE,ER_DELIVERYBRANCH FROM SMVTS_ER_TRIPINFO WHERE ER_EXPECTED_DATE<=GETDATE() AND  ER_CATEGID=11 AND ER_VEHICLENO NOT IN(SELECT LTRACKING_LORRYNO  FROM SMVTS_LORRY_TRACKING where LTRACKING_REPORTDATE IS  NOT NULL)  ORDER BY ER_ID DESC");
        return dt;
    }
    internal static DataTable get_vehicleno(SMVTS_VEHICLES _obj_Smvts_Vechno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_VEHICLES where VEHICLES_CATEGORY_ID=" + _obj_Smvts_Vechno.VEHICLES_CATEGORY_ID + " ");
        return dt;
    }
    internal static DataTable gettrackon()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_LORRYTRACKING_TRACKINGON ");
        return dt;
    }

    internal static DataTable getdrivernames(SMVTS_DRIVERS _obj_Smvts_drivername)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_DRIVERS where DRIVER_CATEGORY_ID=" + _obj_Smvts_drivername.DRIVER_CATEGORY_ID + "");
        return dt;
    }
    internal static DataTable getnonplacement()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_LORRYENTRY_NONPLACMENT");
        return dt;
    }
    internal static DataTable getvehiclenames(SMVTS_VEHLEMM _obj_Smvts_Vehlemm)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_VEHICLEMODELS where VEHLEMM_CATEGORY_ID=" + _obj_Smvts_Vehlemm.VEHLEMM_CATEGORY_ID + "");
        return dt;
    }

    internal static DataTable getcategorydbname(int vcatid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("select CATEG_DBNAME from smvts_categories(nolock) where categ_id=" + vcatid + "");
        return dt;
    }
    internal static bool save_Lorrydetails(SMVTS_LORRY_ENTRY obj_loryentry, SMVTS_LORRY_ENTRY_LOG obj_loryentry_log)
    {
        bool result = false;
        switch (obj_loryentry.OPERATION)
        {
            case operation.Insert:

                if (ExecuteNonQuery("EXEC USP_SMVTS_LORRY_ENTRY @OPERATION = 'Insert',  @LENTRY_TRAFFICINCHRGENAME='" + obj_loryentry.LENTRY_TRAFFICINCHRGENAME
                    + "', @LENTRY_LORRYNO='" + obj_loryentry.LENTRY_LORRYNO
                    + "', @LENTRY_NONPLACEMENTREASON='" + obj_loryentry.LENTRY_NONPLACEMENTREASON
                    + "', @LENTRY_REMARKS='" + obj_loryentry.LENTRY_REMARKS
                    + "', @LENTRY_BOOKINGTYPE='" + obj_loryentry.LENTRY_BOOKINGTYPE
                    + "', @LENTRY_PARTYNAME='" + obj_loryentry.LENTRY_PARTYNAME
                    + "', @LEMNTRY_FROMSTATION='" + obj_loryentry.LEMNTRY_FROMSTATION
                    + "', @LENTRY_TODESTINATION='" + obj_loryentry.LENTRY_TODESTINATION
                    + "', @LENTRY_VEHICLETYPE='" + obj_loryentry.LENTRY_VEHICLETYPE
                    + "', @LENTRY_ORDERDATETIME='" + obj_loryentry.LENTRY_ORDERDATETIME
                    + "', @LENTRY_PLACEDTIME='" + obj_loryentry.LENTRY_PLACEDTIME
                    + "', @LENTRY_BROKERNAME='" + obj_loryentry.LENTRY_BROKERNAME
                    + "', @LENTRY_STOPPOINTS=" + obj_loryentry.LENTRY_STOPPOINTS
                    + ", @LENTRY_RATETYPE='" + obj_loryentry.LENTRY_RATETYPE
                    + "', @LENTRY_RATESETTLED=" + obj_loryentry.LENTRY_RATESETTLED


                    + ", @LENTRY_HIRE=" + obj_loryentry.LENTRY_HIRE

                    + ", @LENTRY_LORRYDETAIN='" + obj_loryentry.LENTRY_LORRYDETAIN
                    + "', @LENTRY_REPORTTIME='" + obj_loryentry.LENTRY_REPORTTIME
                    + "', @LENTRY_DESPATCHTIME='" + obj_loryentry.LENTRY_DESPATCHTIME
                    + "', @LENTRY_SUPERVBOOKINGNAME='" + obj_loryentry.LENTRY_SUPERVBOOKINGNAME
                    + "', @LENTRY_EXPECTEDDLYDATE='" + obj_loryentry.LENTRY_EXPECTEDDLYDATE
                    + "', @LENTRY_CHALLANNO=" + obj_loryentry.LENTRY_CHALLANNO

                    + ", @LENTRY_DRIVERNAME='" + obj_loryentry.LENTRY_DRIVERNAME
                    + "', @LENTRY_DRIVERPHNO='" + obj_loryentry.LENTRY_DRIVERPHNO
                    + "', @LENTRY_OWNERNAME='" + obj_loryentry.LENTRY_OWNERNAME

                    + "', @LENTRY_REPORTINGDATE='" + obj_loryentry.LENTRY_REPORTINGDATE
                    + "', @LENTRY_DELIVERYDATE='" + obj_loryentry.LENTRY_DELIVERYDATE
                    + "', @LENTRY_DLYAT='" + obj_loryentry.LENTRY_DLYAT
                    + "', @LENTRY_ACKNAME='" + obj_loryentry.LENTRY_ACKNAME
                    + "', @LENTRY_ACKCODE='" + obj_loryentry.LENTRY_ACKCODE
                    + "', @LENTRY_ACKREMARKS='" + obj_loryentry.LENTRY_ACKREMARKS
                    + "', @LENTRY_CREATEDDATE='" + obj_loryentry.LENTRY_CREATEDDATE
                    + "',  @LENTRY_CREATEDBY='" + obj_loryentry.CREATEDBY
                    + "', @LENTRY_STATUS=" + obj_loryentry.LENTRY_STATUS + ""))
                    result = true;
                else
                    result = false;
                break;

            case operation.Insertinlog:
                if (ExecuteNonQuery("EXEC USP_SMVTS_LORRY_ENTRY @OPERATION = 'Insertinlog',  @LENTRY_TRAFFICINCHRGENAME='" + obj_loryentry.LENTRY_TRAFFICINCHRGENAME
                    + "', @LENTRY_LORRYNO='" + obj_loryentry.LENTRY_LORRYNO
                    + "', @LENTRY_NONPLACEMENTREASON='" + obj_loryentry.LENTRY_NONPLACEMENTREASON
                    + "', @LENTRY_REMARKS='" + obj_loryentry.LENTRY_REMARKS
                    + "', @LENTRY_BOOKINGTYPE='" + obj_loryentry.LENTRY_BOOKINGTYPE
                    + "', @LENTRY_PARTYNAME='" + obj_loryentry.LENTRY_PARTYNAME
                    + "', @LEMNTRY_FROMSTATION='" + obj_loryentry.LEMNTRY_FROMSTATION
                    + "', @LENTRY_TODESTINATION='" + obj_loryentry.LENTRY_TODESTINATION
                    + "', @LENTRY_VEHICLETYPE='" + obj_loryentry.LENTRY_VEHICLETYPE
                    + "', @LENTRY_ORDERDATETIME='" + obj_loryentry.LENTRY_ORDERDATETIME
                    + "', @LENTRY_PLACEDTIME='" + obj_loryentry.LENTRY_PLACEDTIME
                    + "', @LENTRY_BROKERNAME='" + obj_loryentry.LENTRY_BROKERNAME
                    + "', @LENTRY_STOPPOINTS=" + obj_loryentry.LENTRY_STOPPOINTS
                    + ", @LENTRY_RATETYPE='" + obj_loryentry.LENTRY_RATETYPE
                    + "', @LENTRY_RATESETTLED=" + obj_loryentry.LENTRY_RATESETTLED


                    + ", @LENTRY_HIRE=" + obj_loryentry.LENTRY_HIRE

                    + ", @LENTRY_LORRYDETAIN='" + obj_loryentry.LENTRY_LORRYDETAIN
                    + "', @LENTRY_REPORTTIME='" + obj_loryentry.LENTRY_REPORTTIME
                    + "', @LENTRY_DESPATCHTIME='" + obj_loryentry.LENTRY_DESPATCHTIME
                    + "', @LENTRY_SUPERVBOOKINGNAME='" + obj_loryentry.LENTRY_SUPERVBOOKINGNAME
                    + "', @LENTRY_EXPECTEDDLYDATE='" + obj_loryentry.LENTRY_EXPECTEDDLYDATE
                    + "', @LENTRY_CHALLANNO=" + obj_loryentry.LENTRY_CHALLANNO

                    + ", @LENTRY_DRIVERNAME='" + obj_loryentry.LENTRY_DRIVERNAME
                    + "', @LENTRY_DRIVERPHNO='" + obj_loryentry.LENTRY_DRIVERPHNO
                    + "', @LENTRY_OWNERNAME='" + obj_loryentry.LENTRY_OWNERNAME

                    + "', @LENTRY_REPORTINGDATE='" + obj_loryentry.LENTRY_REPORTINGDATE
                    + "', @LENTRY_DELIVERYDATE='" + obj_loryentry.LENTRY_DELIVERYDATE
                    + "', @LENTRY_DLYAT='" + obj_loryentry.LENTRY_DLYAT
                    + "', @LENTRY_ACKNAME='" + obj_loryentry.LENTRY_ACKNAME
                    + "', @LENTRY_ACKCODE='" + obj_loryentry.LENTRY_ACKCODE
                    + "', @LENTRY_ACKREMARKS='" + obj_loryentry.LENTRY_ACKREMARKS
                    + "', @LENTRY_CREATEDDATE='" + obj_loryentry.LENTRY_CREATEDDATE
                    + "', @LENTRY_CREATEDBY='" + obj_loryentry.CREATEDBY
                    + "',  @LENTRY_MODIFIEDBY='" + obj_loryentry_log.LENTRY_MODIFIEDBY
                    + "',  @LENTRY_MODIFIEDDATE='" + obj_loryentry_log.LENTRY_MODIFIEDDATE
                    + "', @LENTRY_STATUS=" + obj_loryentry.LENTRY_STATUS + ""))
                    result = true;
                else
                    result = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_LORRY_ENTRY @OPERATION = 'Update', @LENTRY_ID=" + obj_loryentry.LENTRY_ID + ",  @LENTRY_TRAFFICINCHRGENAME='" + obj_loryentry.LENTRY_TRAFFICINCHRGENAME
                    + "', @LENTRY_LORRYNO='" + obj_loryentry.LENTRY_LORRYNO
                    + "', @LENTRY_NONPLACEMENTREASON='" + obj_loryentry.LENTRY_NONPLACEMENTREASON
                    + "', @LENTRY_REMARKS='" + obj_loryentry.LENTRY_REMARKS
                    + "', @LENTRY_BOOKINGTYPE='" + obj_loryentry.LENTRY_BOOKINGTYPE
                    + "', @LENTRY_PARTYNAME='" + obj_loryentry.LENTRY_PARTYNAME
                    + "', @LEMNTRY_FROMSTATION='" + obj_loryentry.LEMNTRY_FROMSTATION
                    + "', @LENTRY_TODESTINATION='" + obj_loryentry.LENTRY_TODESTINATION
                    + "', @LENTRY_VEHICLETYPE='" + obj_loryentry.LENTRY_VEHICLETYPE
                    + "', @LENTRY_ORDERDATETIME='" + obj_loryentry.LENTRY_ORDERDATETIME
                    + "', @LENTRY_PLACEDTIME='" + obj_loryentry.LENTRY_PLACEDTIME
                    + "', @LENTRY_BROKERNAME='" + obj_loryentry.LENTRY_BROKERNAME
                    + "', @LENTRY_STOPPOINTS=" + obj_loryentry.LENTRY_STOPPOINTS
                    + ", @LENTRY_RATETYPE='" + obj_loryentry.LENTRY_RATETYPE
                    + "', @LENTRY_RATESETTLED=" + obj_loryentry.LENTRY_RATESETTLED


                    + ", @LENTRY_HIRE=" + obj_loryentry.LENTRY_HIRE

                    + ", @LENTRY_LORRYDETAIN='" + obj_loryentry.LENTRY_LORRYDETAIN
                    + "', @LENTRY_REPORTTIME='" + obj_loryentry.LENTRY_REPORTTIME
                    + "', @LENTRY_DESPATCHTIME='" + obj_loryentry.LENTRY_DESPATCHTIME
                    + "', @LENTRY_SUPERVCODE='a11',@LENTRY_SUPERVBOOKINGNAME='" + obj_loryentry.LENTRY_SUPERVBOOKINGNAME
                    + "', @LENTRY_EXPECTEDDLYDATE='" + obj_loryentry.LENTRY_EXPECTEDDLYDATE
                    + "', @LENTRY_CHALLANNO=" + obj_loryentry.LENTRY_CHALLANNO

                    + ", @LENTRY_DRIVERNAME='" + obj_loryentry.LENTRY_DRIVERNAME
                    + "', @LENTRY_DRIVERPHNO='" + obj_loryentry.LENTRY_DRIVERPHNO
                    + "', @LENTRY_OWNERNAME='" + obj_loryentry.LENTRY_OWNERNAME

                    + "', @LENTRY_REPORTINGDATE='" + obj_loryentry.LENTRY_REPORTINGDATE
                    + "', @LENTRY_DELIVERYDATE='" + obj_loryentry.LENTRY_DELIVERYDATE
                    + "', @LENTRY_DLYAT='" + obj_loryentry.LENTRY_DLYAT
                    + "', @LENTRY_ACKNAME='" + obj_loryentry.LENTRY_ACKNAME
                    + "', @LENTRY_ACKCODE='" + obj_loryentry.LENTRY_ACKCODE
                    + "', @LENTRY_ACKREMARKS='" + obj_loryentry.LENTRY_ACKREMARKS
                    + "', @LENTRY_CREATEDDATE='" + obj_loryentry.LENTRY_CREATEDDATE
                    + "', @LENTRY_STATUS=" + obj_loryentry.LENTRY_STATUS + ""))

                    result = true;
                else
                    result = false;
                break;


            default:
                break;

        }
        return result;
    }


    internal static bool save_Lorrytrackdetails(SMVTS_LORRY_TRACKING obj_lorytrack, SMVTS_LORRY_TRACKING_LOG obj_lorytracklog)
    {
        bool result = false;
        switch (obj_lorytrack.OPERATION)
        {
            case operation.Insert:

                if (ExecuteNonQuery("EXEC USP_SMVTS_LORRY_TRACKING @OPERATION = 'Insert',@LTRACKING_TRIPID=" + obj_lorytrack.LTRACKING_TRIPID
                    + ",@LTRACKING_LORRYNO ='" + obj_lorytrack.LTRACKING_LORRYNO
                    + "', @LTRACKING_DATE='" + obj_lorytrack.LTRACKING_DATE
                    + "', @LTRACKING_FROMSTATION='" + obj_lorytrack.LTRACKING_FROMSTATION
                    + "', @LTRACKING_TOSTATION='" + obj_lorytrack.LTRACKING_TOSTATION
                    + "', @LTRACKING_REPORTDATE='" + obj_lorytrack.LTRACKING_REPORTDATE
                    + "', @LTRACKING_TIME='" + obj_lorytrack.LTRACKING_TIME
                    + "', @LTRACKING_TRACKREMARK='" + obj_lorytrack.LTRACKING_TRACKREMARK
                    + "', @LTRACKING_DELVDATE='" + obj_lorytrack.LTRACKING_DELVDATE
                    + "', @LTRACKING_TACKINGON='" + obj_lorytrack.LTRACKING_TACKINGON
                    + "', @LTRACKING_LOCATION='" + obj_lorytrack.LTRACKING_LOCATION
                    + "', @LTRACKING_CREATEDBY='" + obj_lorytrack.LTRACKING_CREATEDBY
                    + "', @LTRACKING_CREATEDDATE='" + obj_lorytrack.LTRACKING_CREATEDDATE
                    + "', @LTRACKING_STATUS=" + obj_lorytrack.LTRACKING_STATUS + ""))

                    result = true;
                else
                    result = false;
                break;

            case operation.Insertinlog:

                if (ExecuteNonQuery("EXEC USP_SMVTS_LORRY_TRACKING @OPERATION = 'Insertinlog',@LTRACKING_TRIPID=" + obj_lorytracklog.LTRACKING_TRIPID
                    + ",  @LTRACKING_LORRYNO ='" + obj_lorytrack.LTRACKING_LORRYNO
                    + "', @LTRACKING_DATE='" + obj_lorytrack.LTRACKING_DATE
                    + "', @LTRACKING_FROMSTATION='" + obj_lorytrack.LTRACKING_FROMSTATION
                    + "', @LTRACKING_TOSTATION='" + obj_lorytrack.LTRACKING_TOSTATION
                    + "', @LTRACKING_REPORTDATE='" + obj_lorytrack.LTRACKING_REPORTDATE
                    + "', @LTRACKING_TIME='" + obj_lorytrack.LTRACKING_TIME
                    + "', @LTRACKING_TRACKREMARK='" + obj_lorytrack.LTRACKING_TRACKREMARK
                    + "', @LTRACKING_DELVDATE='" + obj_lorytrack.LTRACKING_DELVDATE
                    + "', @LTRACKING_TACKINGON='" + obj_lorytrack.LTRACKING_TACKINGON
                    + "', @LTRACKING_LOCATION='" + obj_lorytrack.LTRACKING_LOCATION
                    + "', @LTRACKING_CREATEDBY='" + obj_lorytrack.LTRACKING_CREATEDBY
                    + "', @LTRACKING_CREATEDDATE='" + obj_lorytrack.LTRACKING_CREATEDDATE
                    + "', @LTRACKING_STATUS=" + obj_lorytrack.LTRACKING_STATUS
                    + ",  @LTRACKING_MODIFIEDBY='" + obj_lorytracklog.LTRACKING_MODIFIEDBY
                    + "', @LTRACKING_MODOFIEDDATE='" + obj_lorytracklog.LTRACKING_MODOFIEDDATE + "' "))

                    result = true;
                else
                    result = false;
                break;

            case operation.Update:
                if (ExecuteNonQuery("EXEC USP_SMVTS_LORRY_TRACKING @OPERATION = 'Update',@LTRACKING_ID=" + obj_lorytrack.LTRACKING_ID + ",  @LTRACKING_LORRYNO ='" + obj_lorytrack.LTRACKING_LORRYNO + "', @LTRACKING_TRIPID=" + obj_lorytracklog.LTRACKING_TRIPID
                    + "', @LTRACKING_DATE='" + obj_lorytrack.LTRACKING_DATE
                    + "', @LTRACKING_FROMSTATION='" + obj_lorytrack.LTRACKING_FROMSTATION
                    + "', @LTRACKING_TOSTATION='" + obj_lorytrack.LTRACKING_TOSTATION
                    + "', @LTRACKING_REPORTDATE='" + obj_lorytrack.LTRACKING_REPORTDATE
                    + "', @LTRACKING_TIME='" + obj_lorytrack.LTRACKING_TIME
                    + "', @LTRACKING_TRACKREMARK='" + obj_lorytrack.LTRACKING_TRACKREMARK
                    + "', @LTRACKING_DELVDATE='" + obj_lorytrack.LTRACKING_DELVDATE
                    + "', @LTRACKING_TACKINGON='" + obj_lorytrack.LTRACKING_TACKINGON
                    + "', @LTRACKING_LOCATION='" + obj_lorytrack.LTRACKING_LOCATION
                    + "', @LTRACKING_CREATEDBY='" + obj_lorytrack.LTRACKING_CREATEDBY
                    + "', @LTRACKING_CREATEDDATE='" + obj_lorytrack.LTRACKING_CREATEDDATE
                    + "', @LTRACKING_STATUS=" + obj_lorytrack.LTRACKING_STATUS + ""))
                    result = true;
                else
                    result = false;
                break;


            default:
                break;

        }
        return result;
    }

    internal static bool delvehicle(string vno)
    {
        bool r = false;
        r = ExecuteNonQuery("Delete from SMVTS_LORRY_ENTRY where LENTRY_LORRYNO='" + vno + "' ");

        return r;
    }

    internal static bool deltrackvehicle(string vno)
    {
        bool r = false;
        r = ExecuteNonQuery("Delete from SMVTS_LORRY_TRACKING where LTRACKING_LORRYNO ='" + vno + "' and LTRACKING_TACKINGON <>'Unloading'");
        return r;
    }
    internal static DataTable getvehicledetails(string vehno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Select * from SMVTS_LORRY_ENTRY  where LENTRY_LORRYNO='" + vehno + "' AND LENTRY_NONPLACEMENTREASON<>'Order Done' ");
        return dt;
    }
    internal static DataTable getvehicletrackdetails(string vehno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Select * from SMVTS_LORRY_TRACKING  where LTRACKING_LORRYNO='" + vehno + "' AND LTRACKING_TACKINGON<>'Unloading' ");
        return dt;
    }
    internal static DataTable getvehname(string vno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select s.VEHLEMM_NAME,d.DRIVER_NAME,d.DRIVER_MOBILENO from SMVTS_VEHICLES v inner join SMVTS_DRIVERS d on v.VEHICLES_DRIVER_ID=d.DRIVER_ID inner join SMVTS_VEHICLEMODELS s on v.VEHICLES_VEHICLEMAKEMODEL_ID=s.VEHLEMM_ID where v.VEHICLES_REGNUMBER='" + vno + "'");
        return dt;
    }

    internal static DataTable getvehtrack(string vno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Select * from SMVTS_LORRY_ENTRY  where LENTRY_LORRYNO='" + vno + "'");
        return dt;
    }
    internal static bool updateinentry(string vehno)
    {
        bool r = false;
        r = ExecuteNonQuery("update SMVTS_LORRY_ENTRY set LENTRY_NONPLACEMENTREASON='Empty' where LENTRY_LORRYNO='" + vehno + "'");
        return r;
    }
    internal static DataTable getvehicleno()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Select * from SMVTS_LORRY_ENTRY where LENTRY_NONPLACEMENTREASON='Order Done'");
        return dt;
    }
    internal static DataTable getvehiclesbyvehno(int id, string vno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select VEHICLES_REGNUMBER from SMVTS_VEHICLES(nolock) where VEHICLES_CATEGORY_ID=" + id + " and vehicles_device_id!=0 and VEHICLES_REGNUMBER not in(Select LENTRY_LORRYNO from SMVTS_LORRY_ENTRY where LENTRY_NONPLACEMENTREASON='Order Done') and VEHICLES_REGNUMBER='" + vno + "' ");
        return dt;
    }
    internal static DataTable getvehiclesall(int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select VEHICLES_REGNUMBER from SMVTS_VEHICLES(nolock) where VEHICLES_CATEGORY_ID=" + id + " and vehicles_device_id!=0 and VEHICLES_REGNUMBER not in(Select LENTRY_LORRYNO from SMVTS_LORRY_ENTRY where LENTRY_NONPLACEMENTREASON='Order Done')");
        return dt;
    }


    internal static DataTable getvehiclesallBus(int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select VEHICLES_REGNUMBER from SMVTS_VEHICLES(nolock) where VEHICLES_CATEGORY_ID=" + id + " and vehicles_device_id!=0 ");
        return dt;
    }
    internal static DataTable getvehiclesallbystatus(int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select VEHICLES_REGNUMBER from SMVTS_VEHICLES(nolock) where VEHICLES_CATEGORY_ID=" + id + " and vehicles_device_id!=0 and VEHICLES_REGNUMBER  in(Select LENTRY_LORRYNO from SMVTS_LORRY_ENTRY where LENTRY_NONPLACEMENTREASON='Order Done')");
        return dt;
    }
    internal static DataTable getvehiclesfirst(string prefix, int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select VEHICLES_REGNUMBER from SMVTS_VEHICLES(nolock) where VEHICLES_CATEGORY_ID=" + id + " and vehicles_device_id!=0 and  VEHICLES_REGNUMBER like '%" + prefix + "%'");
        return dt;
    }
    internal static DataTable getinformation(string id)
    {
        DataTable dt = ExecuteQuery("select * from SMVTS_LORRY_TRACKING where LTRACKING_ID=" + id + "");
        return dt;
    }
    internal static DataTable getinfo(string id)
    {
        DataTable dt = ExecuteQuery("select * from SMVTS_LORRY_ENTRY where LENTRY_ID=" + id + "");
        return dt;

    }
    internal static DataTable get_partnerconnection(int p)
    {
        DataTable dt = ExecuteQuery("select categ_prodname from smvts_categories(nolock) where categ_id=" + p + "");
        return dt;
    }

    internal static DataTable get_PARTYS(SMVTS_PARTYNAMES _obj_Smvts_PARTYS)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_PARTYS.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("SELECT * FROM SMVTS_PARTYNAMES(NOLOCK) WHERE PARTY_CATEGID=" + _obj_Smvts_PARTYS.PARTY_CATEGID + "");
                break;
            case operation.Empty:
                dt = ExecuteQuery("SELECT * FROM SMVTS_PARTYNAMES(NOLOCK) WHERE PARTY_ID=" + _obj_Smvts_PARTYS.PARTY_ID + "");
                break;
            case operation.Check:
                dt = ExecuteQuery("SELECT * FROM SMVTS_PARTYNAMES(NOLOCK) WHERE PARTY_NAME='" + _obj_Smvts_PARTYS.PARTY_NAME + "' AND PARTY_CATEGID=" + _obj_Smvts_PARTYS.PARTY_CATEGID + "");
                break;
            default:
                break;
        }
        return dt;
    }

    internal static bool set_partys(SMVTS_PARTYNAMES _obj_Smvts_PARTYS)
    {
        bool result = false;
        switch (_obj_Smvts_PARTYS.OPERATION)
        {
            case operation.Insert:

                if (ExecuteNonQuery("insert into SMVTS_PARTYNAMES (PARTY_NAME,PARTY_CATEGID,PARTY_INSERTEDDATE,PARTY_LOCATION,PARTYCONTRACT_STARTDATE,PARTYCONTRACT_ENDDATE,PARTY_STATUS) VALUES('" + _obj_Smvts_PARTYS.PARTY_NAME + "'," + _obj_Smvts_PARTYS.PARTY_CATEGID + ",'" + _obj_Smvts_PARTYS.PARTY_INSERTEDDATE + "','" + _obj_Smvts_PARTYS.PARTY_LOCATION + "','" + _obj_Smvts_PARTYS.PARTYCONTRACT_STARTDATE + "','" + _obj_Smvts_PARTYS.PARTYCONTRACT_ENDDATE + "'," + _obj_Smvts_PARTYS.PARTY_STATUS + ")"))

                    result = true;
                else
                    result = false;
                break;
            case operation.Update:
                if (ExecuteNonQuery("UPDATE SMVTS_PARTYNAMES SET PARTY_NAME='" + _obj_Smvts_PARTYS.PARTY_NAME + "',PARTY_CATEGID=" + _obj_Smvts_PARTYS.PARTY_CATEGID + ",PARTY_INSERTEDDATE='" + _obj_Smvts_PARTYS.PARTY_INSERTEDDATE + "',PARTY_LOCATION='" + _obj_Smvts_PARTYS.PARTY_LOCATION + "',PARTYCONTRACT_STARTDATE='" + _obj_Smvts_PARTYS.PARTYCONTRACT_STARTDATE + "',PARTYCONTRACT_ENDDATE='" + _obj_Smvts_PARTYS.PARTYCONTRACT_ENDDATE + "',PARTY_STATUS=" + _obj_Smvts_PARTYS.PARTY_STATUS + " WHERE PARTY_ID=" + _obj_Smvts_PARTYS.PARTY_ID + ""))
                    result = true;
                else
                    result = false;

                break;

            default:
                break;
        }
        return result;
    }

    internal static DataTable get_clientpartynames(string clientid)
    {
        DataTable dt = ExecuteQuery("select * from SMVTS_PARTYNAMES where PARTY_CATEGID=" + clientid + "");
        return dt;
    }

    internal static DataTable get_clientparties(SMVTS_ER_TRIPINFO _obj_Smvts_partys)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_partys.OPERATION)
        {
            case operation.Select:
                dt = ExecuteQuery("select ER_ID,ER_VEHICLENO,PLACE,TRIPDATE,ER_PARTYNAME,ER_FROM,ER_TO,ER_DISPATCHDATE,ER_EXPECTED_DATE from SMVTS_ER_TRIPINFO(nolock) inner join SMVTS_DASHBOARD_VIEW(nolock) on VNO=ER_VEHICLENO where ER_PARTYNAME like '%" + _obj_Smvts_partys.ER_PARTYNAME + "%' and ER_CATEGID=" + _obj_Smvts_partys.ER_CATEGID + "");
                break;
            default:
                break;
        }
        return dt;
    }

    internal static DataTable GETDRIVERDETAILS(string drivernumber)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("select ER_VEHICLENO,ER_DRIVER_NAME,ER_DRIVER_PHONE,ER_PARTYNAME,ER_FROM,ER_TO from SMVTS_ER_TRIPINFO(nolock) where ER_DRIVER_PHONE='" + drivernumber + "' ");
        return dt;
    }

    internal static DataTable get_Categnames()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select categ_name,categ_id from smvts_categories");
        return dt;
    }


    internal static bool savedata(string clname, string mobno, string rno)
    {

        // bool r = false;
        // bool r = true;
        bool r = ExecuteNonQuery1("EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSERT',@CATAGORY_ID=" + clname + ",@MOBILE_NO='" + mobno + "',@OTP='" + rno + "' ");
        // bool r = ExecuteNonQuery("Insert into SMVTS_MOBILEAPP(CATAGORY_ID,MOBILE_NO,CREATED_DATE,OTP)values('" + clname + "','" + mobno + "',GETDATE(),'" + rno + "')");
        return r;
    }

    internal static DataTable getverificationdata(string mno, string otp1)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("select * from smvts_mobileapp where MOBILE_NO='" + mno + "' and OTP='" + otp1 + "'");
        return dt;
    }

    internal static bool senddata(string imno, string mno, string otp1)
    {
        bool r = false;
        // r=ExecuteNonQuery1("EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSTALL_ACTIVATE',@OTP='"+ otp1 +"',@MOBILE_NO='"+mno+',@MOBILEIMEI='"+imno+"'")
        r = ExecuteNonQuery1("update smvts_mobileapp set MOBILEIMEI='" + imno + "' where  MOBILE_NO='" + mno + "' and OTP='" + otp1 + "' ");
        return r;
    }


    internal static DataTable install_Activation(string imno, string mno, string otp1)
    {
        DataTable r = new DataTable();
        r = ExecuteQuery1("EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSTALL_ACTIVATE',@OTP='" + otp1 + "',@MOBILE_NO='" + mno + "',@MOBILEIMEI='" + imno + "'");
        //r = ExecuteNonQuery1("update smvts_mobileapp set MOBILEIMEI='" + imno + "' where  MOBILE_NO='" + mno + "' and OTP='" + otp1 + "' ");
        return r;
    }

    internal static DataTable getverify(string mno, string imno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("select * from smvts_mobileapp where MOBILE_NO='" + mno + "' and MOBILEIMEI='" + imno + "'and Activestatus=1 ");
        return dt;
    }

    internal static DataTable getData(int CategId)
    {
        DataTable dt = new DataTable();
        //dt = ExecuteQuery1("select c.CATEG_NAME,m.ID,m.MOBILE_NO,m.MOBILEIMEI,m.Activestatus from smvts_mobileapp m  inner join SMVTS_CATEGORIES c on m.CATAGORY_ID=c.CATEG_ID where m.Activestatus=1");
        dt = ExecuteQuery("EXEC USP_GET_MOBILEAPP_DETAILS @CATEGID=" + CategId);
        return dt;
    }

    internal static DataTable getrowdata(int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("select * from smvts_mobileapp where id=" + id + " ");
        return dt;
    }


    internal static bool updatedata(string mobno, string imno, int j)
    {
        bool r = ExecuteNonQuery1("EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='UPDATE',@MOBILE_NO='" + mobno + "',@MOBILEIMEI='" + imno + "',@Activestatus=" + j + " ");
        return r;
    }

    internal static DataTable getGeoLandmarks(string Userid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [USP_LANDMARKS] @USER_ID='" + Userid + "'");
        return dt;
    }

    internal static DataTable gettabdata()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Select * from smvts_tabs");
        return dt;
    }

    internal static DataTable get24data(int i)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Select ID,TABNAME  from smvts_tabs where id=" + i + "");
        return dt;
    }

    internal static DataTable getempty()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("SELECT * FROM SMVTS_ER_TRIPINFO ");
        return dt;
    }
    internal static DataSet GetTrackdata1(int id)
    {
        DataSet dt = new DataSet();
        //  dt = ExecuteQueryDataset("EXEC USP_SMVTS_FASTEXPRESSTRACKING @USERID=" + id + "");
        dt = ExecuteQueryDataset("EXEC USP_SMVTS_EXPRESSTRACKINGVEHICLES @USERID=" + id + "");
        return dt;
    }
    internal static DataSet GetExpTrackdata1(int id)
    {
        DataSet dt = new DataSet();
        //  dt = ExecuteQueryDataset("EXEC USP_SMVTS_FASTEXPRESSTRACKING @USERID=" + id + "");

        dt = ExecuteQueryDataset("EXEC USP_SMVTS_EXPRESSTRACKINGVEHICLESCHANGETESTING @USERID=" + id + "");
        //  dt = ExecuteQueryDataset("EXEC USP_SMVTS_EXPRESSTRACKINGVEHICLESCHANGE @USERID=" + id + "");
        return dt;
    }


    internal static DataTable GetTrackdata(string operation, int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_EXPRESSTRACKING @OPERATION='" + operation + "' ,@USERID=" + id + "");
        return dt;
    }
    internal static DataTable getrecord(string oper, string VNO)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_GPS_DSTANCE @operation='" + oper + "',@VEHICLE_NO='" + VNO + "'");
        return dt;
    }

    internal static bool setrecorddata(string operation, DateTime rptdate, string status, string VNO, DateTime dispdate, string bookbrnch, DateTime curentdt, string place)
    {
        bool result;

        result = Dal.ExecuteNonQuery("Exec USP_SMVTS_EXPDBCALL  @operation='" + operation + "' ,@ER_CURRENT_STATUS='" + status + "',@ER_REPORTING_DATE='" + rptdate + "',@ER_VEHICLENO='" + VNO + "',@ER_DISPATCHDATE='" + dispdate + "',@ER_BOOKBRANCH='" + bookbrnch + "',@ER_CURRENT_DATE='" + curentdt + "',@LOCATION='" + place + "'");
        return result;
    }

    internal static bool settransitrecorddata(string operation, string rmk, string status, string VNO, DateTime dispdate, string bookbrnch, DateTime curentdt, string place)
    {
        bool result;

        result = Dal.ExecuteNonQuery("Exec USP_SMVTS_EXPDBCALL  @operation='" + operation + "' ,@ER_CURRENT_STATUS='" + status + "',@ER_VEHICLENO='" + VNO + "',@ER_DISPATCHDATE='" + dispdate + "',@ER_BOOKBRANCH='" + bookbrnch + "',@ER_CURRENT_DATE='" + curentdt + "',@LOCATION='" + place + "'");
        return result;
    }

    internal static bool setunloadingrecorddata(string operation, string rmk, DateTime rptdate, string status, string VNO, string bookbrnch, DateTime curentdt, string place)
    {
        bool result;

        //  result = Dal.ExecuteNonQuery2("Exec USP_SMVTS_EXPRESSTRACKING1  @operation='" + operation + "' ,@ER_CURRENT_STATUS='" + status + "',@ER_REPORTING_DATE='" + rptdate + "',@ER_VEHICLENO='" + VNO + "',@ER_BOOKBRANCH='" + bookbrnch + "',@ER_CURRENT_DATE='" + curentdt + "'");
        result = Dal.ExecuteNonQuery("Exec USP_SMVTS_EXPDBCALL  @operation='" + operation + "' ,@ER_CURRENT_STATUS='" + status + "',@ER_REPORTING_DATE='" + rptdate + "',@ER_VEHICLENO='" + VNO + "',@ER_BOOKBRANCH='" + bookbrnch + "',@ER_CURRENT_DATE='" + curentdt + "',@LOCATION='" + place + "'");
        return result;
    }


    internal static bool setremark(string ope, string K, string rmk)
    {
        bool r;
        r = Dal.ExecuteNonQuery("Exec USP_SMVTS_EXPDBCALL @operation='" + ope + "',@ER_VEHICLENO='" + K + "',@REMARK_DESC='" + rmk + "'");
        return r;
    }

    internal static bool setrecorddata1(string operation, string status, string j, string bookbrnch, DateTime curentdt, string place)
    {
        bool result;

        result = Dal.ExecuteNonQuery("Exec USP_SMVTS_EXPDBCALL  @operation='" + operation + "' ,@ER_CURRENT_STATUS='" + status + "',@ER_VEHICLENO='" + j + "',@ER_BOOKBRANCH='" + bookbrnch + "',@ER_CURRENT_DATE='" + curentdt + "',@LOCATION='" + place + "'");
        return result;
    }

    internal static DataTable GETEXPDATA(int j)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_ER_EXCELUPLOADEXP @operation='GET_LATESTTABLE',@ER_CATEGID=" + j + "");
        return dt;
    }

    internal static DataTable getdispatchdate(string vehno, string fromloc, string dispdate, string partyname1)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select dbo.FN_DISPATCHED('" + vehno + "','" + fromloc + "','" + dispdate + "','" + partyname1 + "',null) as 'dispatchdate' ");
        // dt = ExecuteQuery("Exec dbo.FN_DISPATCHED('" + vehno + "','" + fromloc + "','" + dispdate + "')");
        return dt;

    }

    internal static DataTable getreportingdate(string vehno, string toloc, string dispdate, string partyname1)
    {

        DataTable dt = new DataTable();
        dt = ExecuteQuery("select dbo.FN_REACHED_DESTINATION('" + vehno + "','" + toloc + "','" + dispdate + "','" + partyname1 + "',null) as 'REACHED_DESTINATION' ");
        return dt;

    }

    internal static DataTable getgpsdistance(string vno, DateTime disdate, DateTime unloaddt)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_GPS_DSTANCE @operation='GETGPSDISTANCE',@VEHICLE_NO='" + vno + "',@ER_DISPATCHDATE='" + disdate + "',@UNLOADING_DATE='" + unloaddt + "'");
        return dt;
    }


    internal static bool setunloadingrecorddata(string status, string vno, DateTime unloaddt, decimal distance, DateTime curentdt, string bokbrnch, string place)
    {
        bool result;

        result = Dal.ExecuteNonQuery("Exec USP_SMVTS_EXPDBCALL  @operation='INUNLOADINGUPDATE' ,@ER_CURRENT_STATUS='" + status + "',@ER_VEHICLENO='" + vno + "',@UNLOADING_DATE='" + unloaddt + "',@DISTANCE=" + distance + ",@ER_BOOKBRANCH='" + bokbrnch + "',@ER_CURRENT_DATE='" + curentdt + "',@LOCATION='" + place + "'");
        return result;
    }

    internal static DataTable Getloadingcolorgrid(int id, string dbname)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQueryDB1("Exec USP_SMVTS_EXPRESSLOADINGCOLOR @USERID=" + id + "", "" + dbname + "");
        return dt;
    }

    internal static DataTable Getloadingcolorgrid(int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Exec USP_SMVTS_EXPRESSLOADINGCOLOR  @USERID=" + id + "");
        return dt;
    }

    internal static DataTable Getloadingcolorgrid1(string operation, int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Exec USP_SMVTS_EXPRESSLOADINGCOLOR1 @OPERATION='" + operation + "',  @USERID=" + id + "");
        return dt;
    }

    internal static DataSet getpendingrecords(int id)
    {
        DataSet ds = new DataSet();
        ds = ExecuteQueryDataset("Exec USP_SMVTS_EXCELUPLOAD_PENDING @USERID=" + id + " ");
        return ds;

    }
    internal static DataSet getalldatarecords(int id)
    {
        DataSet ds = new DataSet();
        ds = ExecuteQueryDataset("Exec USP_SMVTS_EXCELUPLOAD_ALL @USERID=" + id + " ");
        return ds;

    }

    internal static DataTable getusernames(SMVTS_USERS objusers)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("Select USERS_ID,USERS_FULLNAME from smvts_users where USERS_CATEGORY_ID=" + objusers.USERS_CATEGORY_ID + " and USERS_ROLE_ID=4 and USERS_STATUS=1 AND USERS_FULLNAME NOT IN('lkgupta','NicerGlobe','Shakti Sharma','choudry','dilip','Tiwari Castrol','SRT','BRD','ANK','RDR','RJY','VPM','DWS') ORDER BY USERS_BRANCH_STATUS");
        return dt;
    }

    internal static DataTable getinchargeusersnames(SMVTS_USERS objusers)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select distinct(ER_FORMAN_DETAILS) from job_er_info where ER_FORMAN_DETAILS not in('null','') ");
        // dt = ExecuteQuery("Select USERS_ID,USERS_FULLNAME from smvts_users where USERS_CATEGORY_ID=" + objusers.USERS_CATEGORY_ID + " and USERS_ROLE_ID=4 and USERS_STATUS=1 and USERS_BRANCH_STATUS=0");
        return dt;

    }
    internal static DataTable getbranchusersnames()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select distinct(bookingbranch)  from job_er_info");
        //  dt = ExecuteQuery("Select USERS_ID,USERS_FULLNAME from smvts_users where USERS_CATEGORY_ID=" + objusers.USERS_CATEGORY_ID + " and USERS_ROLE_ID=4 and USERS_STATUS=1 and USERS_BRANCH_STATUS=1");
        return dt;

    }

    internal static bool setupdatedata(smvts_job_er_info _objjob)
    {

        bool result;
        if (_objjob.operation == "Repair_other")
        {
            result = Dal.ExecuteNonQuery("exec USP_SMVTS_EXPRESSUPDATES @operation='" + _objjob.operation + "',  @ER_CURRENT_STATUS='" + _objjob.Gps_Status + "',@ER_CURRENT_DATE='" + _objjob.currentdate + "',@REMARK_DESC=" + (Convert.ToString(_objjob.REMARK_DESC) == string.Empty ? "null" : "'" + _objjob.REMARK_DESC + "'") + ",@ER_VEHICLENO='" + _objjob.Vehicleno + "'");
        }
        else
        {
            result = Dal.ExecuteNonQuery("exec USP_SMVTS_EXPRESSUPDATES @operation='" + _objjob.operation + "',  @ER_CURRENT_STATUS='" + _objjob.Gps_Status + "',@ER_REPORTING_DATE=" + (Convert.ToString(_objjob.Gps_Reportingdatetime) == null ? null : "'" + _objjob.Gps_Reportingdatetime + "'") + ",@UNLOADING_DATE=" + (Convert.ToString(_objjob.GPS_Uloadingdatetime) == null ? "null" : "'" + _objjob.GPS_Uloadingdatetime + "'") + ",@ER_DISPATCHDATE=" + (Convert.ToString(_objjob.Gps_Dispatchdatetime) == null ? "null" : "'" + _objjob.Gps_Dispatchdatetime + "'") + ",@Location=" + (Convert.ToString(_objjob.Gps_Location) == string.Empty ? "null" : "'" + _objjob.Gps_Location.Replace("'", "") + "'") + ",@er_expected_date='" + _objjob.er_expected_date + "',@ER_VEHICLENO='" + _objjob.Vehicleno + "',@ER_BOOKBRANCH='" + _objjob.bookbranch + "',@ER_CURRENT_DATE='" + _objjob.currentdate + "',@DISTANCE=" + (Convert.ToString(_objjob.Gps_Distance) == "0" ? "null" : "'" + _objjob.Gps_Distance + "'") + ",@REMARK_DESC=" + (Convert.ToString(_objjob.REMARK_DESC) == string.Empty ? "null" : "'" + _objjob.REMARK_DESC + "'") + ",@toloc=" + (Convert.ToString(_objjob.From_loc) == string.Empty ? "null" : "'" + _objjob.From_loc + "'") + ",@partyname='" + _objjob.er_partyname + "' ");
        }
        return result;
    }

    internal static bool getrefresh(string vno)
    {
        bool result;
        result = Dal.ExecuteNonQuery(" EXEC Usp_smvts_latest_tripinfo  @vno='" + vno + "'");
        return result;

    }

    internal static DataTable getusersbranchwise(int i, int j)
    {
        DataTable dt;
        dt = ExecuteQuery("select USERS_BRANCH_STATUS from smvts_users where USERS_CATEGORY_ID=" + i + " and USERS_ID=" + j + " and USERS_STATUS=1");
        return dt;
    }

    internal static DataTable getdates(string vehno)
    {
        DataTable dt;
        dt = ExecuteQuery("Select gps_reportingdatetime,gps_dispatchdatetime from job_er_info where vno='" + vehno + "'");
        return dt;
    }

    internal static DataTable GETREPORTDATA(int usid, string operation)
    {
        DataTable dt;
        dt = ExecuteQuery("Execute USP_SMVTS_EXPRESSTRACKING_REPORTS @OPERATION='" + operation + "',@USERID=" + usid + "");
        return dt;
    }


    internal static DataTable getemptydata(int usid, string operation)
    {
        DataTable dt;
        dt = ExecuteQuery("");
        return dt;
    }
    internal static DataSet getalldata(int usid, string operation)
    {
        DataSet ds;
        ds = ExecuteQueryDataset("Execute USP_SMVTS_EXPRESSTRACKING_REPORTS @OPERATION='" + operation + "',@USERID=" + usid + "");
        return ds;
    }

    internal static DataTable deleteemptyrecord(string vehnumb)
    {
        DataTable dt;
        dt = ExecuteQuery("Execute usp_smvts_Deleteemptyrecord @vehno='" + vehnumb + "'");
        return dt;
    }

    internal static DataTable getschoolroute(string mno)
    {
        DataTable dt;
        dt = ExecuteQuery("Execute USP_SMVTS_TRACKINGAPI_MOBILE @OPERATION='GETVEHICLE',@MOBILENO='" + mno + "'");
        return dt;

    }

    internal static DataTable getowntrackingreport(int id, string Operation)
    {
        DataTable dt = new DataTable();
        switch (Operation)
        {
            case "VEHICLES":
                dt = ExecuteQuery("Execute usp_daily_tripinfo_report @userid=" + id + ",@OPERATION='VEHICLES'");
                break;
            case "BRANCHES":
                dt = ExecuteQuery("Execute usp_daily_tripinfo_report @userid=" + id + ",@OPERATION='BRANCHES'");
                break;
            default: break;
        }
        return dt;
    }

    internal static bool rowdatarefresh(string vehno)
    {
        bool r = false;
        r = Dal.ExecuteNonQuery("Exec Usp_smvts_latest_tripinfo @vno='" + vehno + "'");
        return r;
    }

    internal static DataTable getchartcount(string oper, string formanwise)
    {
        DataTable dt;
        dt = ExecuteQuery("Exec usp_smvts_chartdetails @operation='" + oper + "',@formanwise='" + formanwise + "'");
        // dt = ExecuteQuery("SELECT COUNT(VNO),er_current_status FROM job_er_info(NOLOCK) GROUP BY er_current_status");
        return dt;
    }

    internal static DataTable sendbulksms()
    {
        DataTable dt;

        dt = ExecuteQuery("select * from SMVTS_PICKUPPOINTS_SMS where SMS_ID in(1484,1485,981,980,979)");

        //dt = ExecuteQuery("select * from SMVTS_PICKUPPOINTS_SMS where SMS_CUSTMOBILE='"+mno+"'");
        // dt = ExecuteQuery("select * from SMVTS_PICKUPPOINTS_SMS where SMS_ID between 972 and 975");
        // dt = ExecuteQuery("select  distinct SMS_CUSTMOBILE,SMS_VEHICLENO from SMVTS_PICKUPPOINTS_SMS where ");
        return dt;
    }

    internal static DataTable getbranchchartcount(string oper, string branchwise)
    {
        DataTable dt;
        dt = ExecuteQuery("Exec usp_smvts_chartdetails @operation='" + oper + "',@branchwise='" + branchwise + "'");
        // dt = ExecuteQuery("SELECT COUNT(VNO),er_current_status FROM job_er_info(NOLOCK) GROUP BY er_current_status");
        return dt;
    }

    internal static DataTable getstatuschartcount(string oper, string statwise)
    {
        DataTable dt;
        dt = ExecuteQuery("Exec usp_smvts_chartdetails @operation='" + oper + "',@status='" + statwise + "'");
        // dt = ExecuteQuery("SELECT COUNT(VNO),er_current_status FROM job_er_info(NOLOCK) GROUP BY er_current_status");
        return dt;
    }

    internal static DataTable getallchartcount(string oper)
    {
        DataTable dt;
        dt = ExecuteQuery("Exec usp_smvts_chartdetails @operation='" + oper + "'");
        // dt = ExecuteQuery("SELECT COUNT(VNO),er_current_status FROM job_er_info(NOLOCK) GROUP BY er_current_status");
        return dt;
    }

    internal static DataTable getsourceloc(string vno)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT STATION_ID,STATION_NAME FROM SMVTS_TRIPINFO_STATIONS where STATION_NAME =(select er_from from  job_er_info where vno='" + vno + "') or STATION_NAME =(select er_to  from  job_er_info where vno='" + vno + "') ");
        return dt;
    }


    internal static DataTable getstationloc()
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT STATION_CODE,STATION_NAME FROM SMVTS_TRIPINFO_STATIONS");
        return dt;
    }
    internal static DataTable getpartyloc()
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT CUSTOMER_ID, CUSTOMER_NAME +'  ' +'(' +CUSTOMER_LOCATION +')' AS CUSTOMER_NAME FROM SMVTS_MASTER_CUSTOMERS");
        return dt;
    }

    internal static DataTable getpartylocation()
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT CUSTOMER_ID, CUSTOMER_NAME  FROM SMVTS_MASTER_CUSTOMERS");
        return dt;
    }

    internal static bool setcustomergeofencedetails(string operation, string partname1, string sourceids, string landmark1, int id)
    {
        bool r = false;
        r = ExecuteNonQuery("Exec usp_smvts_geofencemappingchanged @Operation='" + operation + "', @sourceid='" + sourceids + "',@partname='" + partname1 + "',@landmark='" + landmark1 + "',@Id=" + id + "");
        //  r = ExecuteNonQuery("Exec usp_smvts_geofencemapping @Operation='" + operation + "', @sourceid='" + sourceids + "',@partname='" + partname1 + "',@landmark='" + landmark1 + "',@Id=" + id + "");
        // usp_smvts_geofencemappingchanged r = ExecuteNonQuery("Insert into SMVTS_CUSTOMER_GEOFENCES values('" + partname + "','" + sourceid + "','" + landmark1 + "',1,1,getdate(),1,getdate())");
        return r;
    }
    internal static bool updatecustomergeofencedetails(string operation, string landmark1, int id)
    {

        bool r = false;
        r = ExecuteNonQuery("Exec usp_smvts_geofencemappingchanged @Operation='" + operation + "',@landmark='" + landmark1 + "',@Id=" + id + "");

        return r;
    }

    internal static DataTable getlandmarkids(string lndaddr)
    {
        DataTable dt;
        dt = ExecuteQuery("select LANDMARKS_ID from SMVTS_LANDMARKS where LANDMARKS_ADDRESS in('" + lndaddr + "')");
        return dt;

    }

    internal static DataTable getgeodata()
    {
        DataTable dt;
        // dt = ExecuteQuery("Select * from SMVTS_CUSTOMER_GEOFENCES");
        dt = ExecuteQuery("Select  GEOFENCE_ID,GEOFENCE_CUSTOMER_ID,GEOFENCE_STATUS, CUSTOMER_NAME,STATION_NAME,LANDMARKS_ADDRESS from SMVTS_TRIPINFO_STATIONS inner join SMVTS_CUSTOMER_GEOFENCES on STATION_ID=GEOFENCE_SOURCE_ID inner join  SMVTS_MASTER_CUSTOMERS on  customer_id=GEOFENCE_CUSTOMER_ID inner join SMVTS_LANDMARKS ON LANDMARKS_ID=GEOFENCE_LANDMARKID order by GEOFENCE_ID desc");
        return dt;
    }

    internal static DataTable getplacementdata(string vn)
    {
        DataTable dt;
        dt = ExecuteQuery("select * from job_er_info where vno='" + vn + "'");
        return dt;
    }

    internal static bool saveplacementdata(string vno1, string fromloc1, string toloc1, DateTime? dt1, DateTime? dt2, string ddlstatus1, string bcd1, DateTime dt3, string frm_bcd, string to_bcd, string lorrytype, string drivername, string driverphno, string staffname, string partyname, int categid)
    {
        bool r = false;
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select CONN_STR from SMVTS_GETDATABASENAME where CATEG_ID=" + categid + "");
        if (dt.Rows.Count > 0)
        {
            string query = "Exec USP_SMVTS_PLACEMENTDATA @bcd='" + bcd1 + "',@dt='" + dt3 + "', @vno='" + vno1 + "',@fromloc='" + fromloc1 + "',@toloc='" + toloc1 + "',@dt1='" + dt1 + "',@dt2='" + dt2 + "',@status1='" + ddlstatus1 + "',@frm_bcd='" + frm_bcd + "',@to_bcd='" + to_bcd + "',@lorrytype='" + lorrytype + "',@drivername='" + drivername + "',@driverphno='" + driverphno + "',@staffname='" + staffname + "',@partyname='" + partyname + "'";
            string coonstr = Convert.ToString(dt.Rows[0]["CONN_STR"]);
            r = ExecuteNonQuery3(query, coonstr);
        }
        return r;
    }


    internal static DataTable getrec(string vehno)
    {
        DataTable dt;
        dt = ExecuteQuery("select * from job_er_info where vno='" + vehno + "' and er_current_status='Empty'");
        return dt;
    }

    internal static DataTable getstationid(string frmloc, string toloc)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT STATION_ID FROM SMVTS_TRIPINFO_STATIONS where STATION_NAME in('" + frmloc + "' ,'" + toloc + "') OR STATION_NAME in('" + toloc + "' ,'" + frmloc + "') ");
        return dt;
    }

    internal static DataTable expectdatecalc(int st1, int st2)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT TT_DAYS FROM SMVTS_TRIPINFO_TRANSITTIME where (TT_FROM_ID=" + st1 + " and TT_TO_ID=" + st2 + ") or (TT_FROM_ID=" + st2 + " and TT_TO_ID=" + st1 + ") ");
        return dt;
    }

    internal static DataTable getpartname(string vehno)
    {
        DataTable dt;
        //  dt = ExecuteQuery("select top 1 CUSTOMER_ID from job_er_info a  inner join SMVTS_MASTER_CUSTOMERS b  on a.er_partyname=b.CUSTOMER_NAME where a.er_partyname='Blue Star Ltd'");
        dt = ExecuteQuery("select er_partyname from job_er_info where vno='" + vehno + "' ");
        return dt;
    }

    internal static DataTable CheckRecords(string party, string source, string r)
    {
        DataTable dt;
        dt = ExecuteQuery("Select * from SMVTS_CUSTOMER_GEOFENCES where GEOFENCE_CUSTOMER_ID='" + party + "' and GEOFENCE_SOURCE_ID='" + source + "' and GEOFENCE_LANDMARKID='" + r + "'");
        return dt;
    }

    internal static DataTable getinchargename()
    {
        DataTable dt;
        dt = ExecuteQuery("select distinct(ER_FORMAN_DETAILS) from job_er_info where ER_FORMAN_DETAILS is not  null");
        return dt;
    }

    internal static DataTable getfromlocname(string r)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT STATION_CODE,STATION_NAME FROM SMVTS_TRIPINFO_STATIONS where station_name like '%r%'");
        return dt;
    }

    internal static DataTable getinchargenames(string s)
    {
        DataTable dt;
        dt = ExecuteQuery("select distinct(ER_FORMAN_DETAILS) from job_er_info where ER_FORMAN_DETAILS like '%s%'");
        return dt;
    }

    internal static DataTable getpartylocation(string g)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT CUSTOMER_ID,CUSTOMER_NAME FROM SMVTS_MASTER_CUSTOMERS where CUSTOMER_NAME like '%g%' ");
        return dt;
    }

    internal static DataTable Identifyinglocation(string from, string toc)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT STATION_CODE,STATION_NAME FROM SMVTS_TRIPINFO_STATIONS where station_name in('" + from + "','" + toc + "')");
        return dt;
    }

    internal static DataTable gettolocation(string tolocation)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT STATION_CODE,STATION_NAME FROM SMVTS_TRIPINFO_STATIONS where station_name='" + tolocation + "'");
        return dt;
    }

    internal static DataTable getpartycode(string pname)
    {
        DataTable dt;
        dt = ExecuteQuery("SELECT CUSTOMER_ID FROM SMVTS_MASTER_CUSTOMERS where customer_name='" + pname + "'");
        return dt;
    }

    internal static DataTable getdetail(string vno)
    {
        DataTable dt;
        dt = ExecuteQuery("Select * from job_er_info");
        return dt;
    }

    internal static bool Saveorderdonedata(string vno1, string from_station1, string To_station1, DateTime dt1, DateTime dt2, string status, string frm_bcd, string to_bcd, string partyname)
    {
        bool result;
        result = Dal.ExecuteNonQuery2("Exec USP_SMVTS_ORDERDONE @vno='" + vno1 + "',@er_from='" + from_station1 + "',@er_to='" + To_station1 + "',@er_dispatchdate='" + dt1 + "',@er_expected_date='" + dt2 + "',@er_current_status='" + status + "',@from_bcd='" + frm_bcd + "',@to_bcd='" + to_bcd + "',@er_partyname='" + partyname + "'");
        return result;
    }

    internal static DataTable getmodifieddate(string vno)
    {
        DataTable dt;
        dt = Dal.ExecuteQuery2("Exec USP_SMVTS_GETMODOFIEDDATE @VNO='" + vno + "'");
        //dt = Dal.ExecuteQuery2("select top 1  modified_date from erpl_lry_place where lorry_no='" + vno + "' order by Sno  desc");
        return dt;
    }

    internal static DataTable getexpdata(string vnum)
    {
        DataTable dt;
        dt = Dal.ExecuteQuery("select * from job_er_info where vno='" + vnum + "'");
        return dt;
    }


    internal static DataTable install_Activation2(string imno, string mno, string otp1)
    {
        DataTable r = new DataTable();
        string strConn = (ConfigurationManager.ConnectionStrings["connectionP2"].ToString());
        // r = ExecuteQuery1("EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSTALL_ACTIVATE',@CATAGORY_ID='',@MOBILE_NO='" + mno + "',@OTP='" + otp1 + "',@MOBILEIMEI='" + imno + "'");
        //r = ExecuteNonQuery1("update smvts_mobileapp set MOBILEIMEI='" + imno + "' where  MOBILE_NO='" + mno + "' and OTP='" + otp1 + "' ");
        string Query = "EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSTALL_ACTIVATE',@CATAGORY_ID=null,@MOBILE_NO='" + mno + "',@OTP='" + otp1 + "',@MOBILEIMEI='" + imno + "'";
        r = Dal.ExecuteQueryDB1(Query, strConn);



        return r;
    }

    internal static DataTable Dealer_install_Activation2(string imno, string mno, string otp1, string strConn, string CategId, string Code)
    {
        DataTable r = new DataTable();

        // r = ExecuteQuery1("EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSTALL_ACTIVATE',@CATAGORY_ID='',@MOBILE_NO='" + mno + "',@OTP='" + otp1 + "',@MOBILEIMEI='" + imno + "'");
        //r = ExecuteNonQuery1("update smvts_mobileapp set MOBILEIMEI='" + imno + "' where  MOBILE_NO='" + mno + "' and OTP='" + otp1 + "' ");
        string Query = "EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSTALL_ACTIVATE',@verf_code='" + Code + "', @CATAGORY_ID='" + CategId + "',@MOBILE_NO='" + mno + "',@OTP='" + otp1 + "',@MOBILEIMEI='" + imno + "'";
        r = Dal.ExecuteQueryDB1(Query, strConn);



        return r;
    }


    internal static DataTable getverify2(string mno, string imno)
    {
        DataTable dt = new DataTable();

        string strConn = (ConfigurationManager.ConnectionStrings["connectionP2"].ToString());
        string Query = "select * from smvts_mobileapp(nolock) where MOBILE_NO='" + mno + "' and MOBILEIMEI='" + imno + "'and Activestatus=1 ";
        dt = Dal.ExecuteQueryDB1(Query, strConn);


        return dt;
    }
    internal static DataTable dealer_getverify2(string mno, string imno, string strConn)
    {
        DataTable dt = new DataTable();


        string Query = "select * from smvts_mobileapp(nolock) where MOBILE_NO='" + mno + "' and MOBILEIMEI='" + imno + "'and Activestatus=1 ";
        dt = Dal.ExecuteQueryDB1(Query, strConn);


        return dt;
    }
    internal static DataTable getpaneldetails()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select PANELS_PERMISSION_IDS,PANEL_NAME  from SMVTS_PANEL_PERMISSION");
        return dt;
    }

    internal static bool insert_mob_info_ws(string name, string mob, string sa)
    {
        bool res;
        string strConn = (ConfigurationManager.ConnectionStrings["connectionP2"].ToString());
        res = Dal.ExecuteNonQueryDB2("EXEC INSERT_DETAILS @NAME='" + name + "',@MOBILENO='" + mob + "',@OTP='" + sa + "'", strConn);
        return res;
    }


    internal static bool dealer_insert_mob_info_ws(string name, string mob, string sa, string strConn)
    {
        bool res;
        res = Dal.ExecuteNonQueryDB2("EXEC INSERT_DETAILS @NAME='" + name + "',@MOBILENO='" + mob + "',@OTP='" + sa + "'", strConn);
        return res;
    }


    internal static DataTable getmobdetails(string mob)
    {
        DataTable res;
        res = Dal.ExecuteQuery("EXEC GETMOBDETAILS @MOB='" + mob + "'");
        return res;
    }
    internal static bool insert_mob_info(string name, string mob, string sa)
    {
        bool res;
        res = Dal.ExecuteNonQuery("EXEC INSERT_DETAILS @NAME='" + name + "',@MOBILENO='" + mob + "',@OTP='" + sa + "'");
        return res;
    }
    internal static DataTable getrowdata1(int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from smvts_mobileapp where id=" + id + " ");
        return dt;
    }

    internal static bool updatemobileapp(int id, string otp)
    {
        bool res;
        res = Dal.ExecuteNonQuery("EXEC UPDATE_MOBILEAPP @ID=" + id + ",@OTP='" + otp + "',@MODATE=getdate()");

        return res;
    }

    private static string DateToString(DateTime _Dt)
    {
        string DateFormat = "MM/dd/yyyy";
        return _Dt.ToString(DateFormat + " hh:mm:ss tt");
    }





    internal static DataTable getdatapoints(string Mno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_PICKUP_POINTDATABASE @MOBILENUMBER='" + Mno + "'");
        //  dt = ExecuteQuery("EXEC USP_SMVTS_TRACKINGAPI_MOBILE @MOBILENO='" + vno + "',@OPERATION='GETVEHICLE'");
        return dt;
    }


    internal static DataTable getpermissionids(int userid, int formid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select USERS_PERMISSION  from SMVTS_USERS WHERE USERS_ID=" + userid + " and USERS_CATEGORY_ID=" + formid + "");
        return dt;
    }

    internal static DataTable getbranchstatus(int id, int cid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select USERS_BRANCH_STATUS from SMVTS_USERS WHERE USERS_ID=" + id + " and  USERS_CATEGORY_ID=" + cid + "");
        return dt;
    }
    internal static DataTable getpanelnames(string idis)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select * from SMVTS_PANEL_PERMISSION where PANELS_PERMISSION_IDS in (" + idis + ")");
        return dt;
    }

    internal static bool updateremark(string partyname, string toloc, string remrk, string vehno, string currentdt)
    {
        bool result;
        result = ExecuteNonQuery("Exec USP_SMVTS_REMARKS @partyname='" + partyname + "',@toloc='" + toloc + "',@REMARK_DESC='" + remrk + "',@ER_CURRENT_DATE='" + currentdt + "',@VNO='" + vehno + "'");
        return result;
    }

    internal static DataTable getpartyname(string vnum)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select er_partyname from job_er_info where vno='" + vnum + "'");
        return dt;
    }

    internal static DataTable getphonenumbers(string tolocation, string inchargenam)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_SMS_MOBILENUMBERS @TOLOC='" + tolocation + "',@INCHARGENAME='" + inchargenam + "'");
        return dt;

    }

    internal static DataTable getsmscredentials(int id)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("select * from SMVTS_MOBILE_SMS where SMS_CATEGORY_ID=" + id + "");
        return dt;
    }

    internal static DataTable geteditdetails(int i)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("SELECT CUSTOMER_NAME,STATION_NAME,LANDMARKS_ADDRESS,GEOFENCE_CUSTOMER_ID,GEOFENCE_SOURCE_ID,GEOFENCE_LANDMARKID FROM SMVTS_TRIPINFO_STATIONS inner join SMVTS_CUSTOMER_GEOFENCES on STATION_ID=GEOFENCE_SOURCE_ID  inner join  SMVTS_MASTER_CUSTOMERS   on CUSTOMER_ID=GEOFENCE_CUSTOMER_ID INNER JOIN SMVTS_LANDMARKS ON LANDMARKS_ID=GEOFENCE_LANDMARKID  where GEOFENCE_ID=" + i + "");
        return dt;
    }

    internal static DataTable getdeviceid(string vno)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select VEHICLES_DEVICE_ID from SMVTS_VEHICLES where VEHICLES_REGNUMBER='" + vno + "'");
        return dt;
    }

    internal static DataTable GETSOPPAGEREPORTDATA(string strUserID, string strDeviceID, string strEndDate, string strDuration, bool strShowGeofenceOnly, string Category_id, string VNO)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("EXEC USP_SMVTS_EXPRESS_STOPPAGE @USERID='" + strUserID + "', @DEVICEID =" +
                    (strDeviceID == string.Empty ? "null" : "'" + strDeviceID + "'")
                     + ",@ENDDATE =" + (strEndDate == string.Empty ? "null" : "'" + strEndDate + "'") + ", @DURATION = '" + strDuration + "', @GEOFENCE_ONLY = '" + strShowGeofenceOnly + "', @OPERATION = null,@VNO='" + VNO + "'");

        return dt;
    }

    internal static DataTable GETSPECIFICREPORTDATA(string userid, string deviceid, string enddate, string vehicleno, int duration)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("Exec USP_SMVTS_SPECIFIC_TIMEZONE @USERID='" + userid + "',@DEVICEID='" + deviceid + "',@ENDDATE='" + enddate + "',@VNO='" + vehicleno + "',@DURATION=" + duration + "");
        return dt;
    }


    internal static DataTable GET_STOPPAGE(string userid)
    {
        DataTable dt = new DataTable();
        string Services_Query1 = "EXEC USP_STOPPAGE_NOTIFICATIONS @USER_ID=" + userid + ",@INTERVAL='1440'";
        dt = ExecuteQuery(Services_Query1);
        return dt;
    } 






    internal static DataTable getdailywise(string vno, int uid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_DAILYWISE @vno='" + vno + "',@USERID=" + uid + "");
        return dt;
    }
    internal static DataTable sanskritiinfo(int categ_id)
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("EXEC USP_GETALL @CATEG_ID=" + categ_id + "");
        return dat;
    }
    internal static DataTable getid(int id)
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("EXEC GETDETAILS @ID=" + id + "");
        return dat;
    }
    internal static DataTable GetPickUpInfo()
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("EXEC PICKUP_INFO");
        return dat;
    }
    internal static DataTable getsanskritivehicle(int CATEG_ID)
    //internal static DataTable getsanskritivehicle()
    {
        DataTable dat;
        //dat = Dal.ExecuteQuery1("EXEC ALLVEHICLE");
        dat = Dal.ExecuteQuery1("EXEC ALLVEHICLE @CATEG_ID=" + CATEG_ID);
        return dat;
    }
    internal static bool SaveInfo(string route, string vehicleno, int status)
    {
        bool res;
        res = Dal.ExecuteNonQuery1("EXEC ROOTINFO @ROUTE='" + route + "',@VEHICLENO='" + vehicleno + "',@STATUS=" + status + "");
        return res;

    }
    internal static bool getInsert(SMVTS_PICKUPPOINTS_SMS _obj_sanskriti_sms)
    {
        bool res;
        res = Dal.ExecuteNonQuery1("EXEC USP_SMVTS_BUS_SCEHDUELER @OPERATION='INSERT',@SMS_VEHICLENO='" + _obj_sanskriti_sms.SMS_VEHICLENO
                    + "',@SMS_ROUTENAME='" + _obj_sanskriti_sms.SMS_ROUTENAME
                    + "',@SMS_CUSTNAME='" + _obj_sanskriti_sms.SMS_CUSTNAME
                    + "',@SMS_CUSTMOBILE='" + _obj_sanskriti_sms.SMS_CUSTMOBILE
                    + "',@SMS_PICKUPPOINT='" + _obj_sanskriti_sms.SMS_PICKUPPOINT.Replace("'", "''")
                    + "',@SMS_DEST='" + _obj_sanskriti_sms.SMS_DEST

                    + "',@SMS_PICKUPTIME=" + (Convert.ToDateTime(_obj_sanskriti_sms.SMS_PICKUPTIME) == DateTime.MinValue ? "null" : ("'" + DateToString(Convert.ToDateTime(_obj_sanskriti_sms.SMS_PICKUPTIME)) + "'"))
                    + ",@SMS_DROPTIME=" + (Convert.ToDateTime(_obj_sanskriti_sms.SMS_DROPTIME) == DateTime.MinValue ? "null" : ("'" + DateToString(Convert.ToDateTime(_obj_sanskriti_sms.SMS_DROPTIME)) + "'"))
                    + ",@SMS_ORIGIN='" + _obj_sanskriti_sms.SMS_ORIGIN
                    + "',@SMS_STATUS='" + _obj_sanskriti_sms.SMS_STATUS
                    + "',@SMS_CATEGID='" + _obj_sanskriti_sms.SMS_CATEGID + "'");
        return res;
    }
    internal static bool getUpdate(SMVTS_PICKUPPOINTS_SMS _obj_sanskriti_sms)
    {
        bool res;
        res = Dal.ExecuteNonQuery1("EXEC USP_SMVTS_BUS_SCEHDUELER @OPERATION='UPDATE',@SMS_VEHICLENO='" + _obj_sanskriti_sms.SMS_VEHICLENO
            + "',@SMS_ROUTENAME='" + _obj_sanskriti_sms.SMS_ROUTENAME
            + "',@SMS_CUSTNAME='" + _obj_sanskriti_sms.SMS_CUSTNAME
            + "',@SMS_CUSTMOBILE='" + _obj_sanskriti_sms.SMS_CUSTMOBILE
            + "',@SMS_PICKUPPOINT='" + _obj_sanskriti_sms.SMS_PICKUPPOINT.Replace("'", "''")
            + "',@SMS_DEST='" + _obj_sanskriti_sms.SMS_DEST
            + "',@SMS_PICKUPTIME=" + (Convert.ToDateTime(_obj_sanskriti_sms.SMS_PICKUPTIME) == DateTime.MinValue ? "null" : ("'" + DateToString(Convert.ToDateTime(_obj_sanskriti_sms.SMS_PICKUPTIME)) + "'"))
            + ",@SMS_DROPTIME=" + (Convert.ToDateTime(_obj_sanskriti_sms.SMS_DROPTIME) == DateTime.MinValue ? "null" : ("'" + DateToString(Convert.ToDateTime(_obj_sanskriti_sms.SMS_DROPTIME)) + "'"))
            + ",@SMS_ORIGIN='" + _obj_sanskriti_sms.SMS_ORIGIN
            + "',@SMS_STATUS='" + _obj_sanskriti_sms.SMS_STATUS
            + "', @SMS_CATEGID='" + _obj_sanskriti_sms.SMS_CATEGID
            + "', @SMS_ID='" + _obj_sanskriti_sms.SMS_ID + "'");
        return res;
    }

    internal static DataTable detailsinfo(string routname, string vehicleno)
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("EXEC USP_SMVTS_ROUTEINFO @ROUTNAME='" + routname + "',@VEHICLENO='" + vehicleno + "'");
        return dat;
    }
    internal static DataTable oneinfo(int Index)
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("EXEC USP_SMVTS_STUDINFO @ID=" + Index + "");
        return dat;
    }
    internal static bool updateinfo(int id, string name, string mob, string pickupaddress, string pickuptype, DateTime pickuptime, DateTime droptime, string origin, int pos)
    {
        bool res;
        res = Dal.ExecuteNonQuery1("EXEC USP_SMVTS_GRIDINFO @ID=" + id + ",@NAME='" + name + "',@MOB='" + mob + "',@PICKUPADDRESS='" + pickupaddress + "',@PICKUPTYPE='" + pickuptype + "',@PICKUPTIME='" + pickuptime + "',@DROPTIME='" + droptime + "',@ORIGIN='" + origin + "',@POS=" + pos + "");
        return res;
    }

    internal static DataTable get(int get)
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("exec usp_smvts_getall @id=" + get + "");
        return dat;
    }
    internal static DataTable BindCombo()
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("exec usp_smvts_bindcombo");
        return dat;
    }

    //internal static bool ipdata(string studname, string mobno, string pickaddress, string pickuptype, DateTime pickuptime, DateTime droptime, string clas, int status)
    //{
    //    bool res;
    //    res = Dal.ExecuteNonQuery1();
    //}

    internal static DataTable getPassengersByRouteNVehicle(string routename, string vehicleno)
    {
        DataTable D;
        //Operation 3 for Passengers on Particular Route and VehicleRegNo
        D = Dal.ExecuteQuery1("EXEC USP_SMVTS_BUS_SCEHDUELER @OPERATION = '3',@SMS_ROUTENAME='" + routename + "',@SMS_VEHICLENO='" + vehicleno + "'");
        return D;
    }
    internal static DataTable RouteName(int categ)
    //internal static DataTable RouteName()
    {
        DataTable dat;
        //dat = Dal.ExecuteQuery1("EXEC USP_SMVTS_ROUTE_MODIFICATION @OPERATION='ROUTE'");  
        dat = Dal.ExecuteQuery1("EXEC USP_SMVTS_ROUTE_MODIFICATION @OPERATION='ROUTE',@SMS_CATEGID=" + categ);
        return dat;
    }
    internal static DataTable CurrentVehicleNo(string routename, int categ)
    {
        DataTable dat;
        routename = routename.Replace("\t", string.Empty);
        //dat = Dal.ExecuteQuery1("EXEC USP_SMVTS_ROUTE_MODIFICATION @OPERATION='CURRENT_VEHICLE',@ROUTE_NAME='" + routename + "'");
        dat = Dal.ExecuteQuery1("EXEC USP_SMVTS_ROUTE_MODIFICATION @OPERATION='CURRENT_VEHICLE',@ROUTE_NAME='" + routename + "',@SMS_CATEGID=" + categ);
        return dat;
    }
    internal static DataTable VehicleNo(int categ)
    {
        DataTable dat;
        dat = Dal.ExecuteQuery1("EXEC USP_SMVTS_ROUTE_MODIFICATION @OPERATION='VEHICLE',@SMS_CATEGID=" + categ);
        return dat;
    }
    internal static bool route_Update(string routename, string currentvehicle, string assignvehicle)
    {
        bool res;
        res = Dal.ExecuteNonQuery1("EXEC USP_SMVTS_MODIFU_ROUTE @ROUTE_NAME='" + routename + "',@CURRENT_VEHICLE_NO='" + currentvehicle + "',@ASSIGN_VEHICLENO='" + assignvehicle + "'");
        return res;
    }

    internal static DataTable get_nearestvehicles_prevdate(string User_ID, string location_lat, string location_long, int radius, DateTime prevdate)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_NEAREST_PREVDATE @USERID=" + User_ID + ",@LOCATION_LAT='" + location_lat + "',@LOCATION_LONG ='" + location_long + "',@RADIUS ='" + radius + "',@DATE='" + prevdate + "'");
        return dt;
    }

    internal static DataTable get_nearestvehicles_prevdate_rpt(string User_ID, string location_lat, string location_long, int radius, DateTime prevdate)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC [USP_SMVTS_NEAREST_PREVDATE_RPT] @USERID=" + User_ID + ",@LOCATION_LAT='" + location_lat + "',@LOCATION_LONG ='" + location_long + "',@RADIUS ='" + radius + "',@DATE='" + prevdate + "'");
        return dt;
    }




    internal static bool RemarkSave(string operation, string VehilceNo, string Remark)
    {
        bool st = false;
        // DataTable dt = new DataTable();
        st = ExecuteNonQuery("EXEC USP_SMVTS_REMARK_UPDATE @OPERATION='Remark_Update', @VEHICLE_REG_NUM='" + VehilceNo + "',@REMARK='" + Remark + "'");
        return st;
    }

    //for Bajaj IB 
    internal static DataTable GetExisting_WorkOrders(string DBName)
    {//USP_SMVTS_BAJAJ_IB_PROC
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_BAJAJ_IB_PROC @OPERATION=1", DBName);
        return dt;
    }

    internal bool InsertWorkOrder(string WorkOrderNo, int NoOfContainers, string TransporterCode, string Plant, string CountryName, string DBName)
    {
        bool s = false;
        int status = 1;
        int CreatedBy = 0;
        string Query = "EXEC USP_SMVTS_BAJAJ_IB_PROC @OPERATION = 3" +
                  ",    @WORKORDER_NO ='" + WorkOrderNo
                 + "',   @WORKORDER_NO_OF_TRUCKS='" + NoOfContainers
                 + "',   @WORKORDER_PLANT='" + Plant
                 + "',   @WORKORDER_TRANSPORTER_CODE='" + TransporterCode
                 + "',   @WORKORDER_COUNTRY='" + CountryName
                 + "',   @WORKORDER_STATUS='" + status
                 + "',   @WORKORDER_CREATED_BY='" + CreatedBy + "'";
        s = Dal.ExecuteNonQueryDB1(Query, DBName);
        return s;
    }

    internal static DataTable GetDBNameforWorkOrder(string TransporterCode)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("EXEC USP_SMVTS_BAJAJ_IB_PROC @OPERATION=2,@WORKORDER_TRANSPORTER_CODE='" + TransporterCode + "'");
        return dt;
    }

    internal bool InsertWorkOrderlog(string WorkOrderNo, int NoOfContainers, string TransporterCode, string Plant, string CountryName, string DBName)
    {
        DBName = DBName == string.Empty ? "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCAdMIZabw3xnGhTWCzxCZGIf5D1n4CCQUKgD5CoFiIg14Ew7+Lt094Kzb8IV1HY40efjsVQ77zv/jAT15afI3tIplCvGTG6YErrb1ZxuqpT0=" : DBName;
        bool s = false;
        int status = 1;
        int CreatedBy = 0;
        string Query = "EXEC USP_SMVTS_BAJAJ_IB_PROC @OPERATION = 2" +
                  ",    @WORKORDER_NO ='" + WorkOrderNo
                 + "',   @WORKORDER_NO_OF_TRUCKS='" + NoOfContainers
                 + "',   @WORKORDER_PLANT='" + Plant
                 + "',   @WORKORDER_TRANSPORTER_CODE='" + TransporterCode
                 + "',   @WORKORDER_COUNTRY='" + CountryName
                 + "',   @WORKORDER_STATUS='" + status
                 + "',   @WORKORDER_CREATED_BY='" + CreatedBy + "'";
        s = Dal.ExecuteNonQueryDB1(Query, DBName);
        return s;
    }

    internal static DataTable GetPendingWorkOrders(string categid)
    {

        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=4, @CATEGID='" + categid + "'");
        return dt;
    }
    internal static DataTable GetlastTripId(int WORKORDER_NO)
    {

        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=24,@WORKORDER_NO="+WORKORDER_NO+"");
        return dt;
    }
    internal static bool UPDATE_WORKORDERTRIP(string VNO,string TRIPID)
    {
        bool s = false;

        string DBName = ((SMVTS_USERS)(HttpContext.Current.Session["USERINFO"])).USERS_DBNAME;
      
        DataTable dt = new DataTable();
        s = Dal.ExecuteNonQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='23',@VEHICLES_REGNUMBER='" + VNO + "',@TRIP_ID='" + TRIPID + "'", DBName);
        return s;
    }

    internal static bool set_WorkOrderTrip(SMVTS_WORKORDER_TRIPS _obj_smvts_workorderTrips1)
    {
        bool status = false;
        DataTable dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='5',@TRIP_WORKORDER_ID	='" + _obj_smvts_workorderTrips1.TRIP_WORKORDER_ID
                                                                 + "', @TRIP_VEHICLENO='" + _obj_smvts_workorderTrips1.TRIP_VEHICLENO
                                                                 + "', @TRIP_DEVICEID	='" + _obj_smvts_workorderTrips1.TRIP_DEVICEID
                                                                 + "', @TRIP_LR_NO	='" + _obj_smvts_workorderTrips1.TRIP_LR_NO
                                                                 + "', @TRIP_LR_DATE='" + DateToString(Convert.ToDateTime(_obj_smvts_workorderTrips1.TRIP_LR_DATE))
                                                                 + "', @TRIP_CREATED_BY	='" + _obj_smvts_workorderTrips1.CREATEDBY
                                                                 + "', @TRIP_MODIFIED_BY	='" + _obj_smvts_workorderTrips1.TRIP_MODIFIED_BY
                                                                 + "', @TRIP_CATEGORY_ID	='" + _obj_smvts_workorderTrips1.TRIP_CATEGORY_ID
                                                                 + "', @TRIP_STATUS	='" + _obj_smvts_workorderTrips1.TRIP_STATUS
                                                                 + "'");
        if (dt != null)
        {
            if (dt.Rows.Count > 0)
            {
                if (dt.Rows[0][0].ToString() == "1")
                {
                    status = true;
                }
            }
        }
        return status;
    }
    //trailer and summary report pradeep

    internal static DataTable GetTrailer_summaryreport(string TYPE,int CATEG_ID)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [SP_TRAILER_SUMMARY_STATUSREPORT] @OPERATION='" + TYPE + "',@CATEG_ID=" + CATEG_ID + "");
        return dt;
    }
    internal static DataTable summaryreport_filter(string TYPE, string WORKORDERS,int categid)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [SP_TRAILER_SUMMARY_STATUSREPORT] @OPERATION='" + TYPE + "',@WORKORDERS='" + WORKORDERS + "',@CATEG_ID="+categid+"");
        return dt;
    }
    internal static DataTable GetExisting_WorkOrdersInTrip(int WorkOrderNo)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=6, @TRIP_WORKORDER_ID='" + WorkOrderNo + "'");
        return dt;
    }
    internal static DataTable GetALLExisting_WorkOrdersInTrip(int WorkOrderNo,string categid)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=14, @TRIP_WORKORDER_ID='" + WorkOrderNo + "',@TRIP_CATEGORY_ID='" + categid + "'");
        return dt;
    }
    internal static DataTable GetWorkOrdersCompleted(string categid)
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=7, @TRIP_CATEGORY_ID='" + categid + "'");
        return dt1;
    }
    internal static DataTable GetWorkOrdersALL(string categid)
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=27, @CATEGID='" + categid + "'");
        return dt1;
    }


    internal static DataTable GetALLWORK_ORDERS()
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=36");
        return dt1;
    }



    internal static DataTable GetWorkOrders_NotAssign(string categid)
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=28,@CATEGID='"+categid+"'");
        return dt1;
    }

    internal static DataTable GetWorkOrders_NotAssign_DOISNULL(string categid)
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=34,@CATEGID='" + categid + "'");
        return dt1;
    }
    //DO STSTUS UPDATE

    internal static bool UPDATEDO_STATUS(string WORKORDERNO)
    {
        DataTable dt1 = new DataTable();
        string DBName = ((SMVTS_USERS)(HttpContext.Current.Session["USERINFO"])).USERS_DBNAME;
        bool B = Dal.ExecuteNonQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=33,@WORKORDER_NO='" + WORKORDERNO + "'", DBName);
        return B;
    }
    internal static bool UPDATE_PICKUPTIME(string DATE, int TRIP_ID)
    {
        DataTable dt1 = new DataTable();
        string DBName = ((SMVTS_USERS)(HttpContext.Current.Session["USERINFO"])).USERS_DBNAME;
        bool B = Dal.ExecuteNonQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=35,@PICKUPTIME='" + DATE + "',@TRIP_ID=" + TRIP_ID + "", DBName);
        return B;
    }

    internal static DataTable GetPARTIALWORKORDERS(string categid)
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=31,@CATEGID='" + categid + "'");
        return dt1;
    }
    internal static DataTable GETVEHILCES_WORKORDER(string WORKORDER_ID)
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=32,@WORKORDER_ID='" + WORKORDER_ID + "'");
        return dt1;
    }
    internal static DataTable GetWorkOrderTripsByTripId(string categid, object TripId)
    {
        DataTable dtb = new DataTable();
        dtb = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=8, @TRIP_CATEGORY_ID='" + categid + "', @TRIP_ID='" + TripId + "'");
        return dtb;
    }


    internal static bool UPDATETRIP(string TRIP_DEVICEID, string TRIP_VEHICLENO, int TRIP_ID)
    {
        string DBName = ((SMVTS_USERS)(HttpContext.Current.Session["USERINFO"])).USERS_DBNAME;
        bool status = false;
        DataTable st = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='26',@TRIP_DEVICEID	='" + TRIP_DEVICEID
                                                                 + "', @TRIP_VEHICLENO='" + TRIP_VEHICLENO
                                                                 + "', @TRIP_ID	=" + TRIP_ID + "", DBName);
        if (st != null)
        {
            if (st.Rows.Count > 0)
            {
                if (st.Rows[0][0].ToString() == "1")
                {
                    status = true;
                }
            }
        }
        return status;
    }


    internal static bool CLOSE_TRIP(string WORKORDERNO)
    {
        string DBName = ((SMVTS_USERS)(HttpContext.Current.Session["USERINFO"])).USERS_DBNAME;
        bool status = false;
        DataTable st = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='29',@WORKORDER_NO='" + WORKORDERNO
                                                                 + "'", DBName);
        if (st != null)
        {
            if (st.Rows.Count > 0)
            {
                if (st.Rows[0][0].ToString() == "1")
                {
                    status = true;
                }
            }
        }
        return status;
    }

    //30
    internal static bool TRIP_CLOSE_WORKORDER_TRIPS(string WORKORDERNO)
    {
        string DBName = ((SMVTS_USERS)(HttpContext.Current.Session["USERINFO"])).USERS_DBNAME;
        bool status = false;
        DataTable st = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='30',@WORKORDER_NO='" + WORKORDERNO
                                                                 + "'", DBName);
        if (st != null)
        {
            if (st.Rows.Count > 0)
            {
                if (st.Rows[0][0].ToString() == "1")
                {
                    status = true;
                }
            }
        }
        return status;
    }



    internal static bool UpdateWorkOrderTrip(SMVTS_WORKORDER_TRIPS SWT)
    {
        bool status = false;
        if (ExecuteNonQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='9',@TRIP_ID	='" + SWT.TRIP_ID
                                                                 + "', @TRIP_CATEGORY_ID='" + SWT.TRIP_CATEGORY_ID
                                                                 + "', @TRIP_REPORT_INTIME_PORT	='" + DateToString(Convert.ToDateTime(SWT.TRIP_REPORT_INTIME_PORT))
                                                                 + "', @TRIP_REPORT_OUTTIME_PORT ='" + DateToString(Convert.ToDateTime(SWT.TRIP_REPORT_OUTTIME_PORT))
                                                                 + "', @TRIP_PLANT_INTIME='" + DateToString(Convert.ToDateTime(SWT.TRIP_PLANT_INTIME))
                                                                 + "', @TRIP_PLANT_OUTTIME	='" + DateToString(Convert.ToDateTime(SWT.TRIP_PLANT_OUTTIME))
                                                                 + "', @TRIP_UNLOAD_INTIME	='" + DateToString(Convert.ToDateTime(SWT.TRIP_UNLOAD_INTIME))
                                                                 + "', @TRIP_UNLOAD_OUTTIME	='" + DateToString(Convert.ToDateTime(SWT.TRIP_UNLOAD_OUTTIME))
                                                                 + "', @TRIP_STATUS='" + SWT.TRIP_STATUS
                                                                 + "', @TRIP_CALCULATION_TYPE='" + SWT.TRIP_CALCULATION_TYPE
                                                                 + "'"))
        {
            status = true;
        }
        return status; ;
    }




    internal static bool UpdateWorkOrderTrip_close(SMVTS_WORKORDER_TRIPS SWT)
    {
        bool status = false;
        if (ExecuteNonQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='9',@TRIP_ID	='" + SWT.TRIP_ID
                                                                 + "', @TRIP_CATEGORY_ID='" + SWT.TRIP_CATEGORY_ID
                                                                 + "', @TRIP_REPORT_INTIME_PORT	='', @TRIP_REPORT_OUTTIME_PORT ='', @TRIP_PLANT_INTIME='', @TRIP_PLANT_OUTTIME	='', @TRIP_UNLOAD_INTIME	='" + DateToString(Convert.ToDateTime(SWT.TRIP_UNLOAD_INTIME))
                                                                 + "', @TRIP_UNLOAD_OUTTIME	='" + DateToString(Convert.ToDateTime(SWT.TRIP_UNLOAD_OUTTIME))
                                                                 + "', @TRIP_STATUS='" + SWT.TRIP_STATUS
                                                                 + "', @TRIP_CALCULATION_TYPE='" + SWT.TRIP_CALCULATION_TYPE
                                                                 + "'"))
        {
            status = true;
        }
        return status; ;
    }


    internal static DataTable GetCategIdForWorkOrder(string categName, string DBName)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQueryDB1("EXEC USP_SMVTS_BAJAJ_IB_PROC @OPERATION=10, @CATEG_NAME='" + categName + "'", DBName);
        return dt;
    }


    internal static DataTable GetPendingWorkOrdersService(string categId, string DBName)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=4, @CATEGID='" + categId + "'", DBName);
        return dt;
    }

    internal static DataTable GetExisting_WorkOrdersInTripServices(int WorkOrderNo, string DBName)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=6, @TRIP_WORKORDER_ID='" + WorkOrderNo + "'", DBName);
        return dt;
    }

    internal static DataTable GetUserIdWorkOrders(string categId, string DBName)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=12, @CATEGID='" + categId + "'", DBName);
        return dt;
    }

    internal static DataTable get_ReportDevicesWorkOrder(string Operation, string UserId, string DBName)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQueryDB1("EXEC RPT_USP_DEVICES @OPERATION='" + Operation + "', @USERS_ID='" + UserId + "'", DBName);
        return dt;
    }

    internal static bool set_WorkOrderTripService(SMVTS_WORKORDER_TRIPS _obj_smvts_workorderTrips, string DBName)
    {
        bool status = false;
        DataTable st = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION='5',@TRIP_WORKORDER_ID	='" + _obj_smvts_workorderTrips.TRIP_WORKORDER_ID
                                                                 + "', @TRIP_VEHICLENO='" + _obj_smvts_workorderTrips.TRIP_VEHICLENO
                                                                 + "', @TRIP_DEVICEID	='" + _obj_smvts_workorderTrips.TRIP_DEVICEID
                                                                 + "', @TRIP_LR_NO	='" + _obj_smvts_workorderTrips.TRIP_LR_NO
                                                                 + "', @TRIP_LR_DATE='" + DateToString(Convert.ToDateTime(_obj_smvts_workorderTrips.TRIP_LR_DATE))
                                                                 + "', @TRIP_CREATED_BY	='" + _obj_smvts_workorderTrips.CREATEDBY
                                                                 + "', @TRIP_MODIFIED_BY	='" + _obj_smvts_workorderTrips.TRIP_MODIFIED_BY
                                                                 + "', @TRIP_CATEGORY_ID	='" + _obj_smvts_workorderTrips.TRIP_CATEGORY_ID
                                                                 + "', @TRIP_STATUS	='" + _obj_smvts_workorderTrips.TRIP_STATUS
                                                                 + "'", DBName);
        if (st != null)
        {
            if (st.Rows.Count > 0)
            {
                if (st.Rows[0][0].ToString() == "1")
                {
                    status = true;
                }
            }
        }
        return status;
    }

    internal static DataTable GetWorkOrdersCompletedServices(string categId, string DBName)
    {
        DataTable dt1 = new DataTable();
        dt1 = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=7, @TRIP_CATEGORY_ID='" + categId + "'", DBName);
        return dt1;
    }

    internal static DataTable GetDeviceId(string TRIP_VEHICLENO, string DBName)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQueryDB1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=13, @VEHICLES_REGNUMBER='" + TRIP_VEHICLENO + "'", DBName);
        return dt;
    }

    internal static DataTable GetDBNameforWorkOrderService(string categName)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery1("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=3, @CATEG_NAME='" + categName + "'");
        return dt;
    }



    internal static DataTable getpetrolvehiclesdetails(int userid, int categid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_PETROLPUMP_VEHICLES @USERID=" + userid + ",@CATEGID='" + categid + "'");
        return dt;
    }
    internal static DataTable Get_Users_Transporter(string categoryid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_GET_USERS_TRANSPORTER_USERID @CATEGID='" + categoryid + "'");
        return dt;
    }

    internal static DataTable getbookingdetails(string vehno, string fromdate, string todate, int uid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Exec USP_SMVTS_EXPRESS_BOOKINGSUMMARY @vno='" + vehno + "',@startdate='" + fromdate + "',@enddate='" + todate + "',@userid=" + uid + "");
        return dt;
    }

    internal static DataTable getautorepairingdetails(string vehno, string fromdate, string todate, int uid)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Exec USP_SMVTS_EXPRESS_REPAIRING @vno='" + vehno + "',@STARTDATE='" + fromdate + "',@ENDDATE='" + todate + "',@userid=" + uid + "");
        return dt;
    }

    internal static DataTable getvehiclesmodels(SMVTS_USERS objusers)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("Exec USP_SMVTS_VEHICLES_MODLES @CATEGID=" + objusers.USERS_CATEGORY_ID + "");
        return dt;
    }

    internal static DataTable getinchargenames(SMVTS_USERS objusers)
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select users_id,USERS_USERNAME from smvts_users where USERS_CATEGORY_ID=" + objusers.USERS_CATEGORY_ID + " AND USERS_BRANCH_STATUS=0");
        return dt;
    }

    internal static DataTable GETVEHICLES(string operation, SMVTS_USERS objusers, string vehtype)
    {
        DataTable dt = new DataTable();

        dt = ExecuteQuery("Exec USP_SMVTS_EXPVEHICLES @Operation='" + operation + "', @CATEGID=" + objusers.USERS_CATEGORY_ID + ",@vehtype='" + vehtype + "'");

        return dt;


    }

    internal static bool INSERT_ShorCodeInterface(string mobile, string smstext, string time, string virtualnumber, string @operator, string circle)
    {
        bool result = false;
        result = ExecuteNonQuery1("EXEC USP_SHORT_CODE_INTERFACE @OPERATION=1,@MOBILE='" + mobile
            + "',@SMS_TEXT='" + smstext
            + "',@TIME='" + time
            + "',@VIRTUAL_NUMBER='" + virtualnumber
            + "',@OPERATOR='" + @operator
            + "',@CIRCLE='" + circle
            + "'");
        return result;
    }


    internal static bool InsertUpDateDevice(string p, DateTime Date, int New_Device, string New_VehilceRegNo, string New_DriverName, string Status, int CreatedByUserId, int? Old_Device, string Old_VehilceRegNo, string Old_DriverName)
    {
        bool result;
        int operation = 1;
        result = ExecuteNonQuery1("EXEC [USP_SMVTS_DEVICE_UPDATE] @OPERATION='" + operation
                                                               + "',@DEVICE_UPDATE_DATE='" + Date
                                                               + "',@DEVICE_UPDATE_OLD_DEVICEID='" + Old_Device
                                                               + "',@DEVICE_UPDATE_NEW_DEVICEID='" + New_Device
                                                               + "',@DEVICE_UPDATE_OLD_VEHICLENO='" + Old_VehilceRegNo
                                                               + "',@DEVICE_UPDATE_NEW_VEHICLENO='" + New_VehilceRegNo
                                                               + "',@DEVICE_UPDATE_OLD_DRV_NAME='" + Old_DriverName
                                                               + "',@DEVICE_UPDATE_NEW_DRV_NAME='" + New_DriverName
                                                               + "',@DEVICE_UPDATE_STATUS='" + Status
                                                               + "',@DEVICE_UPDATE_CREATED_BY='" + CreatedByUserId
                                                               + "'");
        return result;
    }


    internal static DataTable getuserid(string inchargename)
    {
        DataTable dt;
        dt = ExecuteQuery("Select USERS_ID from smvts_users where USERS_USERNAME='" + inchargename + "'");
        return dt;
    }
    internal static DataTable getRemarkdata(string oper, string VehilceNo, string Remark)
    {
        // bool st = false;
        DataTable dt = new DataTable();
        dt = ExecuteQuery("EXEC USP_SMVTS_REMARK_UPDATE @OPERATION='" + oper + "', @VEHICLE_REG_NUM='" + VehilceNo + "',@REMARK='" + Remark + "'");
        return dt;

    }
    internal static DataTable get_service_contract()
    {
        DataTable dt;
        dt = ExecuteQuery1("Select * from SMVTS_SERVICECONTRACTS where SERVCONT_CONTRACTS_ID in(select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_CATEGORY_ID=29)");
        return dt;
    }
    internal static DataTable getcategoryid(string categoryname)
    {
        DataTable dt;
        dt = ExecuteQuery1("Select CATEG_ID from SMVTS_CATEGORIES where CATEG_NAME='" + categoryname + "'");
        return dt;
    }

    internal static DataTable getcategoryid_db(string categoryname,string dbname)
    {
        DataTable dt;
        dt = ExecuteQueryDB1("Select CATEG_ID from SMVTS_CATEGORIES where CATEG_NAME='" + categoryname + "' and CATEG_CATETYPE_ID=3", dbname);
        return dt;
    }

    internal static DataTable get_categoryid_categname(string categdbname, string cname)
    {
        DataTable dt;
        string q1 = "Select CATEG_ID from SMVTS_CATEGORIES where CATEG_NAME='" + cname + "' and CATEG_PARENT_ID!=1 ";
        dt = ExecuteQueryDB1(q1, categdbname);
        return dt;
    }
    internal static DataTable get_SIMID(string categdbname, string simno)
    {
        DataTable dt;
        string q2 = "Select SIM_ID from SMVTS_SIMS where SIM_NUMBER='" + simno + "' ";
        dt = ExecuteQueryDB1(q2, categdbname);
        return dt;
    }
    internal static DataTable get_SIMID1(string categdbname, string simno, int catgid)
    {
        DataTable dt;
        string q2 = "Select SIM_ID from SMVTS_SIMS where SIM_NUMBER='" + simno + "' and SIM_CATEGORY_ID='" + catgid + "' ";
        dt = ExecuteQueryDB1(q2, categdbname);
        return dt;
    }
    internal static DataTable get_SIMNO(string categdbname, int simid)
    {
        DataTable dt;
        string qry = "Select SIM_NUMBER from SMVTS_SIMS where SIM_ID='" + simid + "' ";
        dt = ExecuteQueryDB1(qry, categdbname);
        return dt;
    }
    internal static DataTable get_DEVID(string categdbname, string devicename)
    {
        DataTable dt;
        string q3 = "Select DEVICE_ID from SMVTS_DEVICES where DEVICE_NAME='" + devicename + "' ";
        dt = ExecuteQueryDB1(q3, categdbname);
        return dt;
    }
    internal static DataTable get_DevID1(string categdbname, string vehname)
    {
        DataTable dt;
        string q6 = "Select VEHICLES_DEVICE_ID from SMVTS_VEHICLES where VEHICLES_REGNUMBER='" + vehname + "' ";
        dt = ExecuteQueryDB1(q6, categdbname);
        return dt;
    }
    internal static DataTable get_Vehicles(string categdbname, int categid)
    {
        DataTable dt;
        string q5 = "Select * from SMVTS_VEHICLES where VEHICLES_CATEGORY_ID='" + categid + "' ";
        dt = ExecuteQueryDB1(q5, categdbname);
        return dt;
    }
    internal static DataTable get_DRIVRID(string categdbname, string drivername)
    {
        DataTable dt;
        string q4 = "Select DRIVER_ID from SMVTS_DRIVERS where DRIVER_NAME='" + drivername + "' ";
        dt = ExecuteQueryDB1(q4, categdbname);
        return dt;
    }
    internal static DataTable get_DRIVRID1(string categdbname, string vehname)
    {
        DataTable dt;
        string q7 = "Select VEHICLES_DRIVER_ID from SMVTS_VEHICLES where VEHICLES_REGNUMBER='" + vehname + "' ";
        dt = ExecuteQueryDB1(q7, categdbname);
        return dt;
    }
    internal static DataTable get_Vehicle_Devices1(string categdbname, int vdevid)
    {
        DataTable dt = new DataTable();
        string q8 = "Select  * from SMVTS_DEVICES where DEVICE_ID='" + vdevid + "'";
        dt = ExecuteQueryDB1(q8, categdbname);
        return dt;
    }
    internal static DataTable get_Vehicle_Drivers1(string categdbname1, int vdrivrid)
    {
        DataTable dt = new DataTable();
        string q9 = "Select DRIVER_NAME,DRIVER_MOBILENO from SMVTS_DRIVERS where DRIVER_ID='" + vdrivrid + "'";
        dt = ExecuteQueryDB1(q9, categdbname1);
        return dt;
    }
    internal static DataTable get_DEVIC_SIMID(string categdbname, int deviceid)
    {
        DataTable dt = new DataTable();
        string q10 = "Select  DEVICE_SIM_ID from SMVTS_DEVICES where DEVICE_ID='" + deviceid + "'";
        dt = ExecuteQueryDB1(q10, categdbname);
        return dt;
    }
    internal static DataTable getcontractid(string contractname)
    {
        DataTable dt;
        dt = ExecuteQuery1("Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_NAME='" + contractname + "'");
        return dt;
    }


    internal static DataTable getroles()
    {
        DataTable dt;
        dt = ExecuteQuery1("Select * from SMVTS_ROLES  where ROLES_CATEGORY_ID=29");
        return dt;
    }
    public static DataTable get_Sims_Pipl(PIPL_SIMS _obj_Pipl_Sims)
    {
        DataTable dt = new DataTable();
        switch (_obj_Pipl_Sims.OPERATION)
        {
            case operation.Select:

                if (Convert.ToString(_obj_Pipl_Sims.SIMID) == "0")
                    dt = ExecuteQuery1("EXEC USP_PIPL_SIMS @Operation = 'select'");



                break;
            default: break;

        }
        return dt;

    }
    internal static DataTable get_Sims_Pipl1()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("Select * from PIPL_SIMS where SIM_STATUS=1 and SIM_ASSIGNED_STATUS=1");
        return dt;
    }
    internal static bool update_pipl_sims(PIPL_SIMS _obj_Pipl_Sims, string simno)
    {
        bool result = false;
        switch (_obj_Pipl_Sims.OPERATION)
        {
            case operation.Update:
                result = ExecuteNonQuery1("Update PIPL_SIMS set SIM_ASSIGNED_STATUS=" + _obj_Pipl_Sims.SIM_ASSIGNED_STATUS + " where SIM_MNO='" + simno + "' ");
                break;

            default: break;
        }
        return result;
    }
    internal static bool update_pipl_sims1(string operation, string prev_simno)
    {
        bool result = false;

        result = ExecuteNonQuery1("EXEC USP_SIMS_STATUS_UPDATE @OPERATION='" + operation + "', @PREV_SIM_NO='" + prev_simno + "'");



        return result;
    }

    public static DataTable get_Sims_Check(string operation, string simno)
    {
        DataTable dt = new DataTable();


        dt = ExecuteQuery1("EXEC USP_SIMS_CHECK @OPERATION='" + operation + "', @SIM_NO='" + simno + "'");


        return dt;

    }
    


    //pradeep consignment api 149 server pushpak

    internal static DataTable GetVEHICLE_PUSHPAK(string FRM, string VNO, string DESPDATE)
    {
        

     
        DataTable dtb = new DataTable();
        dtb = Dal.ExecuteQuery_PUSHPAK("EXEC [SP_ERPL_CONSIGNMENT] @OPERATION='GET_VEHICLE', @FRM='" + FRM + "', @VNO='" + VNO + "',@DESPDATE='" + DESPDATE + "'");
        return dtb;
    }




    internal static DataTable API_LIVEDATA(string TOKEN, string VehicleNo)
    {
        //string API_Livedata = "EXEC SMVTS_GENERIC_API @TOKEN='" + TOKEN + "'";
        //dt = ExecuteQueryLiveData(API_Livedata);
        DataTable dtb = new DataTable();
        dtb = Dal.ExecuteQuery1("EXEC SMVTS_GENERIC_API_FETCHLIVEDATA @TOKEN='" + TOKEN + "',@VNO='"+VehicleNo+"'");
        return dtb;
    }

    internal static DataTable GETVEHICLE_DETAILS_PUSHPAK( string VNO)
    {
        DataTable dtb = new DataTable();
        dtb = Dal.ExecuteQuery_PUSHPAK("EXEC [SP_ERPL_CONSIGNMENT] @OPERATION='GET_VEHICLE_DETAILS',@VNO='" + VNO + "'");
        return dtb;
    }




    internal static bool setresendOTP(string mobno, string rno)
    {
        bool r = false;
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='CHECK',@MOBILE_NO='" + mobno + "',@OTP='" + rno + "' ");
        if (Convert.ToInt32(dt.Rows[0][0]) == 1)
        {
            r = true;
        }
        else
        {
            r = false;
        }
        // bool r = ExecuteNonQuery("Insert into SMVTS_MOBILEAPP(CATAGORY_ID,MOBILE_NO,CREATED_DATE,OTP)values('" + clname + "','" + mobno + "',GETDATE(),'" + rno + "')");
        return r;

    }

    internal static DataTable getotpverification(string mno, string otp, string dname)
    {
        bool r = false;
        DataTable dt = new DataTable();
        string q = "EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='OTP_VERIFICATION',@MOBILE_NO='" + mno + "',@OTP='" + otp + "' ";
        dt = ExecuteQueryDB1(q, dname);
        return dt;
    }

    internal static bool insertotp(string mno, string otp, string dbname)
    {
        bool r = false;
        string q1 = "EXEC USP_SMVTS_MOBILEINSTALL @OPERATION='INSERT',@MOBILE_NO='" + mno + "',@OTP='" + otp + "'";
        r = ExecuteNonQuery3(q1, dbname);
        return r;
    }


    internal static DataTable get_tripdata(string operation, string vehno, string fromdate, string todate)
    {
        DataTable dt_RptData = new DataTable();
         dt_RptData = ExecuteQuery("Exec USP_SMVTS_EXPRESS_HSSEREPORT @OPERATION='" + operation + "',@VEHNO='" + vehno + "',@STARTDATE='" + fromdate + "',@ENDDATE='" + todate + "'");
        //dt_RptData = ExecuteQuery("Exec HSSE_EXPRESS_ALL_RPT @VNO='" + vehno + "',@START_DATE='" + fromdate + "',@END_DATE='" + todate + "'");
        return dt_RptData;

    }

    public static bool Set_Contractsnew(SMVTS_CONTRACTS _obj_Smvts_Contract, string dbname, string orgname)
    {
        bool status = false;
        switch (_obj_Smvts_Contract.OPERATION)
        {
            case operation.Insert:
                string query = "";
                string IQuery = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Insert' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                                  + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                                  + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                                  + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                                  + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                                  + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                                  + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                                  + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                                  + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE) + "'";

                query = IQuery + ", @CONTRACTS_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_CATEGORY_ID) + "'";

                if (ExecuteNonQuery1(query))
                {
                    if (dbname != "")
                    {
                        string CategQuery = "";
                        if (orgname.Trim().Contains("(C)"))
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                        }
                        else
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        string IQuery1 = "";
                        string query1 = "";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                        {
                            IQuery1 = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Insert' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                               + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                               + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                               + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                               + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                               + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                               + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                               + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                               + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE) + "'";



                            query1 = IQuery1 + ", @CONTRACTS_CATEGORY_ID ='" + dt_categ.Rows[0][0].ToString() + "'";
                        }
                        if (Dal.ExecuteNonQueryDB1(query1, dbname))
                        {
                            status = true;
                        }
                    }

                }
                else
                    status = false;
                break;
            case operation.Update:
                if (_obj_Smvts_Contract.QUERY == null)
                {
                    string UCQuery = "";

                    string IQuery1 = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Update' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                                 + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                                 + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                                 + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                                 + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                                 + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                                 + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                                 + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                                 + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE) + "'";

                    UCQuery = IQuery1 + ", @CONTRACTS_CATEGORY_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_CATEGORY_ID) + "',@CONTRACTS_ID='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ID) + "'";


                    if (dbname == "")
                    {

                        if (ExecuteNonQuery1(UCQuery))
                            status = true;
                    }
                    //else
                    //{
                    //    if (Dal.ExecuteNonQueryDB1(UQuery, dbname))
                    //    {
                    //        status = true;
                    //    }
                    //}

                    else
                    {
                        string abc = "";
                        if (orgname.Trim().Contains("(C)"))
                        {
                            abc = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'";
                        }
                        else
                        {
                            abc = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "'";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQuery1(abc);

                        string role = "";
                        if (orgname.Trim().Contains("(C)"))
                        {
                            role = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "'";

                        }
                        else
                        {
                            role = " select CATEG_ID,CATEG_DBNAME,CONTRACTS_CATEGORY_ID,CONTRACTS_ID from SMVTS_CONTRACTS(nolock) inner join SMVTS_CATEGORIES(nolock) on CATEG_ID=CONTRACTS_CATEGORY_ID where CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "'";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        DataTable dt_role = new DataTable();
                        dt_role = Dal.ExecuteQueryDB1(role, dt_categ.Rows[0]["CATEG_DBNAME"].ToString());
                        DataTable dt1 = new DataTable();
                        string q1 = "Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_NAME='" + _obj_Smvts_Contract.CONTRACTS_NAME + "'";

                        dt1 = ExecuteQueryDB1(q1, dt_categ.Rows[0]["CATEG_DBNAME"].ToString());



                        //  string result = servicequerry.Replace("@SERVCONT_CONTRACTS_ID=''" + Convert.ToInt32(_obj_Smvts_Contract.CONTRACTS_ID) + "''", "@SERVCONT_CONTRACTS_ID=103");


                        string IQuery2 = "EXEC USP_SMVTS_CONTRACTS @Operation = 'Update' ,@CONTRACTS_NAME='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                                + "', @CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                                + "', @CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                                + "', @CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                                + "', @CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                                + "', @CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                                + "', @CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                                + "', @CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                                + "', @CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE) + "'";



                        string oldquery = IQuery2 + ",@CONTRACTS_CATEGORY_ID='" + Convert.ToString(dt_role.Rows[0]["CONTRACTS_CATEGORY_ID"]) + "',@CONTRACTS_ID='" + Convert.ToString(dt_role.Rows[0]["CONTRACTS_ID"]) + "'";




                        if ((Dal.ExecuteNonQuery1(UCQuery)))
                        {
                            if ((Dal.ExecuteNonQueryDB1(oldquery, dt_categ.Rows[0]["CATEG_DBNAME"].ToString())))
                            {
                                status = true;
                            }
                        }

                    }
                }
                status = true;
                break;

            default:
                break;
        }
        return status;
    }

    public static bool set_ServCont(SMVTS_SERVICECONTRACTS _obj_Smvts_ServCont, string dbname, string orgname)
    {
        bool status = false;
        string strQuery = string.Empty;
        string strquery1 = string.Empty;
        DataTable dt = new DataTable();
        DataTable dt1 = new DataTable();

        switch (_obj_Smvts_ServCont.OPERATION)
        {
            case operation.Insert:

                dt = ExecuteQuery1("Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_NAME='" + _obj_Smvts_ServCont.SERVCONT_CONTNAME + "'");


                strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Insert' , @SERVCONT_CONTRACTS_ID ='" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"])
                               + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                               + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                               + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                               + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                               + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
                               + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
                               + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                               + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";
                if (ExecuteNonQuery1(strQuery))
                {
                    if (dbname != "")
                    {
                        string CategQuery = "";
                        if (orgname.Trim().Contains("(C)"))
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                        }
                        else
                        {
                            CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                        }
                        //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                        string IQuery1 = "";
                        string query1 = "";
                        DataTable dt_categ = new DataTable();
                        dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                        {
                            string q1 = "Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_NAME='" + _obj_Smvts_ServCont.SERVCONT_CONTNAME + "'";
                            dt = Dal.ExecuteQueryDB1(q1, dbname);
                            strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Insert' , @SERVCONT_CONTRACTS_ID = '" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"])
                                + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                                + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                                + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                                + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                                + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
                                + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
                                + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                                + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";


                        }
                        if (Dal.ExecuteNonQueryDB1(strQuery, dbname))
                        {
                            status = true;
                        }
                    }
                    status = true;
                }
                else
                    status = false;
                break;


            case operation.Update:

                strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Update',@SERVCONT_ID='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_ID)
                    + "', @SERVCONT_CONTRACTS_ID='" + _obj_Smvts_ServCont.SERVCONT_CONTRACTS_ID
                    + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                    + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                    + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                    + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                    + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                    + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";
                if (ExecuteNonQuery1(strQuery))
                {
                    //if (dbname != "")
                    //{
                    //    string CategQuery = "";
                    //    if (orgname.Trim().Contains("(C)"))
                    //    {
                    //        CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                    //    }
                    //    else
                    //    {
                    //        CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                    //    }
                    //    //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                    //    string IQuery1 = "";
                    //    string query1 = "";
                    //    DataTable dt_categ = new DataTable();
                    //    dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                    //    {
                    //        string q1 = "Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_CATEGORY_ID='" + Convert.ToInt32(dt_categ.Rows[0]["CATEG_ID"]) + "'";
                    //        string q2 = "select SERVCONT_ID from smvts_servicecontracts  WHERE SERVCONT_CONTRACTS_ID='" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"]) + "'";
                    //           dt = Dal.ExecuteQueryDB1(q1, dbname);
                    //           dt1 = Dal.ExecuteQueryDB1(q2, dbname);

                    //           strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Update' ,@SERVCONT_ID='" + Convert.ToInt32(dt1.Rows[0]["SERVCONT_ID"])
                    //           + "' @SERVCONT_CONTRACTS_ID = '"  +Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"])
                    //           + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                    //           + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                    //           + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                    //           + ",  @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                    //           + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
                    //           + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
                    //           + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                    //           + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";


                    //    }
                    //    if (Dal.ExecuteNonQueryDB1(strQuery, dbname))
                    //    {
                    //        status = true;
                    //    }
                    //}
                    status = true;
                }
                else
                    status = false;
                break;


            default:
                break;
        }
        return status;
    }

    public static bool set_ServCont1(SMVTS_SERVICECONTRACTS _obj_Smvts_ServCont, string dbname, string orgname, int cnt)
    {
        bool status = false;
        string strQuery = string.Empty;
        string strquery1 = string.Empty;
        DataTable dt = new DataTable();
        DataTable dt1 = new DataTable();

        switch (_obj_Smvts_ServCont.OPERATION)
        {
            case operation.Insert:

            //  dt = ExecuteQuery1("Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_NAME='" + _obj_Smvts_ServCont.SERVCONT_CONTNAME + "'");


            //strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Insert' , @SERVCONT_CONTRACTS_ID ='" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"])
            //               + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
            //               + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
            //               + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
            //               + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
            //               + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
            //               + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
            //               + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
            //               + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";
            //  if (ExecuteNonQuery1(strQuery))
            // {
            //      if (dbname != "")
            //      {
            //          string CategQuery = "";
            //          if (orgname.Trim().Contains("(C)"))
            //          {
            //              CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
            //          }
            //          else
            //          {
            //              CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
            //          }
            //          //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
            //          string IQuery1 = "";
            //          string query1 = "";
            //          DataTable dt_categ = new DataTable();
            //          dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
            //          {
            //              string q1 = "Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_NAME='" + _obj_Smvts_ServCont.SERVCONT_CONTNAME + "'";
            //              dt = Dal.ExecuteQueryDB1(q1, dbname);
            //              string q2 = "select SERVCONT_ID from smvts_servicecontracts  WHERE SERVCONT_CONTRACTS_ID='" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"]) + "'";

            //               dt1 = Dal.ExecuteQueryDB1(q2, dbname);
            //              strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Insert' , @SERVCONT_CONTRACTS_ID = '" + Convert.ToInt32(dt1.Rows[cnt]["CONTRACTS_ID"])
            //                  + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
            //                  + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
            //                  + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
            //                  + ",  @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
            //                  + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
            //                  + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
            //                  + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
            //                  + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";


            //          }
            //          if (Dal.ExecuteNonQueryDB1(strQuery, dbname))
            //          {
            //              status = true;
            //          }
            //      }

            ////  }
            //  else
            //      status = false;
            //  break;


            case operation.Update:

                //strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Update',@SERVCONT_ID='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_ID)
                //    + "', @SERVCONT_CONTRACTS_ID='" + _obj_Smvts_ServCont.SERVCONT_CONTRACTS_ID
                //    + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                //    + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                //    + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                //    + ", @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                //    + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                //    + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";
                //if (ExecuteNonQuery1(strQuery))
                //{
                if (dbname != "")
                {
                    string CategQuery = "";
                    if (orgname.Trim().Contains("(C)"))
                    {
                        CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(C)", "").Trim() + "' AND CATEG_CATETYPE_ID=3 ";
                    }
                    else
                    {
                        CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + orgname.Replace("(P)", "").Trim() + "' AND CATEG_CATETYPE_ID=2 ";
                    }
                    //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                    string IQuery1 = "";
                    string query1 = "";
                    string strQuery1 = "";
                    DataTable dt_categ = new DataTable();
                    dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
                    {
                        string q1 = "Select CONTRACTS_ID from SMVTS_CONTRACTS where CONTRACTS_CATEGORY_ID='" + Convert.ToInt32(dt_categ.Rows[0]["CATEG_ID"]) + "'";
                        dt = Dal.ExecuteQueryDB1(q1, dbname);
                        string q2 = "select SERVCONT_ID from smvts_servicecontracts  WHERE SERVCONT_CONTRACTS_ID='" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"]) + "'";

                        dt1 = Dal.ExecuteQueryDB1(q2, dbname);

                        strQuery = "UPDATE SMVTS_SERVICECONTRACTS SET SERVCONT_SERVICES_ID ='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID) + "',SERVCONT_CONTRACTS_ID = '" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"]) + "',SERVCONT_STARTDATE = '" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE) + "',SERVCONT_ENDDATE = " + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'") + ",SERVCONT_STATUS = '" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS) + "',SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY) + "',SERVCONT_MODIFIEDDATE = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'	Where SERVCONT_ID = '" + Convert.ToInt32(dt1.Rows[cnt]["SERVCONT_ID"]) + "'";
                        //SMVTS_CONTRACTS _obj_Smvts_Contract = new SMVTS_CONTRACTS();
                        //strQuery1 = "UPDATE SMVTS_CONTRACTS SET CONTRACTS_NAME ='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_NAME)
                        //    + "',CONTRACTS_DESC='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_DESC)
                        //    + "', CONTRACTS_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_Contract.CONTRACTS_STARTDATE)
                        //    + "', CONTRACTS_ENDDATE='" + Convert.ToString(_obj_Smvts_Contract.CONTRACTS_ENDDATE)
                        //    + "', CONTRACTS_STATUS='" + Convert.ToBoolean(_obj_Smvts_Contract.CONTRACTS_STATUS)
                        //    + "', CONTRACTS_CREATEDBY= '" + Convert.ToString(_obj_Smvts_Contract.CREATEDBY)
                        //    + "', CONTRACTS_CREATEDDATE='" + Convert.ToString(_obj_Smvts_Contract.CREATEDDATE)
                        //    + "', CONTRACTS_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_Contract.LASTMDFBY)
                        //    + "', CONTRACTS_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_Contract.LASTMDFDATE) + "'where CONTRACTS_ID='" +Convert.ToInt32(_obj_Smvts_Contract.CONTRACTS_ID)+"'";
                        // strQuery = "EXEC USP_SMVTS_UPDATE_SERVICE_CONTRACTS  @SERVCONT_SERVICES_ID ='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID) + "',@SERVCONT_CONTRACTS_ID = '" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"]) + "',@SERVCONT_STARTDATE = '" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE) + "',@SERVCONT_ENDDATE = " + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'") + ",@SERVCONT_STATUS = '" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS) + "',@SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY) + "',@SERVCONT_MODIFIEDDATE = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "', @SERVCONT_ID = '" + Convert.ToInt32(dt1.Rows[cnt]["SERVCONT_ID"]) + "'";  //CHANGED BY VENKATESH
                        // Dal.ExecuteNonQueryDB1(strQuery1, "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCLQOZCWJCgdbGhTWCzxCZGEE58Ib+mwFPXfd60oum+YaATXejNpf60UccZw/xfz9gbvinLUYnP6shgdIMQicpZqyJMAysRhs0NPugSf85OK8=");

                        //strQuery = "\n EXEC USP_SMVTS_SERVICECONTRACTS @Operation = 'Update' ,@SERVCONT_ID='" + Convert.ToInt32(dt1.Rows[cnt]["SERVCONT_ID"])
                        //   + "', @SERVCONT_CONTRACTS_ID = '" + Convert.ToInt32(dt.Rows[0]["CONTRACTS_ID"])
                        //   + "', @SERVCONT_SERVICES_ID='" + Convert.ToInt32(_obj_Smvts_ServCont.SERVCONT_SERVICES_ID)
                        //   + "', @SERVCONT_STARTDATE='" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_STARTDATE)
                        //   + "', @SERVCONT_ENDDATE=" + (_obj_Smvts_ServCont.SERVCONT_ENDDATE == null ? "null" : "'" + Convert.ToDateTime(_obj_Smvts_ServCont.SERVCONT_ENDDATE).ToString("MM/dd/yyyy") + "'")
                        //   + ",  @SERVCONT_STATUS='" + Convert.ToString(_obj_Smvts_ServCont.SERVCONT_STATUS)
                        //   + "', @SERVCONT_CREATEDBY= '" + Convert.ToString(_obj_Smvts_ServCont.CREATEDBY)
                        //   + "', @SERVCONT_CREATEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.CREATEDDATE)
                        //   + "', @SERVCONT_MODIFIEDBY = '" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFBY)
                        //   + "', @SERVCONT_MODIFIEDDATE='" + Convert.ToString(_obj_Smvts_ServCont.LASTMDFDATE) + "'";


                    }
                    if (strQuery != string.Empty)
                    {
                        if (Dal.ExecuteNonQueryDB1(strQuery, dbname))
                        {
                            status = true;
                        }
                    }
                }

           // }
                else
                    status = false;
                break;


            default:
                break;
        }
        return status;
    }

    public static bool insertdetails(int consignment_id1, string status1, string message1, string timestamp1, string dbname, string LR_number)
    {
        bool r = false;
        string query = "Exec USP_SAVE_BAJAJ_DETAILS @Consignment_Id=" + consignment_id1 + ",@Status='" + status1 + "',@Message='" + message1 + "',@Timestamp='" + timestamp1 + "',@LR_number='" + LR_number + "'";
        r = Dal.ExecuteNonQueryDB1(query, dbname);
        return r;
    }


    internal bool UpdateTransporterInWorkOrder(string WorkOrderNo, int NoOfContainers, string TransporterCode, string Plant, string CountryName, string DBName)
    {
        bool s = false;
        int status = 1;
        int CreatedBy = 0;
        string Query = "EXEC USP_SMVTS_BAJAJ_IB_PROC @OPERATION = 15" +
                  ",    @WORKORDER_NO ='" + WorkOrderNo
                 + "',   @WORKORDER_NO_OF_TRUCKS='" + NoOfContainers
                 + "',   @WORKORDER_PLANT='" + Plant
                 + "',   @WORKORDER_TRANSPORTER_CODE='" + TransporterCode
                 + "',   @WORKORDER_COUNTRY='" + CountryName
                 + "',   @WORKORDER_STATUS='" + status
                 + "',   @WORKORDER_CREATED_BY='" + CreatedBy + "'";
        s = Dal.ExecuteNonQueryDB1(Query, DBName);
        return s;
    }

    internal static DataTable GetTranasporterCode(int WorkOrderNo)
    {
        string Query = "EXEC USP_SMVTS_BAJAJ_IB_PROC @OPERATION = 16 " +
                        ", @WORKORDER_NO='" + WorkOrderNo + "'";
        DataTable dt = Dal.ExecuteQuery(Query);
        return dt;
    }

    internal static DataTable get_Devices1(SMVTS_DEVICES _obj_Smvts_Devices, string categdbname)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Devices.OPERATION)
        {
            case operation.Empty:

                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) == "0")
                    dt = ExecuteQueryDB1("SELECT DEVICE_ID,DEVICE_NAME  FROM SMVTS_DEVICES (NOLOCK)   Where   DEVICE_STATUS = 1 AND   DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "' AND DEVICE_ID NOT IN (SELECT  VEHICLES_DEVICE_ID FROM SMVTS_VEHICLES(NOLOCK) where  VEHICLES_CATEGORY_ID = '" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "') ", categdbname);
                // dt = ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES @Operation = 'FreeDevice', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'", categdbname);
                break;
        }
        return dt;
    }

    internal static DataTable get_DEVICES_unassigned(SMVTS_DEVICES _obj_Smvts_Devices, string categdbname)
    {
        DataTable dt = new DataTable();
        switch (_obj_Smvts_Devices.OPERATION)
        {
            case operation.Empty:
                if (Convert.ToString(_obj_Smvts_Devices.DEVICE_ID) != "0")
                    //
                    dt = ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES_UNASSIGNED @Operation = 'FreeDevice', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'", categdbname);
                else
                    dt = ExecuteQueryDB1("EXEC USP_SMVTS_DEVICES_UNASSIGNED @Operation = 'FreeDevice', @DEVICE_CATEGORY_ID ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_CATEGORY_ID) + "', @DEVICE_STATUS ='" + Convert.ToString(_obj_Smvts_Devices.DEVICE_STATUS) + "'", categdbname);


                break;
            default: break;
        }
        return dt;
    }

    internal static DataTable get_DEVICENAME(string categdbname, int vdevid)
    {
        DataTable dt;
        string qry1 = "Select DEVICE_NAME from SMVTS_DEVICES where DEVICE_ID='" + vdevid + "' ";
        dt = ExecuteQueryDB1(qry1, categdbname);
        return dt;
    }
    internal static DataTable get_Clients() //nly 'C'
    {
        DataTable dt;
        dt = ExecuteQuery1("select * from SMVTS_CATEGORIES where CATEG_CATETYPE_ID not in(1,2)");
        return dt;
    }

    internal static bool DeleteWorkOrderTripsByTripId(string categid, object TripId)
    {
        bool result = Dal.ExecuteNonQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=17, @TRIP_CATEGORY_ID='" + categid + "', @TRIP_ID='" + TripId + "'");
        return result;
    }

    internal static bool RegenerateIBTripDates(string TripIds)
    {
        bool status = false;
        status = Dal.ExecuteNonQuery("EXEC [SMVTS_BAJAJ_IB_AUTOMATION_REGENERATE] @TRIP_IDS='" + TripIds + "'");
        return status;
    }

    internal static DataTable GetBajajTripGrdData()
    {
        DataTable dt = new DataTable();
        string Query = "SELECT * FROM SMVTS_WORKORDER_TRIPS WHERE TRIP_UNLOAD_OUTTIME IS NULL";
        dt = ExecuteQuery(Query);
        return dt;
    }

    internal static bool Delete_WorkOrderTrip(string WorkOrders)
    {
        bool status = false;
        status = Dal.ExecuteNonQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=18, @WORKORDERS='" + WorkOrders + "'");
        return status;
    }

    internal static DataTable GetUserID_IB(string categid)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=20, @CATEGID='" + categid + "'");
        return dt;
    }

    internal static DataTable GetPendingWorkOrders_IB(string categid)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=19, @CATEGID='" + categid + "'");
        return dt;
    }

    internal static DataTable get_GridTrackDistance_IB_StatusWise(SMVTS_GRIDTRACK _obj_Smvts_GridTrack, string parUserID, string IBStatus)
    {
        DataTable dt = new DataTable();
        if (_obj_Smvts_GridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_IB_STATUS @USER_ID = '" + parUserID + "',@IBSTATUS ='" + IBStatus + "',@OUTPARAMETER=''");
        //DataSet DS = ExecuteQueryDataset("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_IB_STATUS @USER_ID = '" + parUserID + "',@IBSTATUS ='" + IBStatus + "'");
        return dt;
    }

    internal static DataTable get_GridTrackDistance_IB_WorkOrderWise(SMVTS_GRIDTRACK _obj_Smvts_GridTrack, string parUserID, string WorkOrder_No)
    {
        DataTable dt = new DataTable();
        if (_obj_Smvts_GridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_IB_WO @USER_ID = '" + parUserID
                                                        + "',@WORKORDER_NO='" + WorkOrder_No + "'");
        return dt;
    }

    //public static DataTable get_GridTrackDistance_IB(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    //{
    //    DataTable dt = new DataTable();
    //    if (_objGridTrack.OPERATION == operation.Select)
    //        dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_IB @USER_ID = '" + parUserID + "'");

    //    return dt;
    //}
    public static DataTable get_GridTrackDistance_IB(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_IB @USER_ID = '" + parUserID + "',@OUTPARAMETER=''");

        return dt;
    }


    public static DataTable Get_TransporterNames()
    {
        DataTable dt = new DataTable();
        dt = ExecuteQuery("select distinct Transporter_Name,Transporter_ID FROM [dbo].[smvts_Transporters]");

        return dt;
    }

    public static DataTable get_Clientwiselist(SMVTS_GRIDTRACK _objGridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_IB @USER_ID = '" + parUserID + "',@OUTPARAMETER=''");

        return dt;
    }

    //Procedure yet to be written *** --Pending
    internal static DataTable GetAll_IBStatusCounts(SMVTS_GRIDTRACK _obj_Smvts_GridTrack, string parUserID)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=21, @USER_ID='" + parUserID + "'");
        return dt;
    }

    internal static DataTable GetWorkOrderDetails(string WorkOrderNo)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_SMVTS_BAJAJ_IB_PROC] @OPERATION=22, @WORKORDER_NO='" + WorkOrderNo + "'");
        return dt;
    }

    internal static DataTable getimagedate()
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC USP_SMVTS_IMAGE @OPERATION='SELECT'");
        return dt;
    }

    internal static DataTable getvehgroupzone()
    {
        DataTable dt = Dal.ExecuteQuery("select distinct(vehicles_groupzone) from SMVTS_VEHICLES");
        return dt;

    }

    internal static DataTable getdrivernames()
    {
        DataTable dt = Dal.ExecuteQuery("SELECT  distinct(driver)  FROM   [192.168.50.149].[ERPL_SMVTS].dbo.erpl_lry_place");
        return dt;
    }

    internal static DataTable getdriverreport_details(string drivername, string startdate, string enddate)
    {
        DataTable dt = Dal.ExecuteQuery("EXEC Usp_smvts_driver_report @DRIVERNAME='" + drivername + "',@STARTDATE='" + startdate + "',@ENDDATE='" + enddate + "'");
        return dt;
    }

    internal static DataTable getremarkslog(string vehno)
    {
        DataTable dt = Dal.ExecuteQuery("Exec Usp_smvts_remark_update @OPERATION='SELECT',@VEHICLE_REG_NUM='" + vehno + "'");
        return dt;

    }

    internal static bool OFFLINE_DETAILS(string mobileno, string imei, string latitude, string longitude,
    string mcc, string mnc, string lac, string cellid, DateTime date_time)
    {
        bool res;
        res = Dal.ExecuteNonQuery_MTS("EXEC USP_OFFLINE_DETAILS @OPERATION='INSERT',@OFFLINE_MOBILE_NO='" + mobileno +
            "',@OFFLINE_IMEI='" + imei +
            "',@OFFINE_LATTITUDE='" + latitude +
            "',@OFFLINE_LONGITUDE='" + longitude +
            "',@OFFLINE_MCC='" + mcc +
            "',@OFFLINE_MNC='" + mnc +
            "',@OFFLINE_LAC='" + lac +
            "',@OFFLINE_CELL_ID='" + cellid +
            "',@OFFLINE_DATE_TIME='" + date_time + "'");
        return res;
    }

    internal static bool OFFLINE_DETAILS_PARAM(string mobileno, string imei, string mcc, string mnc, string lac, string cellid, DateTime date_time)
    {
        bool res;
        res = Dal.ExecuteNonQuery_MTS("EXEC USP_OFFLINE_DETAILS @OPERATION=INSERT_BY_PARAM,@OFFLINE_MOBILE_NO='" + mobileno +
            "',@OFFLINE_IMEI='" + imei +
            "',@OFFLINE_MCC='" + mcc +
            "',@OFFLINE_MNC='" + mnc +
            "',@OFFLINE_LAC='" + lac +
            "',@OFFLINE_CELL_ID='" + cellid +
            "',@OFFLINE_DATE_TIME='" + date_time + "'");
        return res;
    }
    internal static bool refreshdata(int uid)
    {
        bool r;
        r = Dal.ExecuteNonQuery("EXEC [USP_SMVTS_EXPRESSTRACKING_async] @USERID=" + uid + "");
        return r;
    }
    internal static bool updateotp(string mno, string otp, string dbname)
    {
        bool r = false;
        string q1 = "update SMVTS_ERPL_LOADINGSTAFF set LOADINGSTAFF_OTP='" + otp + "' where LOADINGSTAFF_MOBILENUMBER='" + mno + "'";
        r = ExecuteNonQuery3(q1, dbname);
        return r;
    }
    //public static DataTable get_Loadingstaffdata(SMVTS_ERPL_LOADINGSTAFF _obj_Smvts_loadingstaff)
    //{

    //    DataTable dtLoadingstaff = new DataTable();
    //    switch (_obj_Smvts_loadingstaff.OPERATION)
    //    {
    //        case operation.Select:
    //            if (Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_ID) == "0")
    //                dtLoadingstaff = ExecuteQuery("EXEC USP_SMVTS_ERPL_LOADINGSTAFF @Operation = 'select'");
    //            else
    //                dtLoadingstaff = ExecuteQuery("EXEC USP_SMVTS_ERPL_LOADINGSTAFF @Operation = 'select', @LOADINGSTAFF_ID ='" + Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_ID) + "'");
    //            break;
    //    }
    //    return dtLoadingstaff;
    //}

    public static DataTable get_BranchCode(SMVTS_ERPL_LOADINGSTAFF _obj_Smvts_loadingstaff)
    {
        DataTable dt = new DataTable();
        if (_obj_Smvts_loadingstaff.OPERATION == operation.BranchCode)
        {
            int i = 1;
            dt = ExecuteQuery("EXEC USP_SMVTS_ERPL_LOADINGSTAFF @Operation = 'Branch_Code',@BRANCH_STATUS='" + i + "'");
        }
        return dt;
    }
    //internal static bool LoadingStaff_Insert_Update(SMVTS_ERPL_LOADINGSTAFF _obj_Smvts_loadingstaff)
    //{
    //    bool status = false;
    //    switch (_obj_Smvts_loadingstaff.OPERATION)
    //    {
    //        case operation.Insert:
    //            string query = "EXEC USP_SMVTS_ERPL_LOADINGSTAFF @OPERATION = '" + _obj_Smvts_loadingstaff.OPERATION + "' , @LOADINGSTAFF_MOBILENUMBER='" + _obj_Smvts_loadingstaff.LOADINGSTAFF_MOBILENUMBER
    //                              + "', @LOADINGSTAFF_NAME ='" + Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_NAME)
    //                              + "', @LOADINGSTAFF_BRANCH ='" + (_obj_Smvts_loadingstaff.LOADINGSTAFF_BRANCH)
    //                              + "'";
    //            if (Dal.ExecuteNonQuery(query))
    //                status = true;
    //            else
    //                status = false;
    //            break;
    //        case operation.Update1:
    //            string query1 = "EXEC USP_SMVTS_ERPL_LOADINGSTAFF @OPERATION = '" + _obj_Smvts_loadingstaff.OPERATION + "',@LOADINGSTAFF_ID='" + _obj_Smvts_loadingstaff.LOADINGSTAFF_ID + "', @LOADINGSTAFF_MOBILENUMBER='" + _obj_Smvts_loadingstaff.LOADINGSTAFF_MOBILENUMBER
    //                              + "', @LOADINGSTAFF_NAME ='" + Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_NAME)
    //                              + "', @LOADINGSTAFF_BRANCH ='" + (_obj_Smvts_loadingstaff.LOADINGSTAFF_BRANCH)
    //                              + "'";
    //            if (Dal.ExecuteNonQuery(query1))
    //                status = true;
    //            else
    //                status = false;
    //            break;


    //        default:
    //            break;
    //    }
    //    return status;

    //}
    internal static DataTable getmobileotpverification(string mobile_no, string otp, string dbname)
    {
        bool r = false;
        DataTable dt = new DataTable();
        string q = "EXEC USP_SMVTS_ERPL_LOADINGSTAFF @OPERATION='OTP_VERIFICATION',@LOADINGSTAFF_MOBILENUMBER='" + mobile_no + "',@LOADINGSTAFF_OTP='" + otp + "' ";
        dt = ExecuteQueryDB1(q, dbname);
        return dt;
    }

    internal static bool UpdateMobileIMEI(string mobile_no, string sa, string imei, string dbname)
    {
        bool r = false;
        //string q1 = "update SMVTS_ERPL_LOADINGSTAFF set LOADINGSTAFF_OTP='" + sa + "',LOADINGSTAFF_MODIFIEDDATE='" + DateTime.Now + "',LOADINGSTAFF_IMEI='" + imei + "'where LOADINGSTAFF_MOBILENUMBER='" + mobile_no + "'";
        string q1 = "exec USP_SMVTS_ERPL_LOADINGSTAFF @OPERATION='UPDATE',@LOADINGSTAFF_OTP='" + sa + "',@LOADINGSTAFF_IMEI='" + imei + "',@LOADINGSTAFF_MOBILENUMBER='" + mobile_no + "'";
        r = ExecuteNonQuery3(q1, dbname);
        return r;

    }

    public static DataTable get_Loadingstaffdata(SMVTS_ERPL_LOADINGSTAFF _obj_Smvts_loadingstaff)
    {

        DataTable dtLoadingstaff = new DataTable();
        switch (_obj_Smvts_loadingstaff.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_ID) == "0")
                    dtLoadingstaff = ExecuteQuery("EXEC USP_SMVTS_ERPL_LOADINGSTAFF @Operation = 'select'");
                else
                    dtLoadingstaff = ExecuteQuery("EXEC USP_SMVTS_ERPL_LOADINGSTAFF @Operation = 'select', @LOADINGSTAFF_ID ='" + Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_ID) + "'");
                break;
        }
        return dtLoadingstaff;
    }

    //public static DataTable get_BranchCode(SMVTS_ERPL_LOADINGSTAFF _obj_Smvts_loadingstaff)
    //{
    //    DataTable dt = new DataTable();
    //    if (_obj_Smvts_loadingstaff.OPERATION == operation.BranchCode)
    //    {
    //        int i = 1;
    //        dt = ExecuteQuery("EXEC USP_SMVTS_ERPL_LOADINGSTAFF @Operation = 'Branch_Code',@BRANCH_STATUS='" + i + "'");
    //    }
    //    return dt;
    //}
    internal static bool LoadingStaff_Insert_Update(SMVTS_ERPL_LOADINGSTAFF _obj_Smvts_loadingstaff)
    {
        bool status = false;
        switch (_obj_Smvts_loadingstaff.OPERATION)
        {
            case operation.Insert:
                string query = "EXEC USP_SMVTS_ERPL_LOADINGSTAFF @OPERATION = '" + _obj_Smvts_loadingstaff.OPERATION + "' , @LOADINGSTAFF_MOBILENUMBER='" + _obj_Smvts_loadingstaff.LOADINGSTAFF_MOBILENUMBER
                                  + "', @LOADINGSTAFF_NAME ='" + Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_NAME)
                                  + "', @LOADINGSTAFF_BRANCH ='" + (_obj_Smvts_loadingstaff.LOADINGSTAFF_BRANCH)
                                  + "'";
                if (Dal.ExecuteNonQuery(query))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update1:
                string query1 = "EXEC USP_SMVTS_ERPL_LOADINGSTAFF @OPERATION = '" + _obj_Smvts_loadingstaff.OPERATION + "',@LOADINGSTAFF_ID='" + _obj_Smvts_loadingstaff.LOADINGSTAFF_ID + "', @LOADINGSTAFF_MOBILENUMBER='" + _obj_Smvts_loadingstaff.LOADINGSTAFF_MOBILENUMBER
                                  + "', @LOADINGSTAFF_NAME ='" + Convert.ToString(_obj_Smvts_loadingstaff.LOADINGSTAFF_NAME)
                                  + "', @LOADINGSTAFF_BRANCH ='" + (_obj_Smvts_loadingstaff.LOADINGSTAFF_BRANCH)
                                  + "'";
                if (Dal.ExecuteNonQuery(query1))
                    status = true;
                else
                    status = false;
                break;


            default:
                break;
        }
        return status;

    }

    public static DataTable get_Stationnames(SMVTS_TRIPINFO_TRANSITTIME obj_smvts_tripinfotransit)
    {
        DataTable dt = new DataTable();
        if (obj_smvts_tripinfotransit.OPERATION == operation.Stationnames)
        {

            dt = ExecuteQuery("EXEC USP_SMVTS_TRIPINFO_TRANSITTIME @Operation = 'Stationnames' ");
        }
        return dt;
    }

    public static DataTable get_Stationnames(SMVTS_TRIPINFO_TRANSITTIME obj_smvts_tripinfotransit, int STATION_ID)
    {
        DataTable dt = new DataTable();
        //if ( obj_smvts_tripinfotransit.OPERATION == operation.Stationnames)
        //{

        dt = ExecuteQuery("EXEC USP_SMVTS_TRIPINFO_TRANSITTIME @Operation = 'Stationnames',@STATION_ID ='" + STATION_ID + "' ");
        //}
        return dt;
    }
    public static DataTable get_transittimedata(SMVTS_TRIPINFO_TRANSITTIME obj_smvts_tripinfotransit)
    {

        DataTable dttransitdata = new DataTable();
        switch (obj_smvts_tripinfotransit.OPERATION)
        {
            case operation.Select:
                if (Convert.ToString(obj_smvts_tripinfotransit.TT_ID) == "0")
                    dttransitdata = ExecuteQuery("EXEC USP_SMVTS_TRIPINFO_TRANSITTIME @Operation = 'select'");
                else
                    dttransitdata = ExecuteQuery("EXEC  USP_SMVTS_TRIPINFO_TRANSITTIME @Operation = 'select', @TT_ID ='" + Convert.ToString(obj_smvts_tripinfotransit.TT_ID) + "'");
                break;
        }
        return dttransitdata;
    }

    internal static bool Transittime_Insert_Update(SMVTS_TRIPINFO_TRANSITTIME obj_smvts_tripinfotransit)
    {
        bool status = false;
        switch (obj_smvts_tripinfotransit.OPERATION)
        {
            case operation.Insert:
                string query = "EXEC USP_SMVTS_TRIPINFO_TRANSITTIME @OPERATION = '" + obj_smvts_tripinfotransit.OPERATION + "' , @TT_FROM_ID='" + obj_smvts_tripinfotransit.TT_FROM_ID
                                  + "', @TT_TO_ID ='" + obj_smvts_tripinfotransit.TT_TO_ID
                                  + "', @TT_DAYS ='" + obj_smvts_tripinfotransit.TT_DAYS + "', @TT_DISTANCE ='" + obj_smvts_tripinfotransit.TT_DISTANCE
                                  + "',@TT_STATUS='" + obj_smvts_tripinfotransit.TT_STATUS + "'";
                if (Dal.ExecuteNonQuery(query))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                string query1 = "EXEC USP_SMVTS_TRIPINFO_TRANSITTIME @OPERATION = '" + obj_smvts_tripinfotransit.OPERATION + "',@TT_ID='" + obj_smvts_tripinfotransit.TT_ID + "', @TT_FROM_ID='" + obj_smvts_tripinfotransit.TT_FROM_ID
                                  + "', @TT_TO_ID ='" + obj_smvts_tripinfotransit.TT_TO_ID
                                  + "', @TT_DAYS ='" + obj_smvts_tripinfotransit.TT_DAYS + "', @TT_DISTANCE ='" + obj_smvts_tripinfotransit.TT_DISTANCE
                                  + "',@TT_STATUS='" + obj_smvts_tripinfotransit.TT_STATUS + "'";
                if (Dal.ExecuteNonQuery(query1))
                    status = true;
                else
                    status = false;
                break;


            default:
                break;
        }
        return status;

    }

    internal static bool Stations_Insert_Update(SMVTS_TRIPINFO_STATIONS obj_smvts_tripinfo)
    {
        bool status = false;
        switch (obj_smvts_tripinfo.OPERATION)
        {
            case operation.Insert:
                string query = "EXEC USP_SMVTS_TRIPINFO_STATIONS @OPERATION = '" + obj_smvts_tripinfo.OPERATION + "' , @STATION_CODE='" + obj_smvts_tripinfo.STATION_CODE
                                  + "', @STATION_NAME ='" + obj_smvts_tripinfo.STATION_NAME
                                  + "', @STATION_DESC ='" + obj_smvts_tripinfo.STATION_DESC
                                  + "',@STATION_STATUS='" + obj_smvts_tripinfo.STATION_STATUS + "'";
                if (Dal.ExecuteNonQuery(query))
                    status = true;
                else
                    status = false;
                break;
            case operation.Update:
                string query1 = "EXEC USP_SMVTS_TRIPINFO_STATIONS @OPERATION = '" + obj_smvts_tripinfo.OPERATION + "',@STATION_ID='" + obj_smvts_tripinfo.STATION_ID + "', @STATION_CODE='" + obj_smvts_tripinfo.STATION_CODE
                                  + "', @STATION_NAME ='" + obj_smvts_tripinfo.STATION_NAME
                                  + "', @STATION_DESC ='" + obj_smvts_tripinfo.STATION_DESC
                                  + "',@STATION_STATUS='" + obj_smvts_tripinfo.STATION_STATUS + "'";
                if (Dal.ExecuteNonQuery(query1))
                    status = true;
                else
                    status = false;
                break;


            default:
                break;
        }
        return status;

    }

    public static DataTable get_stationsdata(SMVTS_TRIPINFO_STATIONS obj_smvts_tripinfo)
    {

        DataTable dtstationsdata = new DataTable();
        switch (obj_smvts_tripinfo.OPERATION)
        {
            case operation.Select:
                if (((SMVTS_USERS)HttpContext.Current.Session["USERINFO"]).USERS_CATEGORY_ID == 44 || ((SMVTS_USERS)HttpContext.Current.Session["USERINFO"]).USERS_CATEGORY_ID == 119)
                {
                    if (Convert.ToString(obj_smvts_tripinfo.STATION_ID) == "0")
                        dtstationsdata = ExecuteQuery("EXEC  USP_SMVTS_TRIPINFO_STATIONS @Operation = 'select',@STATION_CATEGORY_ID=" + ((SMVTS_USERS)HttpContext.Current.Session["USERINFO"]).USERS_CATEGORY_ID + "");
                    else
                        dtstationsdata = ExecuteQuery("EXEC  USP_SMVTS_TRIPINFO_STATIONS @Operation = 'select', @STATION_ID ='" + Convert.ToString(obj_smvts_tripinfo.STATION_ID) + "'");
                    break;
                }
                else
                {
                    if (Convert.ToString(obj_smvts_tripinfo.STATION_ID) == "0")
                        dtstationsdata = ExecuteQuery("EXEC  USP_SMVTS_TRIPINFO_STATIONS @Operation = 'select'");
                    else
                        dtstationsdata = ExecuteQuery("EXEC  USP_SMVTS_TRIPINFO_STATIONS @Operation = 'select', @STATION_ID ='" + Convert.ToString(obj_smvts_tripinfo.STATION_ID) + "'");
                    break;
                }

        }
        return dtstationsdata;
    }
    internal static bool insertdriverotp(string drivernumber, string sa, string dbname, string imei)
    {
        bool r = false;
        string q1 = "EXEC USP_SMVTS_MOBILEAPP @OPERATION='INSERT',@MOBILE_NO='" + drivernumber + "',@OTP='" + sa + "',@MOBILEIMEI='" + imei + "'";
        r = ExecuteNonQuery3(q1, dbname);
        return r;
    }
    //PARENT APP INSERT OTP
    internal static bool insertcustomerotp(string drivernumber, string sa, string dbname, string imei)
    {
        bool r = false;
        string q1 = "EXEC USP_SMVTS_MOBILEAPP_SCHOOLS @OPERATION='INSERT',@MOBILE_NO='" + drivernumber + "',@OTP='" + sa + "',@MOBILEIMEI='" + imei + "'";
        r = ExecuteNonQuery3(q1, dbname);
        return r;
    }

    //PARENT APP UPDATE OTP
    internal static bool Updatecustomerotp(string drivernumber, string sa, string dbname, string imei)
    {
        bool r = false;
        string q1 = "EXEC USP_SMVTS_MOBILEAPP_SCHOOLS @OPERATION='UPDATE',@MOBILE_NO='" + drivernumber + "',@OTP='" + sa + "',@MOBILEIMEI='" + imei + "'";
        r = ExecuteNonQuery3(q1, dbname);
        return r;
    }
    internal static DataTable getnumberotpverification(string mno, string otp, string dname)
    {
        bool r = false;
        DataTable dt = new DataTable();
        string q = "EXEC USP_SMVTS_MOBILEAPP @OPERATION='OTP_VERIFICATION',@MOBILE_NO='" + mno + "',@OTP='" + otp + "' ";
        dt = ExecuteQueryDB1(q, dname);
        return dt;
    }
    internal static DataTable getnumberotpverification_schools(string mno, string otp, string dname)
    {
        bool r = false;
        DataTable dt = new DataTable();
        string q = "EXEC USP_SMVTS_MOBILEAPP_SCHOOLS @OPERATION='OTP_VERIFICATION',@MOBILE_NO='" + mno + "',@OTP='" + otp + "' ";
        dt = ExecuteQueryDB1(q, dname);
        return dt;
    }
    internal static bool setresendOTP_schools(string mobno, string rno, string imei)
    {
        bool r = false;
        DataTable dt = new DataTable();
        dt = ExecuteQuery1("EXEC USP_SMVTS_MOBILEAPP_SCHOOLS @OPERATION='CHECK',@MOBILE_NO='" + mobno + "',@OTP='" + rno + "',@MOBILEIMEI='" + imei + "'");
        if (Convert.ToInt32(dt.Rows[0][0]) == 1)
        {
            r = true;
        }
        else
        {
            r = false;
        }
        // bool r = ExecuteNonQuery("Insert into SMVTS_MOBILEAPP(CATAGORY_ID,MOBILE_NO,CREATED_DATE,OTP)values('" + clname + "','" + mobno + "',GETDATE(),'" + rno + "')");
        return r;

    }
    internal static bool Insertdetails(string mobilenumber, string Startdate, string latitude, string longitude, string Startlocation, string con)
    {

        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec USP_SMVTS_OMKAR_TRIPINFO @OPERATION='INSERT',@Mobilenumber='" + mobilenumber + "',@Starttrip_date='" + Startdate + "',@Starttrip_latitude='" + latitude + "',@Starttrip_longitude='" + longitude + "',@Startlocation='" + Startlocation + "'", con);
        return r;
    }
    internal static bool Updatedetails(string mobilenumber, string Enddate, string latitude, string longitude, string Total_kms, string Endlocation, string con)
    {

        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec USP_SMVTS_OMKAR_TRIPINFO @OPERATION='UPDATE',@Mobilenumber='" + mobilenumber + "',@Endtrip_date='" + Enddate + "',@Endtrip_latitude='" + latitude + "',@Endtrip_longitude='" + longitude + "',@Total_kms='" + Total_kms + "',@Endlocation='" + Endlocation + "'", con);
        return r;
    }

    internal static bool Insertomkartripinfo_OLD(string ER_DISPATCHDATE, string from, string to, string partyname, string expecteddeliverydate, string Startdate, string drivername, string driverphone, string vehicleno, string con1)
    {

        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec USP_ERPL_LRY_PLACE @OPERATION='INSERT',@frm='" + from + "',@too='" + to + "',@party='" + partyname + "',@desp_time='" + ER_DISPATCHDATE + "',@expected='" + expecteddeliverydate + "',@repo_time='" + Startdate + "',@place_time='" + Startdate + "',@ord_time='" + Startdate + "',@driver='" + drivername + "',@driver_ph='" + driverphone + "',@lorry_no='" + vehicleno + "'", con1);
        return r;
    }
    internal static bool Insertomkartripinfo(string ER_DISPATCHDATE, string from, string to, string partyname, string expecteddeliverydate, string Startdate, string drivername, string driverphone, string vehicleno, string con1)
    {
        string defaultdate = "01/01/2001 12:00:00 AM";
        string repo_next = ""; DateTime Despatch = Convert.ToDateTime(defaultdate), edd = Convert.ToDateTime(defaultdate), eexpiry = Convert.ToDateTime(defaultdate);


        if (ER_DISPATCHDATE != "" && ER_DISPATCHDATE != null)
        {
            Despatch = DateTime.ParseExact(ER_DISPATCHDATE,
                 new[] {"dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd", 
                        "dd-MM-yyyy", "M/d/yyyy", "dd MMM yyyy"},
                 CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
        }
        if (expecteddeliverydate != "" && expecteddeliverydate != null)
        {
            edd = DateTime.ParseExact(expecteddeliverydate,
                     new[] {"dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd", 
                        "dd-MM-yyyy", "M/d/yyyy", "dd MMM yyyy"},
                     CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
        }



        string q1 = "exec USP_ERPL_LRY_PLACE @OPERATION='check_trip',@frm='" + from + "',@party='" + partyname + "',@desp_time='" + Despatch + "',@lorry_no='" + vehicleno + "',@modified_date='" + edd + "'";
        string db = "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCrKZQ4DmwFwjGhTWCzxCZGJ4AN7R3hw0FVHbaexUAfsTwuxjFO6a55KS5SoFb8jrcYU6ffBAShnMcX+xSOG0v2A==";
        DataTable dt1 = ExecuteQueryDB1(q1, db);
        bool r = false;
        if (dt1.Rows.Count > 0)
        {

        }
        else
        {
            r = Dal.ExecuteNonQueryDB("Exec USP_ERPL_LRY_PLACE @OPERATION='INSERT',@frm='" + from + "',@too='" + to + "',@party='" + partyname + "',@desp_time='" + Despatch + "',@expected='" + edd + "',@repo_time='" + Despatch + "',@place_time='" + Despatch + "',@ord_time='" + Despatch + "',@driver='" + drivername + "',@driver_ph='" + driverphone + "',@lorry_no='" + vehicleno + "'", con1);
        }

        return r;



    }
    //lohiya tripinformation to be inserted to 149 server gold drop db
    internal static bool Insertomkartripinfo_new(string ER_DISPATCHDATE, string from, string to, string partyname, string expecteddeliverydate, string drivername, string driverphone, string vehicleno, string reporting_next, string EwayExpiry, string con2)
    {
        bool r = false;
        string defaultdate = "01/01/2001 12:00:00 AM";
        string repo_next = ""; DateTime Despatch = Convert.ToDateTime(defaultdate), edd = Convert.ToDateTime(defaultdate), eexpiry = Convert.ToDateTime(defaultdate);

        DataTable dt = new DataTable();
        string q1 = "exec branchcode @reporting_next='" + reporting_next + "'";
        string db = "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCrKZQ4DmwFwjGhTWCzxCZGGuj0TmkkkaLewBTrTyQHLEGM8bIBvXogfXjgi5nzYlmveKC9JvHHrUfYMuhNJkaMQ==";
        dt = ExecuteQueryDB1(q1, db);
        if (dt.Rows.Count > 0)
        {
            repo_next = Convert.ToString(dt.Rows[0][0]);
        }
        //bool r = false;
        // var culture = System.Globalization.CultureInfo.CurrentCulture;
        //DateTime Despatch = DateTime.ParseExact(ER_DISPATCHDATE, "MM/dd/yyyy", culture);
        //DateTime edd = DateTime.ParseExact(expecteddeliverydate, "MM/dd/yyyy", culture);
        //DateTime eexpiry = DateTime.ParseExact(EwayExpiry, "MM/dd/yyyy", culture);

        if (ER_DISPATCHDATE != "" && ER_DISPATCHDATE != null)
        {
            Despatch = DateTime.ParseExact(ER_DISPATCHDATE,
                 new[] {"dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd", 
                        "dd-MM-yyyy", "M/d/yyyy", "dd MMM yyyy"},
                 CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
        }
        if (expecteddeliverydate != "" && expecteddeliverydate != null)
        {
            edd = DateTime.ParseExact(expecteddeliverydate,
                     new[] {"dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd", 
                        "dd-MM-yyyy", "M/d/yyyy", "dd MMM yyyy"},
                     CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
        }



        if (EwayExpiry != "" && EwayExpiry != null)
        {
            eexpiry = DateTime.ParseExact(EwayExpiry,
                    new[] {"dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd", 
                        "dd-MM-yyyy", "M/d/yyyy", "dd MMM yyyy"},
                    CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
        }



        r = Dal.ExecuteNonQueryDB("Exec USP_ERPL_LRY_PLACE @OPERATION='INSERT',@frm='" + from + "',@too='" + to + "',@party='" + partyname + "',@desp_time='" + Despatch + "',@expected='" + edd + "',@driver='" + drivername + "',@driver_ph='" + driverphone + "',@lorry_no='" + vehicleno + "',@too_bcd='" + repo_next + "',@repo_time='" + eexpiry + "'", con2);
        return r;
    }



    internal static bool closedtripinfo(string vehicleno, string from, string partyname, string despdate, string modified_date, string con1)
    {
        string defaultdate = "01/01/2001 12:00:00 AM";
        string repo_next = ""; DateTime Despatch = Convert.ToDateTime(defaultdate), edd = Convert.ToDateTime(defaultdate), eexpiry = Convert.ToDateTime(defaultdate);


        if (despdate != "" && despdate != null)
        {
            Despatch = DateTime.ParseExact(despdate,
                 new[] {"dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd", 
                        "dd-MM-yyyy", "M/d/yyyy", "dd MMM yyyy"},
                 CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
        }


        if (modified_date != "" && modified_date != null)
        {
            edd = DateTime.ParseExact(modified_date,
                 new[] {"dd/MM/yyyy", "dd-MMM-yyyy", "yyyy-MM-dd", 
                        "dd-MM-yyyy", "M/d/yyyy", "dd MMM yyyy"},
                 CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None);
        }


        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec USP_ERPL_LRY_PLACE @OPERATION='closetrip',@frm='" + from + "',@party='" + partyname + "',@desp_time='" + Despatch + "',@lorry_no='" + vehicleno + "',@modified_date='" + edd + "'", con1);
        return r;
    }





    internal static bool Insertlohiyatripinfo(string ER_DISPATCHDATE, string vno, string frm, string to, string pname, string eddate, string Startdate, string dname, string dno, string ER_BOOKBRANCH, string con1)
    {

        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec USP_ERPL_LRY_PLACE @OPERATION='INSERT',@frm='" + frm + "',@too='" + to + "',@lorry_no='" + vno + "',@party='" + pname + "',@desp_time='" + ER_DISPATCHDATE + "',@expected='" + eddate + "',@repo_time='" + Startdate + "',@place_time='" + Startdate + "',@ord_time='" + Startdate + "',@driver='" + dname + "',@driver_ph='" + dno + "',@invoice='" + ER_BOOKBRANCH + "'", con1);
        return r;
    }
    internal static DataTable get_Gates(VSP_GATE_MASTER _obj_Smvts_Gates)
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_GATE_MASTER @OPERATION='GETALL'");
        return dt;
    }

    internal static DataTable get_GateById(int GateId)
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_GATE_MASTER @OPERATION='GETALL', @GATE_ID='" + GateId + "'");
        return dt;
    }

    internal static bool set_Gates(VSP_GATE_MASTER _obj_Smvts_Gates)
    {
        string Operation = _obj_Smvts_Gates.GATE_ID == 0 ? "INSERT" : "UPDATE";
        string Query = "EXEC USP_VSP_GATE_MASTER @OPERATION='" + Operation
            + "',@GATE_ID ='" + _obj_Smvts_Gates.GATE_ID
            + "',@GATE_NAME ='" + _obj_Smvts_Gates.GATE_NAME
            + "',@GATE_START_TIME ='" + DateToString(Convert.ToDateTime(_obj_Smvts_Gates.GATE_START_TIME))
            + "',@GATE_END_TIME ='" + DateToString(Convert.ToDateTime(_obj_Smvts_Gates.GATE_END_TIME))
            + "',@GATE_VEHICLES_ALLOWED='" + _obj_Smvts_Gates.GATE_VEHICLES_ALLOWED
            + "',@GATE_CREATED_BY='" + _obj_Smvts_Gates.CREATEDBY
            + "',@GATE_MODIFIED_BY='" + _obj_Smvts_Gates.LASTMDFBY
            + "'";
        return ExecuteNonQuery(Query);

    }

    internal static DataTable get_VspTripMaster(VSP_TRIP_MASTER _obj_Smvts_TRIP_MASTER)
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GETALL'");
        return dt;
    }

    internal static DataTable get_VspTripMasterById(int VspTripMasterId)
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GETALL', @TM_ID='" + VspTripMasterId + "'");
        return dt;
    }

    internal static object get_VspVehicles()
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_GATE_MASTER @OPERATION='GETALL_VEHICLES'");
        return dt;
    }

    internal static object get_VspLSGP()
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GET_VSP_LSGP'");
        return dt;
    }

    internal static object get_VspAssetDevice()
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GET_VSP_ASSET_DEVICES'");
        return dt;
    }

    internal static object get_VspRoutes()
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GET_VSP_ROUTES'");
        return dt;
    }

    internal static object get_VspDestinations()
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GET_VSP_DESTINATIONS'");
        return dt;
    }

    internal static object get_VspStatus()
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GET_VSP_STATUS'");
        return dt;
    }

    internal static bool set_VspTripMaster(VSP_TRIP_MASTER _obj_Smvts_TRIP_MASTER)
    {
        string Operation = _obj_Smvts_TRIP_MASTER.TM_ID == 0 ? "INSERT" : "UPDATE";
        string Query = "EXEC USP_VSP_TRIP_MASTER @OPERATION='" + Operation
            + "',@TM_ID ='" + _obj_Smvts_TRIP_MASTER.TM_ID
            + "',@TM_LSGP_ID ='" + _obj_Smvts_TRIP_MASTER.TM_LSGP_ID
            + "',@TM_ASSET_DEVICE_ID='" + _obj_Smvts_TRIP_MASTER.TM_ASSET_DEVICE_ID
            + "',@TM_VEHICLE_ID='" + _obj_Smvts_TRIP_MASTER.TM_VEHICLE_ID
            + "',@TM_ENTRY_GATE_ID='" + _obj_Smvts_TRIP_MASTER.TM_ENTRY_GATE_ID
            + "',@TM_EXIT_GATE_ID='" + _obj_Smvts_TRIP_MASTER.TM_EXIT_GATE_ID
            + "',@TM_ROUTE_ID='" + _obj_Smvts_TRIP_MASTER.TM_ROUTE_ID
            + "',@TM_DESTINATION_ID='" + _obj_Smvts_TRIP_MASTER.TM_DESTINATION_ID
            + "',@TM_VEHICLE_REG_NUMBER='" + _obj_Smvts_TRIP_MASTER.TM_VEHICLE_REG_NUMBER
            + "',@TM_START_TIME ='" + DateToString(Convert.ToDateTime(_obj_Smvts_TRIP_MASTER.TM_START_TIME))
            + "',@TM_END_TIME ='" + DateToString(Convert.ToDateTime(_obj_Smvts_TRIP_MASTER.TM_END_TIME))
            + "',@TM_STATUS='" + _obj_Smvts_TRIP_MASTER.TM_STATUS
            + "',@TM_CREATED_BY='" + _obj_Smvts_TRIP_MASTER.CREATEDBY
            + "',@TM_MODIFIED_BY='" + _obj_Smvts_TRIP_MASTER.LASTMDFBY
            + "'";
        return ExecuteNonQuery(Query);
    }

    internal static DataTable GetLSGPById(string LSGP_Id)
    {
        DataTable dt = ExecuteQuery("EXEC USP_VSP_TRIP_MASTER @OPERATION='GET_LSGP_BY_ID', @LSGP_ID='" + LSGP_Id + "'");
        return dt;
    }

    internal static bool InsertBASFTripDetails(string Vehicle_No, string From_Location, string To_Location, string Start_Date, string End_Date)
    {
        bool res = false;
        string Query = "EXEC USP_SMVTS_BASF_TRIP_DETAILS @OPERATION='INSERT',@BASF_VEHICLE_NO='" + Vehicle_No
                + "',@BASF_FROM_LOCATION='" + From_Location
    + "',@BASF_TO_LOCATION='" + To_Location
    + "',@BASF_START_DATE='" + Start_Date
    + "',@BASF_END_DATE='" + End_Date
    + "',@BASF_CREATED_BY='1'";
        string dB = "Aor2T0SveXPKBbMcC7tSjnV2biNo1UUCAdMIZabw3xnGhTWCzxCZGIf5D1n4CCQU1WC+zhFASdN4Ew7+Lt094Kzb8IV1HY40efjsVQ77zv/jAT15afI3tIplCvGTG6YErrb1ZxuqpT0=";
        res = Dal.ExecuteNonQueryDB1(Query, dB);
        return res;
    }


    internal static bool Insertrecords(string Mobilenumber, string latitude, string longitude, string speed, string direction, int battery_status, string device_time, string con)
    {

        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec USP_SMVTS_OMKAR_COORDINATE @OPERATION='INSERT',@Mobilenumber='" + Mobilenumber + "',@latitude='" + latitude + "',@longitude='" + longitude + "',@speed='" + speed + "',@direction='" + direction + "',@battery_status='" + battery_status + "',@device_time='" + device_time + "'", con);
        return r;
    }
    //written by venkatesh onwards 30th jun 2017
    public static DataTable get_GridTrackDistance_Status(SMVTS_GRIDTRACK _objGridTrack, string parUserID, string Param)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            //dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE @USER_ID = '" + parUserID + "'");//USP_SMVTS_GRID_TRACK_DISTANCE_REPORTS replaces USP_SMVTS_GRID_TRACK_DISTANCE by Gangadhar
            //dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_FOR_VEHICLES @USER_ID = '" + parUserID + "',@DOMSTATUS= '" + Param + "'");//Commented By Gangadhar
            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_FOR_VEHICLES_BY_STATUS @USER_ID = '" + parUserID + "',@DOMSTATUS= '" + Param + "'");
        //@DOMSTATUS USP_SMVTS_GRID_TRACK_DISTANCE_FOR_VEHICLES_BY_STATUS

        return dt;
    }

    public static DataTable get_GridTrackDistance2(SMVTS_GRIDTRACK _objGridTrack, string parUserID, string DM_Status)
    {
        DataTable dt = new DataTable();
        if (_objGridTrack.OPERATION == operation.Select)
            //dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_REPORTS @USER_ID = '" + parUserID + "' ,@DM_Status='" + DM_Status + "'");//USP_SMVTS_GRID_TRACK_DISTANCE_REPORT replaces USP_SMVTS_GRID_TRACK_DISTANCE by Gangadhar

            dt = ExecuteQuery("EXEC USP_SMVTS_GRID_TRACK_DISTANCE_Transporter_count @USER_ID = 1");
        return dt;
    }

    internal static DataTable GetExisting_100Dealers()
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_BAJAJ_TRIP_INFO] @OPERATION=9");
        return dt;
    }
    internal static DataTable GetExisting_Dealers()
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery("EXEC [USP_BAJAJ_TRIP_INFO] @OPERATION=2");
        return dt;
    }

    internal static DataTable GetNotificationCounts1(string parUserID)
    {
        DataTable dt = new DataTable();
        string Operation = "GET ALL STATUS COUNTS";
        //string Query = "EXEC USP_SMVTS_BAJAJ_DOM_PROC @OPERATION='" + Operation + "'";//USP_SMVTS_GRID_TRACK_DISTANCE_TRIPCOUNT
        string Query = "EXEC USP_SMVTS_GRID_TRACK_DISTANCE_TRIPCOUNT @USER_ID = '" + parUserID + "'";// Changed By gangadhar
        dt = Dal.ExecuteQuery(Query);
        return dt;
    }

    internal static DataTable GetNotificationCounts2(string parUserID)
    {
        DataTable dt = new DataTable();
        string Operation = "GET ALL STATUS COUNTS";
        //string Query = "EXEC USP_SMVTS_BAJAJ_DOM_PROC @OPERATION='" + Operation + "'";//USP_SMVTS_GRID_TRACK_DISTANCE_TRIPCOUNT
        string Query = "EXEC USP_SMVTS_GRID_TRACK_DISTANCE_TRIPCOUNT @USER_ID = ' 2'";// Changed By gangadhar
        dt = Dal.ExecuteQuery(Query);
        return dt;
    }

    internal static DataTable GetNotificationCounts3(string parUserID)
    {
        DataTable dt = new DataTable();
        string Operation = "GET ALL STATUS COUNTS";
        //string Query = "EXEC USP_SMVTS_BAJAJ_DOM_PROC @OPERATION='" + Operation + "'";//USP_SMVTS_GRID_TRACK_DISTANCE_TRIPCOUNT
        string Query = "EXEC USP_SMVTS_GRID_TRACK_DISTANCE_TRIPCOUNT @USER_ID = '3'";// Changed By gangadhar
        dt = Dal.ExecuteQuery(Query);
        return dt;
    }

    internal static DataTable GetVehicleDetailsBy_IBStatus(string Dom_status, int Transporter_ID)
    {
        DataTable dt = new DataTable();
        string Operation = "GET BY STATUS";
        //string Query = "EXEC USP_SMVTS_BAJAJ_DOM_PROC @OPERATION='" + Operation + "',@DOMSTATUS='" + Dom_status + "'";// Commented By Gangadhar
        string Query = "EXEC USP_SMVTS_TRANSPORTER_PLANT_RPT_GOOGLESHOW @USER_ID='" + Transporter_ID + "',@IB_Status='" + Dom_status + "'";// 3 Hard Code By Gangadhar
        dt = Dal.ExecuteQuery(Query);
        return dt;
    }

    internal static DataTable GetVehicleDetailsByStatus(string Dom_status, string Userinfo)
    {
        DataTable dt = new DataTable();
        string Operation = "GET BY STATUS";
        //string Query = "EXEC USP_SMVTS_BAJAJ_DOM_PROC @OPERATION='" + Operation + "',@DOMSTATUS='" + Dom_status + "'";// Commented By Gangadhar
        string Query = "EXEC USP_SMVTS_BAJAJ_DOM_PROC @OPERATION='" + Operation
                                                            + "',@DOMSTATUS='" + Dom_status + "',@user_id='3'";// 3 Hard Code By Gangadhar
        dt = Dal.ExecuteQuery(Query);
        return dt;
    }

    internal static DataTable GetVehicleDetails(string VehicleNo, int Transporter_ID_IB)
    {
        DataTable dt = new DataTable();
        string Operation = "VEHICLE DASHBOARD DETAILS";
        string Query = "EXEC USP_SMVTS_TRANSPORTER_PLANT_RPT_GOOGLESHOW_FOR_VEHICLE @USER_ID='" + Transporter_ID_IB + "' ,@VEHICLE='" + VehicleNo + "',@OPERATION='" + Operation + "'";
        dt = Dal.ExecuteQuery(Query);
        return dt;
    }


    //by gangadhar   12th oct2017
    internal static DataSet get_GeoZoneDashboard_triple2(string userid, string lat, string lng, int radius, string categid, string citylat, string citylng, int cityradius, string operation, string DBNAME)
    {
        string strConn = BLL.Decrypt(DBNAME);
        DataSet dt = new DataSet();
        //string query = "EXEC USP_GETGEOZONEDASHBOARD2 @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "',@statelat='" + citylat + "',@statelong='" + citylng + "',@stateradius='" + cityradius + "'";
        string query = "EXEC USP_GETGEOZONEDASHBOARD_PRK_WJ_NEW @USERID=" + userid + ",@LOCATION_LAT='" + lat + "',@LOCATION_LONG ='" + lng + "',@RADIUS =" + radius + ",@CATEGID='" + categid + "',@citylat='" + citylat + "',@citylng='" + citylng + "',@cityradius='" + cityradius + "',@operation='" + operation + "'";

        dt = SqlHelper.ExecuteDataset(strConn, CommandType.Text, query);


        return dt;
    }


    //prod6 connection string
    //PRADEEP 2018 17th OCTOBER 2018

    public static bool shifttimings_insert(string SHIFTVALUES_Val, string CATEG_ID)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec SP_BUSSCHEDULER @OPERATION='INSERT_SHIFTTIMINGS',@SHIFTVALUES_Val='" + SHIFTVALUES_Val + "',@SHIFTVALUES_CategoryID='" + CATEG_ID + "'", CONNPROD6);
        return r;
    }






    public static bool shifttimings_update(string SHIFTVALUES_Val, int ID)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec SP_BUSSCHEDULER @OPERATION='UPDATE_SHIFTTIMINGS',@SHIFTVALUES_Val='" + SHIFTVALUES_Val + "',@SHIFTVALUES_ID='" + ID + "'", CONNPROD6);
        return r;
    }
   
    public static DataTable get_routes(int CATEG_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_ROUTES',@CATEG_ID=" + CATEG_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }

    public static DataTable get_routesbyid(int ROUTES_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_ROUTES_ID',@ROUTES_ID=" + ROUTES_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }

    

    
    public static DataTable get_stations(int ROUTES_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_STATIONSBYID',@STATION_ROUTEID=" + ROUTES_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    public static DataTable get_stations_reverse(int ROUTES_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_STATIONSBYID_REVERSE',@STATION_ROUTEID=" + ROUTES_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }




    public static int routes_insert(string ROUTES_NAME, string ROUTES_CODE, int CATEG_ID, int ROUTES_CREATED_BY)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());

        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='INSERT_ROUTES', @ROUTES_NAME='" + ROUTES_NAME + "',@ROUTES_CODE='" + ROUTES_CODE + "',@CATEG_ID=" + CATEG_ID + ",@ROUTES_CREATED_BY=" + ROUTES_CREATED_BY + "", CONNPROD6);

        int id = Dal.executescalar("select max(ROUTES_ID) as id from SMVTS_MASTER_BUS_ROUTES", CONNPROD6);
        return id;
    }


    public static bool routes_update(string ROUTES_NAME, string ROUTES_CODE, int CATEG_ID, int ROUTES_MODIFIED_BY, int ROUTES_ID)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='UPDATE_ROUTES', @ROUTES_NAME='" + ROUTES_NAME + "',@ROUTES_CODE='" + ROUTES_CODE + "',@CATEG_ID=" + CATEG_ID + ",@ROUTES_MODIFIED_BY=" + ROUTES_MODIFIED_BY + ",@ROUTES_ID='" + ROUTES_ID + "'", CONNPROD6);
        //   bool c = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='DELETE_STATIONSBYROUTE',@ROUTES_ID='" + ROUTES_ID + "'", CONNPROD6);
        return b;
    }


    public static bool STATIONS_INSERT(string STATION_GOOGLEName, string STATION_ShortCode, int STATION_ROUTEID, string STATION_Lat, string STATION_Lng, int STATION_CREATED_BY, string STATION_PLACE, string SNUMBER)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        SqlConnection con = new SqlConnection(BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ConnectionString));
        con.Open();
        SqlCommand cmd = new SqlCommand("SP_BUSSCHEDULER", con);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@OPERATION", "INSERT_STATIONS");
        cmd.Parameters.AddWithValue("@STATION_GOOGLEName", STATION_GOOGLEName);
        cmd.Parameters.AddWithValue("@STATION_ShortCode", STATION_ShortCode);
        cmd.Parameters.AddWithValue("@STATION_ROUTEID", STATION_ROUTEID);
        cmd.Parameters.AddWithValue("@STATION_Lat", STATION_Lat);
        cmd.Parameters.AddWithValue("@STATION_Lng", STATION_Lng);
        cmd.Parameters.AddWithValue("@STATION_CREATED_BY", STATION_CREATED_BY);
        cmd.Parameters.AddWithValue("@STATION_PLACE", STATION_PLACE);
        cmd.Parameters.AddWithValue("@SNUMBER", SNUMBER);
        bool b = false;
        try
        {
            cmd.ExecuteNonQuery();
            b = true;
            con.Close();
        }
        catch (Exception ex)
        {
            con.Close();
            b = false;
        }
        return b;
    }
    public static bool STATIONS_UPDATE(string STATION_GOOGLEName, string STATION_ShortCode, int STATION_ROUTEID, string STATION_Lat, string STATION_Lng, int STATION_CREATED_BY, string STATION_PLACE, string SNUMBER)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        SqlConnection con = new SqlConnection(BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ConnectionString));
        con.Open();
        SqlCommand cmd = new SqlCommand("SP_BUSSCHEDULER", con);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@OPERATION", "UPDATE_STATIONS");
        cmd.Parameters.AddWithValue("@STATION_GOOGLEName", STATION_GOOGLEName);
        cmd.Parameters.AddWithValue("@STATION_ShortCode", STATION_ShortCode);
        cmd.Parameters.AddWithValue("@STATION_ROUTEID", STATION_ROUTEID);
        cmd.Parameters.AddWithValue("@STATION_Lat", STATION_Lat);
        cmd.Parameters.AddWithValue("@STATION_Lng", STATION_Lng);
        cmd.Parameters.AddWithValue("@STATION_MODIFIED_BY", STATION_CREATED_BY);
        cmd.Parameters.AddWithValue("@STATION_PLACE", STATION_PLACE);
        cmd.Parameters.AddWithValue("@SNUMBER", SNUMBER);
        bool b = false;
        try
        {
            cmd.ExecuteNonQuery();
            b = true;
            con.Close();
        }
        catch (Exception ex)
        {
            con.Close();
            b = false;
        }
        return b;
    }
    public static bool STATIONS_DELETE(int STATION_ID)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool r = false;
        r = Dal.ExecuteNonQueryDB("Exec SP_BUSSCHEDULER @OPERATION='DELETE_STATIONSBYSTATIONID',@STATION_ID=" + STATION_ID + "", CONNPROD6);
        return r;
    }


    public static int sheduler_insert(string VNO, int ROUTES_ID, string SCHEDULER_STARTDATE, string SCHEDULER_ENDDATE, int CATEG_ID, int SCHEDULER_CreatedBY, string SHIFT_TIME, string SHIFT_TYPE,string vehicle_number)
    {
        //check_trips
        string CONNPROD7 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());

        // string q5 = "Exec SP_BUSSCHEDULER @OPERATION='CHECK_TRIP',@VNO='" + VNO + "',@SHIFT_TIME='" + SHIFT_TIME + "'";
        // DataTable dt = ExecuteQueryDB1(q5, CONNPROD7);
        int id = 0;
        //if(dt.Rows.Count>0)
        //{
        //    id = 0;
        //}
        //else
        //{
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='INSERT_SCHEDULER', @SCHEDULER_VEHICLENo='" + vehicle_number + "',@SCHEDULER_ROUTEID='" + ROUTES_ID + "',@SCHEDULER_STARTDATE='" + SCHEDULER_STARTDATE + "',@SCHEDULER_ENDDATE='" + SCHEDULER_ENDDATE + "',@SCHEDULER_CategID=" + CATEG_ID + ",@SCHEDULER_CreatedBY=" + SCHEDULER_CreatedBY + ",@SHIFT_TIME='" + SHIFT_TIME + "',@SHIFT_TYPE='" + SHIFT_TYPE + "',@VEHICLE_DEVICE_ID='"+ VNO + "'", CONNPROD6);

        id = Dal.executescalar("select max(SCHEDULER_ID) as id from SMVTS_BUS_SCHEDULER", CONNPROD6);
        return id;
        // }
        //   return id;
    }

    public static int sheduler_insertBus(int Id,string VNO, int ROUTES_ID,  int CATEG_ID,  string vehicle_number)
    {
        //check_trips
        string CONNPROD7 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());

        // string q5 = "Exec SP_BUSSCHEDULER @OPERATION='CHECK_TRIP',@VNO='" + VNO + "',@SHIFT_TIME='" + SHIFT_TIME + "'";
        // DataTable dt = ExecuteQueryDB1(q5, CONNPROD7);
        int id = 0;
        //if(dt.Rows.Count>0)
        //{
        //    id = 0;
        //}
        //else
        //{
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='INSERT_SCHEDULERBUS', @SCHEDULER_VEHICLENo='" + vehicle_number + "',@SCHEDULER_ROUTEID='" + ROUTES_ID + "',@SCHEDULER_CategID=" + CATEG_ID + ",@SCHEDULER_ID="+Id, CONNPROD6);

        id = Dal.executescalar("select max(SCHEDULER_ID) as id from SMVTS_BUS_SCHEDULER", CONNPROD6);
        return id;
        // }
        //   return id;
    }

    public static bool sheduler_details_insert(int SCHEDULERDETAILS_SCHEDULERID, int SCHEDULERDETAILS_STATIONID, string SCHEDULERDETAILS_Type, string SCHEDULERDETAILS_Time, string SCHEDULERDETAILS_PassengerIDs)
    {
        //@SCHEDULERDETAILS_SCHEDULERID,@SCHEDULERDETAILS_STATIONID,@SCHEDULERDETAILS_Type,@SCHEDULERDETAILS_Time,@SCHEDULERDETAILS_PassengerIDs
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='INSERT_SCHEDULER_DETAILS', @SCHEDULERDETAILS_SCHEDULERID=" + SCHEDULERDETAILS_SCHEDULERID + ",@SCHEDULERDETAILS_STATIONID=" + SCHEDULERDETAILS_STATIONID + ",@SCHEDULERDETAILS_Type='" + SCHEDULERDETAILS_Type + "',@SCHEDULERDETAILS_Time='" + SCHEDULERDETAILS_Time + "',@SCHEDULERDETAILS_PassengerIDs='" + SCHEDULERDETAILS_PassengerIDs + "'", CONNPROD6);

        return b;
    }
    public static bool update_user_vehicle(int device_id,string student_id)
    {
        bool b = false;
        //@SCHEDULERDETAILS_SCHEDULERID,@SCHEDULERDETAILS_STATIONID,@SCHEDULERDETAILS_Type,@SCHEDULERDETAILS_Time,@SCHEDULERDETAILS_PassengerIDs
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        string[] studentIds = student_id.Split(',');
        for(int i=0; i< studentIds.Length; i++)
        {
             b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='assign_vehicle',@VEHICLE_DEVICE_ID=" + device_id + ",@ID="+ studentIds[i] + "", CONNPROD6);
        }
       

        return b;
    }
    public static bool sheduler_update(string VNO, int ROUTES_ID, string SCHEDULER_STARTDATE, string SCHEDULER_ENDDATE, int SCHEDULER_ModifiedBY, string SHIFT_TIME, int SCHEDULER_ID, string SHIFT_TYPE)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='UPDATE_SCHEDULER', @SCHEDULER_VEHICLENo='" + VNO + "',@SCHEDULER_ROUTEID='" + ROUTES_ID + "',@SCHEDULER_STARTDATE='" + SCHEDULER_STARTDATE + "',@SCHEDULER_ENDDATE='" + SCHEDULER_ENDDATE + "',@SCHEDULER_ModifiedBY=" + SCHEDULER_ModifiedBY + ",@SHIFT_TIME='" + SHIFT_TIME + "',@SCHEDULER_ID=" + SCHEDULER_ID + ",@SHIFT_TYPE='" + SHIFT_TYPE + "'", CONNPROD6);
        bool c = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='DELETE_SCHEDULER_DETAILS_SCHEDULERID',@SCHEDULERDETAILS_SCHEDULERID=" + SCHEDULER_ID + "", CONNPROD6);

        return b;
    }
    public static DataTable get_sheduler(int CATEG_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_SCHEDULER',@CATEG_ID=" + CATEG_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    //GETALL_chk_okrd_v

    public static DataTable get_chk_okrd_sheduler()
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_chk_okrd_v'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }

    public static DataTable get_sheduler_id(int SCHEDULER_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_SCHEDULER_ID',@SCHEDULER_ID=" + SCHEDULER_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    //GETALL_SCHEDULER_ID
    public static bool passanger_insert(string PASSENGER_NAME, int CATEG_ID, string PASSENGER_address, string PASSENGER_mobileNo, int PASSENGER_Created_By)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='INSERT_PASSANGER', @PASSENGER_NAME='" + PASSENGER_NAME + "',@PASSENGER_address='" + PASSENGER_address + "',@PASSENGER_mobileNo='" + PASSENGER_mobileNo + "',@CATEG_ID=" + CATEG_ID + ",@PASSENGER_Created_By='" + PASSENGER_Created_By + "'", CONNPROD6);
        return b;
    }

    public static bool passanger_update(string PASSENGER_NAME, string PASSENGER_address, string PASSENGER_mobileNo, int PASSENGER_Modified_By, int PASSENGER_ID)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='UPDATE_PASSANGER', @PASSENGER_NAME='" + PASSENGER_NAME + "',@PASSENGER_address='" + PASSENGER_address + "',@PASSENGER_mobileNo='" + PASSENGER_mobileNo + "',@PASSENGER_Modified_By='" + PASSENGER_Modified_By + "',@PASSENGER_ID=" + PASSENGER_ID + "", CONNPROD6);
        return b;
    }
    public static DataTable get_passanger(int CATEG_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GETALL_PASSANGER',@CATEG_ID=" + CATEG_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    //GET_SCHEDULER_DETAILS_SCHEDULERID
    public static DataTable get_schedulerdetails_schedulerid(int SCHEDULERDETAILS_SCHEDULERID, string SHIFT_TIME)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GET_SCHEDULER_DETAILS_SCHEDULERID',@SCHEDULERDETAILS_SCHEDULERID=" + SCHEDULERDETAILS_SCHEDULERID + ",@SHIFT_TIME='" + SHIFT_TIME + "'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    //regenreratetrip
    public static DataTable get_regeneratetrip(string VNO,string DATE)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
       
        string q5 = "Exec sp_regeneratetrip @Report_Date='" + DATE + "',@VehicleNo='" + VNO + "'";
        DataTable dt=ExecuteQueryDB1(q5, CONNPROD6);
         return dt;
    }
    //GET_SCHEDULER_DETAILS_SCHEDULERID_REVERSE
    public static DataTable get_schedulerdetails_schedulerid_reverse(int SCHEDULERDETAILS_SCHEDULERID, string SHIFT_TIME)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GET_SCHEDULER_DETAILS_SCHEDULERID_REVERSE',@SCHEDULERDETAILS_SCHEDULERID=" + SCHEDULERDETAILS_SCHEDULERID + ",@SHIFT_TIME='" + SHIFT_TIME + "'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    public static DataTable get_trips_vno(string VNO)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GET_TRIP_VNO',@VNO='" + VNO + "'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    public static DataTable get_trips_route_shift(int SCHEDULER_ROUTEID, string SHIFT_TIME)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER @OPERATION='GET_TRIP_ROUTE_SHIFT',@SCHEDULER_ROUTEID=" + SCHEDULER_ROUTEID + ",@SHIFT_TIME='" + SHIFT_TIME + "'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    //
    public static bool closed_trip(int SCHEDULER_ID, string SCHEDULER_ENDDATE)
    {
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='CLOSED_TRIP', @SCHEDULER_ID=" + SCHEDULER_ID + ",@SCHEDULER_ENDDATE='" + SCHEDULER_ENDDATE + "'", CONNPROD6);
        return b;
    }
    //EXEC SP_BUSSCHEDULER_REPORT @OPERATION='SCHEDULER_ACTUAL_REPORT'

    public static DataTable SCHEDULER_SUMMARY_REPORT(int CATEG_ID, string ENDDATE)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER_REPORT @OPERATION='SCHEDULER_SUMMARY_REPORT',@CATEG_ID=" + CATEG_ID + ",@ENDDATE='" + ENDDATE + "'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    public static DataTable SCHEDULER_DEVICE_REPORT(int CATEG_ID, string ENDDATE)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER_REPORT @OPERATION='DEVICE_REPORT',@CATEG_ID=" + CATEG_ID + ",@ENDDATE='" + ENDDATE + "'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    public static DataTable SCHEDULER_DETAILED_REPORT(int CATEG_ID, string ENDDATE)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        DataTable dt;
        string q5 = "Exec SP_BUSSCHEDULER_REPORT @OPERATION='DETAILED_REPORT',@CATEG_ID=" + CATEG_ID + ",@ENDDATE='" + ENDDATE + "'";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }

    //By Ajith 8th April 2019

    internal static DataTable Get_Packages(int categID)
    {
        DataTable dt = new DataTable();
        string query = "EXEC USP_PACKAGES @OPERATION='SEELCT_PACKAGES',@CATEG_ID="+ categID + "";
        dt = Dal.ExecuteQuery1(query);
        return dt;
    }
    //by Ajith
    internal static DataTable Get_FormIDsByCategory(int categ_id)
    {

        DataTable dt = Dal.ExecuteQuery1("EXEC USP_PACKAGES @OPERATION='GET_FORMIDS',@CATEG_ID='" + categ_id + "'");
        return dt;
    }
    //by ajith

    internal static DataTable Get_PackagesBy_Id(int PackageId)
    {
        DataTable dt = Dal.ExecuteQuery1("select * from SMVTS_CUSTOMERPACKAGE where PACKAGE_ID=" + PackageId + "");
        return dt;
    }

    internal static DataTable Get_PackagesBy_Id_For_API(int PackageCode)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select * from smvts_mis_packages where PACKAGE_CODE='" + PackageCode + "'");
        return dt;
    }
    // created by Ajith date:12th April 2019

    internal static bool Save_Orders(Orders obj)
    {
        bool status = BLL.ExecuteNonQuery1("EXEC USP_ORDERS @Operation='INSERT' ,@InstallationId='" + obj.InstallationId + "'," +
            "@PackageId='" + obj.PackageId + "'," +
            "@Vehicle_No='" + obj.Vehicle_No + "'," +
            "@Device_IMEI_NO='" + obj.Device_IMEI_NO + "'," +
            "@Order_Type='" + obj.Order_Type + "'," +
            "@Order_Created_Time='" + obj.Order_Created_Time + "'," +
            "@Order_Expiry_Time='" + obj.Order_Expiry_Time + "'");
        return status;
    }

    //check for device in tc_devices
    internal static DataTable check_device_tc(string IMEINUM,int deviceId)
    {
        string query = "EXEC USP_DEVICES @OPERATION='INSERT_DEVICES',@uniqueid='" + IMEINUM + "',@DEVICE_ID='"+ deviceId + "'";
        DataTable dt = Dal.ExecuteQueryFortc(query);
        return dt;
    }


    //Insert device into tt_devids
    internal static bool Insert_Into_tt_devids(int deviceId, string IMEI_NO)
    {
        bool status = BLL.ExecuteNonQuery1("EXEC USP_ORDERS @OPERATION='INSERT_INTO_TT_DEVIDS',@DEVICE_ID='" + deviceId + "',@Device_IMEI_NO='" + IMEI_NO + "'");
        return status;
    }

    //Insert devices into Devices Table
    internal static bool Insert_Into_Devices(int deviceId, string IMEI_NO, int custid, string simnumber, string dbname, string customername,int OrderId,string DeviceType)
    {
        bool status = false;
        string query2 = "";
        string query = "EXEC USP_ORDERS @OPERATION='INSERT_INTO_DEVICES',@DEVICE_ID='" + deviceId + "',@Device_IMEI_NO='" + IMEI_NO + "',@sim_number='" + simnumber + "'";
        query2 = query + ",@cust_id='" + custid + "',@Orderid="+ OrderId + ",";
        if (BLL.ExecuteNonQuery1(query2))
        {
            string CategQuery = " SELECT categ_id FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + customername + "' AND CATEG_CATETYPE_ID=3 ";
            DataTable dt_categ = new DataTable();
            dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
            query2 = query + ",@cust_id='" + Convert.ToInt32(dt_categ.Rows[0][0].ToString()) + "'";

            status = Dal.ExecuteNonQueryDB1(query2, dbname);

        }

        return status;
    }
    //Inssert into tc_devices
    internal static DataTable Insert_tc_devices(string IMEI_NO)
    {
        DataTable dt = Dal.ExecuteQueryFortc("EXEC USP_DEVICES @OPERATION='INSERT_DEVICES',@uniqueid='" + IMEI_NO + "'");
        return dt;
    }
    //Check for Customer Exists
    internal static DataTable Get_Customer(string customername, int dealerID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC USP_ORDERS @OPERATION='CHECK_CUSTOMER',@customerName='" + customername + "',@CATEG_PARENT_ID=" + dealerID + "");

        return dt;
    }
    //Check for Customer Exists
    internal static DataTable Get_Customer_Api(string customername, int dealerID, int cust_mis_Id)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC USP_ORDERS @OPERATION='CHECK_CUSTOMER_API',@customerName='" + customername + "',@CATEG_PARENT_ID=" + dealerID + ",@cust_mis_id=" + cust_mis_Id + "");

        return dt;
    }
    //Check for Customer Exists
    internal static DataTable Get_Customer_for_test(string customername,int dealerID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod_for_Test("EXEC USP_ORDERS @OPERATION='CHECK_CUSTOMER',@customerName='" + customername + "',@CATEG_PARENT_ID="+ dealerID + "");
        return dt;
    }
    //insert new customer
    internal static DataTable insert_new_customer(SMVTS_CATEGORIES obj, string dbname, int PackageId, DateTime Expirytime)
    {
        bool status = false;
        DataTable dt_insert = new DataTable();
        string query = "EXEC USP_ORDERS @OPERATION='INSERT_NEWCUSTOMER',@CATEG_CATETYPE_ID='" + obj.CATEG_CATETYPE_ID + "',@CATEG_PARENT_ID='" + obj.CATEG_PARENT_ID + "',@CATEG_NAME='" + obj.CATEG_NAME + "',@CATEG_DESC='" + obj.CATEG_DESC + "',@CATEG_STATUS='" + obj.CATEG_STATUS + "',@CATEG_CONTACTPERSON='" + obj.CATEG_CONTACTPERSON + "',@CATEG_MOBILENUMBER='" + obj.CATEG_MOBILENUMBER + "',@CATEG_WEBSITENAME='" + obj.CATEG_WEBSITENAME + "',@CATEG_EMAILID='" + obj.CATEG_EMAILID + "',@CATEG_ADDRESS='" + obj.CATEG_ADDRESS + "',@CATEG_COUNTRY_ID='" + obj.CATEG_COUNTRY_ID + "',@CATEG_STATE_ID='" + obj.CATEG_STATE_ID + "',@CATEG_CITY_ID='" + obj.CATEG_CITY_ID + "',@CATEG_ZIPCODE='" + obj.CATEG_ZIPCODE + "',@CATEG_NOOFUSERS='" + obj.CATEG_NOOFUSERS + "',@CATEG_UOMSPEED='" + obj.CATEG_UOMSPEED + "',@CATEG_UOMVOLUME='" + obj.CATEG_UOMVOLUME + "',@CATEG_DBNAME='" + obj.CATEG_DBNAME + "',@CATEG_PRODNAME='" + obj.CATEG_PRODNAME + "'";
        dt_insert = Dal.ExecuteQuery_Prod_for_Test(query);
        // return dt_insert;
        if (dt_insert.Rows.Count > 0)
        {
            DataTable dt_prod = new DataTable();
            dt_prod = Dal.ExecuteQueryDB1(query, dbname);

        }
        return dt_insert;
    }

    //INSERT NEW SIMS
    internal static bool Insert_NEW_Sims(string simnumber, int Cust_Id, string dbname, string customername)
    {
        bool status = false;
        string query2 = "";
        string query = "EXEC USP_ORDERS @OPERATION='CHECK_SIMS',@sim_number='" + simnumber + "'";
        query2 = query + ",@cust_id='" + Cust_Id + "'";

        if (BLL.ExecuteNonQuery1(query2))
        {
            string CategQuery = " SELECT categ_id FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + customername + "' AND CATEG_CATETYPE_ID=3 ";
            DataTable dt_categ = new DataTable();
            dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
            query2 = query + ", @cust_id='" + Convert.ToInt32(dt_categ.Rows[0][0].ToString()) + "'";

            status = Dal.ExecuteNonQueryDB1(query2, dbname);

        }
        return status;
    }
    //Insert new Vehicles
    internal static bool Insert_Vehicles(string vehicleRegNo, int custId, int deviceId, string dbname, string customername)
    {
        bool status = false;
        string query2 = "";
        string query = "EXEC USP_ORDERS @OPERATION='INSERT_INTO_VEHICLES',@vehicle_reg_no='" + vehicleRegNo + "',@DEVICE_ID='" + deviceId + "'";
        query2 = query + ",@cust_id='" + custId + "'";

        if (BLL.ExecuteNonQuery1(query2))
        {
            string CategQuery = " SELECT categ_id FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + customername + "' AND CATEG_CATETYPE_ID=3 ";
            DataTable dt_categ = new DataTable();
            dt_categ = Dal.ExecuteQueryDB1(CategQuery, dbname);
            query2 = query + ",@cust_id='" + Convert.ToInt32(dt_categ.Rows[0][0].ToString()) + "'";

            status = Dal.ExecuteNonQueryDB1(query2, dbname);

        }
        return status;
    }
    //Check username is Exists
    internal static DataTable CheckUser(string username, string dbname)
    {
        string query = "EXEC USP_ORDERS @OPERATION='Check_user',@USERS_USERNAME='" + username + "'";
        DataTable dt = Dal.ExecuteQueryDB1(query, dbname);
        return dt;
    }
    //Insert new customer through Webservice
    internal static bool InsertNewUser(SMVTS_USERS obj, string dbname)
    {
        bool status = false;
        string query = "EXEC USP_ORDERS @OPERATION='INSERT_USER',@USERS_ROLE_ID='" + obj.USERS_ROLE_ID + "',@USERS_USERNAME='" + obj.USERS_USERNAME + "',@USERS_PASSWORD='" + obj.USERS_PASSWORD + "',@USERS_FULLNAME='" + obj.USERS_FULLNAME + "'";
        string query2 = query + ",@USERS_CATEGORY_ID='" + obj.USERS_CATEGORY_ID + "'";
        if (Dal.ExecuteNonQuery_prod_test(query2))
        {
            string CategQuery = " SELECT categ_id FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + obj.USERS_FULLNAME + "' AND CATEG_CATETYPE_ID=3 ";
            DataTable dt_user = new DataTable();
            dt_user = Dal.ExecuteQueryTest(CategQuery);
            query2 = query + ", @USERS_CATEGORY_ID='" + Convert.ToInt32(dt_user.Rows[0][0].ToString()) + "'";

            status = Dal.ExecuteNonQueryTest(query2);

        }


        return status;
    }

    //By ajith on 04-05-2019
    internal static DataTable Get_CustomerPackage(int custId)
    {
        string query = "Select CATEG_PACKAGE_ID from SMVTS_CATEGORIES where CATEG_ID='" + custId + "'";
        DataTable dt = BLL.ExecuteQuery1(query);
        return dt;
    }
    //by Ajith on 04-05-2019
    internal static bool InsertUserRolesForWebservice(SMVTS_ROLES obj, string customername, string dbname)
    {
        bool status = false;
        string query2 = "";
        string query = "EXEC USP_ORDERS @OPERATION='INSERT_ROLES',@ROLES_ROLETYPE='" + obj.ROLES_ROLETYPE + "',@ROLES_FORMSID='" + obj.ROLES_FORMSID + "',@ROLES_COLUMNIDS='" + obj.ROLES_COLUMNSID + "'";
        query2 = query + ",@ROLES_CATEGORY_ID = '" + obj.ROLES_CATEGORY_ID + "'";
        if (Dal.ExecuteNonQuery_prod_test(query2))
        {
            string CategQuery = " SELECT categ_id FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + customername + "' AND CATEG_CATETYPE_ID=3 ";
            DataTable dt_user = new DataTable();
            dt_user = Dal.ExecuteQueryTest(CategQuery);
            query2 = query + ", @ROLES_CATEGORY_ID='" + Convert.ToInt32(dt_user.Rows[0][0].ToString()) + "'";
            status = Dal.ExecuteNonQueryTest(query2);
        }
        return status;
    }
    //by Ajith on 12-06-2019
    internal static bool Insert_VehicleModels(SMVTS_VEHICLEMODELS obj)
    {
        bool status = BLL.ExecuteNonQuery("INSERT INTO SMVTS_VEHICLEMODELS(VEHLEMM_CATEGORY_ID,VEHLEMM_NAME,VEHLEMM_DESC,VEHLEMM_MAKE,VEHLEMM_MODEL,VEHLEMM_YEAR,VEHLEMM_NOOFTANKS,VEHLEMM_TANKCAPACITY,VEHLEMM_MEASURINGUNIT,VEHLEMM_CREATEDBY,VEHLEMM_CREATEDDATE,VEHLEMM_IMAGEVALUE)VALUES('" + obj.VEHLEMM_CATEGORY_ID + "','" + obj.VEHLEMM_NAME + "','" + obj.VEHLEMM_DESC + "','" + obj.VEHLEMM_MAKE + "','" + obj.VEHLEMM_MODEL + "','" + obj.VEHLEMM_YEAR + "','" + obj.VEHLEMM_NOOFTANKS + "','" + obj.VEHLEMM_TANKCAPACITY + "','" + obj.VEHLEMM_MEASURINGUNIT + "','" + obj.VEHLEMM_CREATEDBY + "','"+obj.VEHLEMM_CREATEDDATE+"','"+obj.VEHLEMM_IMAGEVALUE+"')");
        return status;
    }
    
    internal static bool Update_VehicleModels(SMVTS_VEHICLEMODELS obj)
    {
        bool status = BLL.ExecuteNonQuery("exec [USP_SMVTS_VEHICLEMODELS] @operation='Update',@VEHLEMM_NAME='" + obj.VEHLEMM_NAME + "',@VEHLEMM_DESC='" + obj.VEHLEMM_DESC + "',@VEHLEMM_MAKE='" + obj.VEHLEMM_MAKE + "',@VEHLEMM_MODEL='" + obj.VEHLEMM_MODEL + "',@VEHLEMM_YEAR='" + obj.VEHLEMM_YEAR + "',@VEHLEMM_NOOFTANKS='" + obj.VEHLEMM_NOOFTANKS + "',@VEHLEMM_TANKCAPACITY='" + obj.VEHLEMM_TANKCAPACITY + "',@VEHLEMM_MEASURINGUNIT='" + obj.VEHLEMM_MEASURINGUNIT + "',@VEHLEMM_MODIFIEDBY='" + obj.VEHLEMM_MODIFIEDBY + "',@VEHLEMM_MODIFIEDDATE='" + obj.VEHLEMM_MODIFIEDDATE + "',@VEHLEMM_IMAGEVALUE='" + obj.VEHLEMM_IMAGEVALUE + "',@VEHLEMM_ID="+obj.VEHLEMM_ID+"");
        return status;
    }
    public static DataTable get_CategoriesPro(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        DataTable dtCateg = new DataTable();
        dtCateg = Dal.ExecuteQuery_Prod("EXEC USP_SMVTS_CATEGORIES @Operation = 'select'");
        return dtCateg;
    }

    //by Ajith on 13-06-2019
    internal static DataTable GetFormsByCategory(int categId)
    {
        DataTable dt = BLL.ExecuteQuery("select ROLES_FORMSID from SMVTS_ROLES  WHERE ROLES_CATEGORY_ID=" + categId + "");
        return dt;
    }
    //By Ajith on 14-06-2019
    internal static DataTable getUsersByCategory(int categID)
    {
        DataTable DT = Dal.ExecuteQuery_Prod("select USERS_ID,USERS_FULLNAME from smvts_users where USERS_CATEGORY_ID=" + categID + "");
        return DT;
    }
    //By Ajith 20-06-2019
    internal  static bool set_SMS_Configuration(SMVTS_ALERTS_CONFIG obj)
    {
        bool status = Dal.ExecuteNonQueryConfig("exec USP_SMVTS_ALTCONFIG @operation='INSERT',@CONFIG_TYPE='" + obj.CONFIG_TYPE + "',@CONFIG_CATEGID='" + obj.CONFIG_CATEGID + "',@CONFIG_USERID='" + obj.CONFIG_USERID + "',@CONFIG_STATUS='" + obj.CONFIG_STATUS + "',@CONFIG_INTERVAL='" + obj.CONFIG_INTERVAL + "',@CONFIG_OPTIONAL1='" + obj.CONFIG_OPTIONAL1 + "',@CONFIG_OPTIONAL2='" + obj.CONFIG_OPTIONAL2 + "' ");
        return status;
    }
    //By  Ajith 20-06-2019
    internal static bool set_Geofenceconfig(SMVTS_ASSIGNGEOFENCE_LANDMARKS obj)
    {
        bool status = false;
        string query = "exec USP_GEOFENCE_CONFIG @operation = 'INSERT',@ASSIGNGEOFENCE_VEHICLEID = '" + obj.ASSIGNGEOFENCE_VEHICLEID + "',@ASSIGNGEOFENCE_CATEGID = '" + obj.ASSIGNGEOFENCE_CATEGID + "',@ASSIGNGEOFENCE_LANDID = '" + obj.ASSIGNGEOFENCE_LANDID + "',@ASSIGNGEOFENCE_SIMS = '" + obj.ASSIGNGEOFENCE_SIMS + "',@ASSIGNGEOFENCE_STATUS = " + obj.ASSIGNGEOFENCE_STATUS + ",@USERS_ID=" + obj.USERS_ID + "";
       if(Dal.ExecuteNonQueryConfig(query))
        {
            status = Dal.ExecuteNonQueryPROD(query);
        }

        return status;
    }
    internal static DataTable get_assigned_vehicles(SMVTS_ASSIGNGEOFENCE_LANDMARKS obj)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_GEOFENCE_CONFIG @operation='select_assigned',@USERS_ID=" + obj.USERS_ID + "");

        return dt;
    }
    internal static bool update_assigned_vehicles(SMVTS_ASSIGNGEOFENCE_LANDMARKS obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_GEOFENCE_CONFIG @operation='update_assigned_vehicles',@USERS_ID=" + obj.USERS_ID + ",@ASSIGNGEOFENCE_VEHICLEID='" + obj.ASSIGNGEOFENCE_VEHICLEID + "'");

        return status;
    }
    internal static DataTable GetAllGeofences(int usersId)
    {
        DataTable dt = BLL.ExecuteQuery("select ASSIGNGEOFENCE_VEHICLEID,(select LANDMARKS_ADDRESS  from SMVTS_LANDMARKS where LANDMARKS_ID=ASSIGNGEOFENCE_LANDID)as Landmark,ASSIGNGEOFENCE_SIMS from SMVTS_ASSIGNGEOFENCE_LANDMARKS where USERS_ID=" + usersId + " AND (ASSIGNGEOFENCE_VEHICLEID!='' AND ASSIGNGEOFENCE_VEHICLEID IS NOT NULL)");
        return dt;
    }
    internal static DataTable GetAllGeofences1(int usersId)
    {
        DataTable dt = BLL.ExecuteQuery_an("select ASSIGNGEOFENCE_VEHICLEID,(select LANDMARKS_ADDRESS  from SMVTS_LANDMARKS where LANDMARKS_ID=ASSIGNGEOFENCE_LANDID)as Landmark,ASSIGNGEOFENCE_SIMS from SMVTS_ASSIGNGEOFENCE_LANDMARKS where USERS_ID=" + usersId + " AND (ASSIGNGEOFENCE_VEHICLEID!='' AND ASSIGNGEOFENCE_VEHICLEID IS NOT NULL)");
        return dt;
    }
    internal static DataTable getVehicleRegNumber(string vehicleID)
    {
        DataTable dt = BLL.ExecuteQuery("SELECT VEHICLES_REGNUMBER  FROM SMVTS_VEHICLES WHERE VEHICLES_ID='" + vehicleID + "'");
        return dt;
    }
    internal static DataTable getVehicleRegNumber1(string vehicleID)
    {
        DataTable dt = BLL.ExecuteQuery_an("SELECT VEHICLES_REGNUMBER  FROM SMVTS_VEHICLES WHERE VEHICLES_ID='" + vehicleID + "'");
        return dt;
    }
    internal static bool save_orders(SMVTS_PACKAGE_ORDERS obj)
    {
        bool status = false;
        string query = "Exec USP_PACKAGE_ORDERS @operation='INSERT_ORDERS',@ORDER_CATEGORY_ID=" + obj.ORDER_CATEGORY_ID + ",@ORDER_CATEGORY_NAME='" + obj.ORDER_CATEGORY_NAME + "',@ORDER_TYPE='" + obj.ORDER_TYPE + "',@ORDER_AMOUNT=" + obj.ORDER_AMOUNT + ",@ORDER_CREATEDBY=" + obj.ORDER_CREATEDBY + "";
        if (Dal.ExecuteNonQueryConfig(query))
        {
            status = Dal.ExecuteNonQueryPROD(query);
        }

        return status;
    }
    internal static  DataTable get_orders(int categID)
    {
        DataTable dt = new DataTable();
        dt = BLL.ExecuteQuery("select * from  SMVTS_PACKAGE_ORDERS  where ORDER_CATEGORY_ID in (select categ_id from SMVTS_CATEGORIES  where CATEG_PARENT_ID="+ categID + ")");
        return dt;
    }
    internal static DataTable get_VehicleDeviceId(string regNumber)
    {
        DataTable dt = new DataTable();
        dt = BLL.ExecuteQuery("select VEHICLES_DEVICE_ID from SMVTS_VEHICLES where VEHICLES_REGNUMBER='" + regNumber + "'");
        return dt;
    }
    internal static bool Save_subscription(SMVTS_CUSTOMERPACKAGE obj)
    {
        bool status = false;
        string query = "insert into SMVTS_CUSTOMERPACKAGE(PACKAGE_NAME,PACKAGE_FORM_IDS,CREATEDBY,CREATEDDATE,PACKAGE_COLUMNIDS,PACKAGE_PRICE,NUM_OF_DAYS,CATEG_ID)values('" + obj.PACKAGE_NAME + "','" + obj.PACKAGE_FORM_IDS + "'," + obj.CREATEDBY + ",'" + DateTime.Now.ToString() + "','" + obj.PACKAGE_COLUMNIDS + "','" + obj.PACKAGE_PRICE + "'," + obj.NUM_OF_DAYS + "," + obj.CATEG_ID + ")";
        if (Dal.ExecuteNonQueryConfig(query))
        {
            status = Dal.ExecuteNonQueryPROD(query);
        }

        return status;
    }

    internal  static DataTable GetSubscriptionPackages(int categid)
    {
        DataTable dt = new DataTable();
        dt = BLL.ExecuteQuery("Select * from SMVTS_CUSTOMERPACKAGE  where CATEG_ID="+ categid + "");
        return dt;
    }

    //By  Ajith 20-06-2019
    public static void ConfigureDevice(int deviceID,string IMEI)
    {

        //Insert into SMVTS_TT_DEVID
        bool status1 = false;
        status1 = Dal.ExecuteNonQueryConfig("INSERT INTO SMVTS_TT_DEVID(DEVICEID,IMEI,DEVICE_MILEAGE_TYPE)VALUES('" + deviceID + "','" + IMEI + "',2)");

        //Insert into tc_devices
        bool status2 = false;
        status2 = Dal.ExecuteNonQuerytc("INSERT INTO tc_devices(name,uniqueid)values('CTPL_" + deviceID + "','" + IMEI + "')");

    }
    //By  Ajith 20-06-2019
    public static void InsertTraccar(int deviceID, string IMEI)
    {

          //Insert into tc_devices
        bool status2 = false;
        status2 = Dal.ExecuteNonQuerytc("INSERT INTO tc_devices(name,uniqueid)values('CTPL_" + deviceID + "','" + IMEI + "')");

    }
    internal static bool SaveCities(SMVTS_CITIES obj)
    {
        bool status = false;
        string query = "INSERT INTO SMVTS_CITIES(CITY_NAME,CITY_DESC,CITY_STATE_ID,CITY_CREATEDBY,CITY_CREATEDDATE)VALUES('"+obj.CITY_NAME+"','"+obj.CITY_NAME+"','"+obj.CITY_STATE_ID+"','"+obj.CREATEDBY+"','"+obj.CREATEDDATE+"')";
        if (Dal.ExecuteNonQueryConfig(query))
        {
            status = Dal.ExecuteNonQueryPROD(query);
        }

        return status;
    }

    internal static bool SaveStates(SMVTS_STATES obj)
    {
        bool status = false;
        string query = "INSERT INTO SMVTS_STATES(STATE_NAME,STATE_DESC,STATE_COUNTRY_ID,STATE_CREATEDBY,STATE_CREATEDDATE)VALUES('" + obj.STATE_NAME + "','" + obj.STATE_DESC + "','" + obj.STATE_COUNTRY_ID + "','" + obj.CREATEDBY + "','" + obj.CREATEDDATE + "')";
        if (Dal.ExecuteNonQueryConfig(query))
        {
            status = Dal.ExecuteNonQueryPROD(query);
        }

        return status;
    }

    internal  static DataTable Getcities()
    {
        DataTable dt = BLL.ExecuteQuery("select CITY_NAME,(select STATE_NAME from SMVTS_STATES where STATE_ID=CITY_STATE_ID) as State from SMVTS_CITIES");
        return dt;
    }
    internal static DataTable GetStates()
    {
        DataTable dt = new DataTable();
        dt = BLL.ExecuteQuery("select STATE_NAME,(select COUNTRY_NAME from SMVTS_COUNTRIES where COUNTRY_ID=STATE_COUNTRY_ID) as Country from SMVTS_STATES");
        return dt;
    }
    internal static DataTable GetAlertConfig(int UserID)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteConfig("select * from SMVTS_ALERTS_CONFIG where CONFIG_USERID='"+ UserID + "'");
        return dt;
    }
    internal static DataTable checkAlertTypeExistence(SMVTS_ALERTS_CONFIG obj)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteConfig("select * from SMVTS_ALERTS_CONFIG where (CONFIG_USERID='" + obj.CONFIG_USERID + "' AND CONFIG_CATEGID='" + obj.CONFIG_CATEGID + "' AND CONFIG_TYPE='" + obj.CONFIG_TYPE + "')");
        return dt;
    }
    internal  static DataTable getAlertTypeByID(string configID)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteConfig("SELECT CONFIG_OPTIONAL1 FROM SMVTS_ALERTS_CONFIG where CONFIG_ID='" + configID + "'");
        return dt;
    }
    internal static bool updateAlertType(string configid,string mobilenumbers)
    {
        bool status = Dal.ExecuteNonQueryConfig("UPDATE SMVTS_ALERTS_CONFIG SET CONFIG_OPTIONAL1='" + mobilenumbers + "'  WHERE  CONFIG_ID='" + configid + "'");
        return status;
    }
    internal  static DataTable GetDeviceNames()
    {
        DataTable dt = BLL.ExecuteQuery("select * from smvts_Devicetypes");
        return dt;
    }

    //By Ajith 03-07-2019
    internal static DataTable GetOrders(SMVTS_ORDERS obj)
    {
        DataTable dt = new DataTable();
       
        dt = Dal.ExecuteQuery_Prod("Exec USP_DEVICE_ORDERS @operation='getAllOrders',@ORDER_CATEGORYID=" + obj.ORDER_CATEGORYID + "");
        return dt;
    }
    //By Ajith 03-07-2019
    internal static DataTable GetUnusedOrders(SMVTS_ORDERS obj)
    {
        DataTable dt = new DataTable();
        dt = Dal.ExecuteQuery_Prod("Exec USP_DEVICE_ORDERS @operation='GetUnusedOrders',@ORDER_CATEGORYID=" + obj.ORDER_CATEGORYID + "");
        return dt;
    }
    //By Ajith on 05-07-2019
    internal  static DataTable GetCategoriesForUserCreation(SMVTS_CATEGORIES obj_categ)
    {
        DataTable dt = new DataTable();
        switch (obj_categ.OPERATION)
        {
            case operation.SelectPartners:
                dt = BLL.ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectPartners'");
                
                break;

            case operation.SelectClients:
                dt = BLL.ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectClients'");

                break;
            case operation.SelectCatgType:
                dt = BLL.ExecuteQuery("Select CATEG_CATETYPE_ID from  SMVTS_CATEGORIES where CATEG_ID=" + Convert.ToInt32(obj_categ.CATEG_ID) + "");

                break;
            case operation.SelectPartnersAdmin:
                dt = BLL.ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectPartnerForAdmin',@CATEG_PARENT_ID=" + Convert.ToInt32(obj_categ.CATEG_PARENT_ID) + "");

                break;

            case operation.SelectClientsAdmin:
                dt = BLL.ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectClientsForAdmin',@CATEG_PARENT_ID=" + Convert.ToInt32(obj_categ.CATEG_PARENT_ID) + "");

                break;
            case operation.Select:
                dt = BLL.ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'Select',@CATEG_ID="+Convert.ToInt32(obj_categ.CATEG_ID) +"");
                break;
            default:
                break;

        }


        return dt;
            
    }

    //BY Ajith on 06-07-2019
    public static DataTable getDistributor(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        DataTable dtCateg = new DataTable();
        string query = "";
        if(_obj_Smvts_Categories.CATEG_CATETYPE_ID==1)
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectPartnerForAdmin',@CATEG_PARENT_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
        else if(_obj_Smvts_Categories.CATEG_CATETYPE_ID == 2 || _obj_Smvts_Categories.CATEG_CATETYPE_ID == 5)
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_UOM',@CATEG_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }

        // dtCateg = BLL.ExecuteQuery(query);
        dtCateg = Dal.ExecuteQuery_Prod(query);
        return dtCateg;
    }
    //BY Ajith on 06-07-2019
    public static DataTable getDealers(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        string query = "";
        DataTable dtCateg = new DataTable();
        if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 6)
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_UOM',@CATEG_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
        else
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectDealers',@CATEG_PARENT_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
        // dtCateg = BLL.ExecuteQuery(query);
        dtCateg = Dal.ExecuteQuery_Prod(query);
        return dtCateg;
    }
    //BY Ajith on 06-07-2019
    public static DataTable getCustomers(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        DataTable dtCateg = new DataTable();
        dtCateg = Dal.ExecuteQuery_Prod("EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectCustomers',@CATEG_PARENT_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "");
        return dtCateg;
    }
    //BY Ajith on 06-07-2019
    public static DataTable getCustomerUserID(string distributorID, string DealerID,string CustID)
    {
        DataTable dtCateg = new DataTable();
        //string query = "";
        //if(DealerID!="0" && CustID!="0")
        //{
        //    query = "select USERS_ID from SMVTS_USERS   where USERS_CATEGORY_ID='" + CustID + "'";
        //}
        //else if(DealerID != "0" && CustID == "0")
        //{
        //    query = "select USERS_ID from SMVTS_USERS u inner join SMVTS_CATEGORIES c on c.CATEG_ID=u.USERS_CATEGORY_ID where USERS_CATEGORY_ID in (select CATEG_ID FROM SMVTS_CATEGORIES WHERE CATEG_PARENT_ID = '"+ DealerID + "')";
        //}

        dtCateg = Dal.ExecuteQuery_Prod("EXEC SMVTS_GET_ALL_CUSTOMERS @DISTRUBUTOR_ID='"+ distributorID + "',@DELAER_ID='"+ DealerID + "',@CUSTOMER_ID='"+ CustID + "'");
            return dtCateg;
    }
    //BY Ajith on 06-07-2019
    public static DataTable getDistributorConfig(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        DataTable dtCateg = new DataTable();
        string query = "";
        if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 1)
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectPartnerForAdmin',@CATEG_PARENT_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
        else if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 2 || _obj_Smvts_Categories.CATEG_CATETYPE_ID == 5)
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_UOM',@CATEG_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }

        dtCateg = BLL.ExecuteQuery(query);
        //dtCateg = Dal.ExecuteQuery_Prod(query);
        return dtCateg;
    }
    //BY Ajith on 06-07-2019
    public static DataTable getDealersConfig(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        string query = "";
        DataTable dtCateg = new DataTable();
        if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 6)
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_UOM',@CATEG_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
        else
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectDealers',@CATEG_PARENT_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
         dtCateg = BLL.ExecuteQuery(query);
       // dtCateg = Dal.ExecuteQuery_Prod(query);
        return dtCateg;
    }
    public static DataTable getLastDeviceID()
    {
        DataTable dt = Dal.ExecuteQuery_Prod("SELECT MAX(DEVICEID) AS DEVICEID FROM smvts_tt_devid");
        return dt;
    }
    public static DataTable getIMEINumbers(string CATEG_ID)
    {
        DataTable dt = Dal.ExecutePRODDB("Select DEVICEID,IMEI from smvts_tt_devid where CATEG_ID='" + CATEG_ID + "' AND STATUS=1");
        return dt;
    }

    public static DataTable getDealerSIMS(string CATEG_ID)
    {
        DataTable dt = Dal.ExecuteQuery1("exec USP_STOCK_UPLOAD @operation='get_Sims_By_Dealer',@dealer_id='"+ CATEG_ID + "'");
        return dt;
    }
    //internal static bool  DeviceInstallation(string categid,int deviceID,string IMEI,string devicename,string simnumber,string vehicleno,string Vehtype,string VehcleName, string createdby,string orderid,string categname,string simoperator)
    //{
    //    bool status = false;
    //    try
    //    {
    //        string query = "", query1 = "";

    //        query = "EXEC USP_INSERT_DEVICE @OPERATION='INSERT_DEVICE',@DEVICEID='" + deviceID + "',@DEVICE_IMEI='" + IMEI + "',@DEVICE_NAME='" + devicename + "',@SIM_NUMBER='" + simnumber + "',@VEHICLE_REGNUMBER='" + vehicleno + "',@CREATED_BY='" + createdby + "',@ORDER_ID='" + orderid + "',@Vehtype='" + Vehtype + "',@VehcleName='" + VehcleName + "',@SIMOPERATOR='" + simoperator + "'";

    //        query1 = query + ",@CATEG_ID = '" + categid + "'";
    //        bool status1 = Dal.ExecuteNonQueryPROD(query1);
    //        if (status1 == true)
    //        {
    //            string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "'";

    //            DataTable dt_categ = new DataTable();
    //            dt_categ = Dal.ExecuteConfig(CategQuery);
    //            query = query + ",@CATEG_ID = '" + dt_categ.Rows[0][0].ToString() + "'";

    //            status = Dal.ExecuteNonQueryConfig(query);
    //            updateOrders(orderid, deviceID);
    //           // InsertTraccar(deviceID, IMEI);

    //        }
    //    }
    //    catch(Exception  ex)
    //    {
    //       // updateOrders(orderid, deviceID);
    //        status = false;
    //    }

    //    return status;
    //}

    internal static bool DeviceInstallation(string categid, int deviceID, string IMEI, string devicename, string simnumber, string vehicleno, string Vehtype, string VehcleName, string createdby, string orderid, string categname, string Vehimagemodel, string simoperator)
    {
        bool status = false;
        try
        {
            string query = "", query1 = "";

          

            query = "EXEC USP_INSERT_DEVICE @OPERATION='INSERT_DEVICE',@DEVICEID='" + deviceID + "',@DEVICE_IMEI='" + IMEI + "',@DEVICE_NAME='" + devicename + "',@SIM_NUMBER='" + simnumber + "',@VEHICLE_REGNUMBER='" + vehicleno + "',@CREATED_BY='" + createdby + "',@ORDER_ID='" + orderid + "',@Vehtype='" + Vehtype + "',@VehcleName='" + VehcleName + "',@SIMOPERATOR='" + simoperator + "',@Vehimagevalue='" + Vehimagemodel + "'";

            query1 = query + ",@CATEG_ID = '" + categid + "'";


            string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "'";

            DataTable dt_categ = new DataTable();
            dt_categ = Dal.ExecuteConfig(CategQuery);
            query1 = query1 + ",@config_categid = '" + dt_categ.Rows[0][0].ToString() + "'";

           // status = Dal.ExecuteNonQueryConfig(query);

            bool status1 = Dal.ExecuteNonQueryPROD(query1);
            if (status1 == true)
            {
           
               // updateOrders(orderid, deviceID);
                status = true;
                // InsertTraccar(deviceID, IMEI);

            }
        }
        catch (Exception ex)
        {
            // updateOrders(orderid, deviceID);
            status = false;
        }

        return status;
    }
    internal static bool DeviceInstallation140(string categid, int deviceID, string IMEI, string devicename, string simnumber1, string simnumber2,string vehicleno, string Vehtype, string VehcleName, string createdby, string orderid, string categname, string simoperator1,string simoperator2)
    {
        string query = "", query1 = "";
        bool status = false;
        query = "EXEC [USP_INSTALL_DEVICE140] @OPERATION='INSTALL_DEVICE',@DEVICEID='" + deviceID + "',@DEVICE_IMEI='" + IMEI + "',@DEVICE_NAME='" + devicename + "',@SIM_NUMBER='" + simnumber1 + "',@VEHICLE_REGNUMBER='" + vehicleno + "',@CREATED_BY='" + createdby + "',@ORDER_ID='" + orderid + "',@Vehtype='" + Vehtype + "',@VehcleName='" + VehcleName + "',@SIM_NUMBER2='" + simnumber2 + "',@SIMOPERATOR1='" + simoperator1 + "',@SIMOPERATOR2='" + simoperator2 + "'";

        query1 = query + ",@CATEG_ID = '" + categid + "'";
        bool status1 = Dal.ExecuteNonQueryPROD(query1);
        if (status1 == true)
        {
            string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "'";

            DataTable dt_categ = new DataTable();
            dt_categ = Dal.ExecuteConfig(CategQuery);
            query = query + ",@CATEG_ID = '" + dt_categ.Rows[0][0].ToString() + "'";

            status = Dal.ExecuteNonQueryConfig(query);
            updateOrders(orderid, deviceID);
            ConfigureDevice(deviceID, IMEI);

        }

        return status;
    }
    internal static bool DeviceInstallation_for_test(string categid, int deviceID, string IMEI, string devicename, string simnumber, string vehicleno, string Vehtype, string VehcleName, string createdby, string orderid, string categname, string simoperator)
    {
        string query = "", query1 = "";
        bool status = false;
        query = "EXEC USP_INSERT_DEVICE @OPERATION='INSERT_DEVICE',@DEVICEID='" + deviceID + "',@DEVICE_IMEI='" + IMEI + "',@DEVICE_NAME='" + devicename + "',@SIM_NUMBER='" + simnumber + "',@VEHICLE_REGNUMBER='" + vehicleno + "',@CREATED_BY='" + createdby + "',@ORDER_ID='" + orderid + "',@Vehtype='" + Vehtype + "',@VehcleName='" + VehcleName + "'";

        query1 = query + ",@CATEG_ID = '" + categid + "'";
        bool status1 = Dal.ExecuteNonQuery_prod_test(query1);
        if (status1 == true)
        {
            string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "'";

            DataTable dt_categ = new DataTable();
            dt_categ = Dal.ExecuteQueryTest(CategQuery);
            query = query + ",@CATEG_ID = '" + dt_categ.Rows[0][0].ToString() + "'";

            status = Dal.ExecuteNonQueryTest(query);
           // ConfigureDevice(deviceID, IMEI);
           //  updateOrders(orderid, deviceID);
        }

        return status;
    }
    internal static bool updateIMEIandSIM(int deviceid,string simnumber,string categId,string categ_name)
    {
        bool status1 = false;
        try
        {
            //bool status = Dal.ExecuteNonQueryPROD("Update smvts_tt_devid set status=2 where DEVICEID='" + deviceid + "' AND CATEG_ID='"+ categId + "'");
            status1 = Dal.ExecuteNonQueryConfig("update SMVTS_ALL_SIMS set sim_status=2,SIM_REMARKS1='Currently Installed to " + categ_name + "' where SIM_NUMBER='" + simnumber + "'");
            return status1;
        }
        catch(Exception ex)
        {
            return status1;
        }
    }
    internal static DataTable getAccounts(SMVTS_CATEGORIES obj_categ)
    {
        DataTable dt = new DataTable();
        dt = BLL.ExecuteQuery("EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectClientsForAdmin',@CATEG_PARENT_ID=" + Convert.ToInt32(obj_categ.CATEG_PARENT_ID) + "");
        return dt;
    }
    internal static bool SaveOrder(SMVTS_ORDERS obj)
    {
        
        bool status = Dal.ExecuteNonQueryPROD("Exec USP_DEVICE_ORDERS @operation='insert',@ORDER_NAME='" + obj.ORDER_NAME + "',@ORDER_CATEGORYID='" + obj.ORDER_CATEGORYID + "',@ORDER_CREATEDATE='" + obj.ORDER_CREATEDATE + "',@ORDER_PACKAGE='" + obj.ORDER_PACKAGE + "',@ORDER_PRICE='" + obj.ORDER_PRICE + "',@ORDER_STATUS='" + obj.ORDER_STATUS + "',@ORDER_DAYS='" + obj.ORDER_DAYS + "'");
        return status;
    }
    internal static DataTable RenewOrder(SMVTS_ORDERS obj)
    {

        DataTable dt = Dal.ExecuteQuery_Prod("Exec USP_DEVICE_ORDERS @operation='Renew_Order',@ORDER_NAME='" + obj.ORDER_NAME + "',@ORDER_CATEGORYID='" + obj.ORDER_CATEGORYID + "',@ORDER_CREATEDATE='" + obj.ORDER_CREATEDATE + "',@ORDER_PACKAGE='" + obj.ORDER_PACKAGE + "',@ORDER_PRICE='" + obj.ORDER_PRICE + "',@ORDER_STATUS='" + obj.ORDER_STATUS + "',@ORDER_DAYS='" + obj.ORDER_DAYS + "',@ORDER_STARTDATE='" + obj.ORDER_STARTDATE + "',@ORDER_EXPDATE='" + obj.ORDER_EXPDATE + "',@DeviceID='"+obj.DEVICE_ID+"'");
        return dt;
    }
    internal static DataTable SaveOrder_test(SMVTS_ORDERS obj)
    {

        DataTable dt = Dal.ExecuteQuery_Prod_for_Test("Exec USP_DEVICE_ORDERS @operation='Renew_Order',@ORDER_NAME='" + obj.ORDER_NAME + "',@ORDER_CATEGORYID='" + obj.ORDER_CATEGORYID + "',@ORDER_CREATEDATE='" + obj.ORDER_CREATEDATE + "',@ORDER_PACKAGE='" + obj.ORDER_PACKAGE + "',@ORDER_PRICE='" + obj.ORDER_PRICE + "',@ORDER_STATUS='" + obj.ORDER_STATUS + "',@ORDER_DAYS='" + obj.ORDER_DAYS + "',@ORDER_STARTDATE='" + obj.ORDER_STARTDATE + "',@ORDER_EXPDATE='" + obj.ORDER_EXPDATE + "',@DeviceID='" + obj.DEVICE_ID + "'");
        return dt;
    }
    public static DataTable getDistributorForOrders(SMVTS_CATEGORIES _obj_Smvts_Categories)
    {
        DataTable dtCateg = new DataTable();
        string query = "";
        if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 1)
        {
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectPartnerForAdmin',@CATEG_PARENT_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
        else if (_obj_Smvts_Categories.CATEG_CATETYPE_ID == 2 || _obj_Smvts_Categories.CATEG_CATETYPE_ID == 5)
        {
            //query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Select_UOM',@CATEG_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
            query = "EXEC USP_SMVTS_CATEGORIES @Operation = 'SelectDealers',@CATEG_PARENT_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_ID) + "";
        }
        dtCateg = Dal.ExecutePRODDB(query);
        return dtCateg;
    }
    internal static string SaveDeviceWallet(SMVTS_DEVICE_WALLET obj,string categname,int DistID,int type)
    {
        string query = "",query1="";
      //  bool status = false;
        if (type == 1)
        {
            query = "Exec USP_DEVICES_WALLET @operation='INSERT_WALLET',@CATEG_ID = '" + obj.CATEG_ID + "',@TOTAL='" + obj.TOTAL + "',@AVAILABLE='" + obj.AVAILABLE + "',@CREATEDBY='" + obj.CREATEDBY + "',@DIST_ID="+ DistID + "";

         bool  status = Dal.ExecuteNonQueryPROD(query);
            if(status==true)
            {
                query1 = "true";
            }
            else
            {
                query1 = "false";
            }
        }
        else
        {
            int balance = 0;
            DataTable dt_get = Dal.ExecutePRODDB("select TOTAL,ALLOCATED from SMVTS_DEVICE_WALLET  where CATEG_ID='" + DistID + "' AND Status=1");
            if(dt_get.Rows.Count>0)
            {
                balance = Convert.ToInt32(dt_get.Rows[0][0]) - Convert.ToInt32(dt_get.Rows[0][1]);
                if(balance>=obj.TOTAL)
                {
                    query = "Exec USP_DEVICES_WALLET @operation='INSERT_DEALER',@CATEG_ID = '" + obj.CATEG_ID + "',@TOTAL='" + obj.TOTAL + "',@AVAILABLE='" + obj.AVAILABLE + "',@ALLOCATED='" + obj.ALLOCATED+"',@CREATEDBY='" + obj.CREATEDBY + "',@DIST_ID='" + DistID + "'";
                  bool   status = Dal.ExecuteNonQueryPROD(query);
                    if (status == true)
                    {
                        query1 = "true";
                    }
                    else
                    {
                        query1 = "false";
                    }
                }
                else
                {
                    query1 = "Sorry insufficient balance";
                }
            }
            else
            {
                query1 = "Sorry insufficient balance";
            }
            
        }
     

    
        //if (Dal.ExecuteNonQueryPROD(query1))
        //{
        //    string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "") + "'";

        //    DataTable dt_categ = new DataTable();
        //    dt_categ = Dal.ExecuteConfig(CategQuery);
        //    query = query + ",@CATEG_ID = '" + dt_categ.Rows[0][0].ToString() + "'";

        //    status = Dal.ExecuteNonQueryConfig(query);
        //}
       
        
        return query1;
    }
    internal static DataTable GetWalletData(int categId)
    {
        DataTable dt = Dal.ExecutePRODDB("exec USP_DEVICES_WALLET @operation='Select',@CATEG_ID=" + categId + "");
        return dt;
    }
    internal static bool UpdateDeviceWallet(string categID,string dealerID)
    {
        //bool status = BLL.ExecuteNonQuery("exec USP_DEVICES_WALLET @operation='updateWallet',@CATEG_ID='" + dealerID + "'");
        bool status2 = Dal.ExecuteNonQueryPROD("exec USP_DEVICES_WALLET @operation='insert_customer',@CATEG_ID='" + categID + "',@DIST_ID='" + dealerID + "'");
        return status2;
    }
    internal static DataTable getWalletDataforDashboard(int dealerID)
    {
        DataTable DT = Dal.ExecuteQuery_Prod("exec USP_DEVICES_WALLET @operation='SelectDashboard',@DIST_ID='" + dealerID + "'");
        return DT;
    }
    internal static DataTable getAllUsers(SMVTS_CATEGORIES obj)
    {

        string query = "";
        
        if (obj.CATEG_CATETYPE_ID == 1)
        {
            DataTable dt = new DataTable();
            query = "select (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID=USERS_CATEGORY_ID) as Name,(select CATEG_MOBILENUMBER from SMVTS_CATEGORIES where CATEG_ID = USERS_CATEGORY_ID) as MobileNumber,(select CATEG_EMAILID from SMVTS_CATEGORIES where CATEG_ID = USERS_CATEGORY_ID) as Email,USERS_USERNAME, USERS_PASSWORD from SMVTS_USERS";

            dt = BLL.ExecuteQuery(query);
            return dt;
        }
        else
        {
            DataTable dt_users = new DataTable();
            DataTable dt_userdata = new DataTable();
            dt_userdata.Columns.Add("Name");
            dt_userdata.Columns.Add("MobileNumber");
            dt_userdata.Columns.Add("Email");
            dt_userdata.Columns.Add("USERS_USERNAME");
            dt_userdata.Columns.Add("USERS_PASSWORD");

            dt_users = BLL.ExecuteQuery("select categ_id from SMVTS_CATEGORIES where CATEG_PARENT_ID=" + obj.CATEG_ID + "");
            if (dt_users.Rows.Count > 0)
            {
                string query1 = "";
                for (int i = 0; i < dt_users.Rows.Count; i++)
                {
                    query1 = "select (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID=USERS_CATEGORY_ID) as Name,(select CATEG_MOBILENUMBER from SMVTS_CATEGORIES where CATEG_ID = USERS_CATEGORY_ID) as MobileNumber,(select CATEG_EMAILID from SMVTS_CATEGORIES where CATEG_ID = USERS_CATEGORY_ID) as Email,USERS_USERNAME, USERS_PASSWORD from SMVTS_USERS where USERS_CATEGORY_ID=" + Convert.ToInt32(dt_users.Rows[i]["categ_id"]) + "";
                    DataTable dt_single = BLL.ExecuteQuery(query1);
                    dt_userdata.Rows.Add(dt_single.Rows[0]["Name"].ToString(), dt_single.Rows[0]["MobileNumber"].ToString(), dt_single.Rows[0]["Email"].ToString(), dt_single.Rows[0]["USERS_USERNAME"].ToString(), dt_single.Rows[0]["USERS_PASSWORD"].ToString());
                }
            }
            return dt_userdata;
        }
      
    }

    internal static DataTable getUserMobileNumber(int id)
    {
        DataTable dt = BLL.ExecuteQuery("select CATEG_MOBILENUMBER from SMVTS_CATEGORIES where CATEG_ID=" + id + "");
        return dt;
    }
    internal static bool approveWallet(int categid)
    {
        bool status = Dal.ExecuteNonQueryPROD("update SMVTS_DEVICE_WALLET set status=1 where CATEG_ID=" + categid + "");
        return status;
    }
    public static void updateOrders(string OrderId,int deviceID)
    {
        DataTable dt_orders = Dal.ExecuteQuery_Prod("select ORDER_DAYS from SMVTS_ORDERS where ORDER_ID='" + OrderId + "'");
        if(dt_orders.Rows.Count>0)
        {
            int days = Convert.ToInt32(dt_orders.Rows[0][0]);
            DateTime dt_startdate = DateTime.Now;
            DateTime dt_expDate = DateTime.Now.AddDays(days);

        bool status = Dal.ExecuteNonQueryPROD("Exec USP_DEVICE_ORDERS @operation='updateOrders',@ORDER_STARTDATE='" + dt_startdate + "',@ORDER_EXPDATE='" + dt_expDate + "',@ORDER_ID=" + OrderId + ",@DeviceID="+ deviceID + "");
        }
        
    }
    public static DataTable get_RfidReaders(int CATEG_ID)
    {
        string CONNPROD6 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        CATEG_ID = 0;
        DataTable dt;
        string q5 = "Exec usp_smvts_RFIDReader @OPERATION='select',@CATEGID=" + CATEG_ID + "";
        dt = ExecuteQueryDB1(q5, CONNPROD6);
        return dt;
    }
    public static int RFID_Reader_insert(string ReaderIMEI, int User_ID, int cATEG_ID, string vehicle_number)
    {
        //check_trips
        string CONNPROD7 = ConfigurationManager.ConnectionStrings["PROD6"].ToString();
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());

        // string q5 = "Exec SP_BUSSCHEDULER @OPERATION='CHECK_TRIP',@VNO='" + VNO + "',@SHIFT_TIME='" + SHIFT_TIME + "'";
        // DataTable dt = ExecuteQueryDB1(q5, CONNPROD7);
        int id = 0;
        //if(dt.Rows.Count>0)
        //{
        //    id = 0;
        //}
        //else
        //{
        bool b = Dal.ExecuteNonQueryDB("EXEC usp_smvts_RFIDReader @OPERATION='INSERT_RFID_Reader',@Reader_IMEI=" + ReaderIMEI + ",@Reader_VEHICLENo= " + vehicle_number + "", CONNPROD6);

        id = Dal.executescalar("select max(CATEG_ID) as id from smvts_RFIDReader", CONNPROD6);
        return id;
        // }
        //   return id;
    }

    public static bool RFID_Reader_details_insert(int SCHEDULERDETAILS_SCHEDULERID, int SCHEDULERDETAILS_STATIONID, string SCHEDULERDETAILS_Type, string SCHEDULERDETAILS_Time, string SCHEDULERDETAILS_PassengerIDs)
    {
        //@SCHEDULERDETAILS_SCHEDULERID,@SCHEDULERDETAILS_STATIONID,@SCHEDULERDETAILS_Type,@SCHEDULERDETAILS_Time,@SCHEDULERDETAILS_PassengerIDs
        string CONNPROD6 = BLL.Decrypt(ConfigurationManager.ConnectionStrings["PROD6"].ToString());
        bool b = Dal.ExecuteNonQueryDB("EXEC SP_BUSSCHEDULER @OPERATION='INSERT_SCHEDULER_DETAILS', @SCHEDULERDETAILS_SCHEDULERID=" + SCHEDULERDETAILS_SCHEDULERID + ",@SCHEDULERDETAILS_STATIONID=" + SCHEDULERDETAILS_STATIONID + ",@SCHEDULERDETAILS_Type='" + SCHEDULERDETAILS_Type + "',@SCHEDULERDETAILS_Time='" + SCHEDULERDETAILS_Time + "',@SCHEDULERDETAILS_PassengerIDs='" + SCHEDULERDETAILS_PassengerIDs + "'", CONNPROD6);

        return b;

    }
    public static DataTable check_order_expiry(int deviceID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_DEVICE_ORDERS @operation='check_expiry',@DeviceID='" + deviceID + "'");
        return dt;
    }
    public static DataTable getWLPDetails(string DomainName)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("Exec USP_WLP_DOMAINS @operation='get_wlp_detials',@DomainName='"+ DomainName + "'");
        return dt;
    }

    //get Monthly KMS Report
    public static DataTable Get_Monthly_Report(int userid,int categid,string startdate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("Exec USP_SMVTS_24HOURS_MATRIX @USERID=" + userid + ",@present_date='" + startdate + "',@CATEGID='" + categid + "'");
        return dt;
    }
    //get Monthly KMS Report App
    public static DataTable Get_Monthly_Report_APP(int userid, int categid, string startdate,int DeviceId)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("Exec USP_SMVTS_24HOURS_MATRIX_APP @USERID=" + userid + ",@present_date='" + startdate + "',@CATEGID='" + categid + "',@DEVICE_ID="+ DeviceId + "");
        return dt;
    }


    public static bool InsertMahaMiningVehicles(int distributorId, int dealerId, int custId,int deviceId)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_MAHA_MINING @operation='insert',@DISTRIBUTOR_ID="+ distributorId + ",@DELAER_ID="+ dealerId + ",@CUST_ID="+ custId + ",@DEVICE_ID="+ deviceId + ",@STATUS=1");
        return status;
    }
    public static DataTable getMahaMiningVehiclesData(int distributorId,int dealerId)
    {
        DataTable dt = new DataTable();
        if(distributorId != 0 && dealerId != 0)
        {
             dt = Dal.ExecuteQuery_Prod("exec USP_MAHA_MINING @operation='select',@DISTRIBUTOR_ID=" + distributorId + ",@DELAER_ID=" + dealerId + "");
        }
        else if(distributorId != 0 && dealerId == 0)
        {
            dt = Dal.ExecuteQuery_Prod("exec USP_MAHA_MINING @operation='select',@DISTRIBUTOR_ID=" + distributorId + "");
        }
        return dt;
    }
    public static bool deleteAssociation(int id)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_MAHA_MINING @operation='delete',@ID=" + id + "");
        return status;
    }
    public static DataTable get_All_MiningVehicles()
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_MAHA_MINING @operation='select_for_autopush'");
        return dt;
    }
    public static DataTable get_Tripdata_for_Mining(int deviceid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_MAHA_MINING @operation='select_tripdata_autopush',@DEVICE_ID=" + deviceid + "");
        return dt;
    }
    public static bool insert_mining_log(int deviceid,string value1,string value2)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_MAHA_MINING @operation='insert_mining_log',@DEVICE_ID=" + deviceid + ",@value1='" + value1 + "',@value2='" + value2 + "'");
        return status;
    }
    public static bool Insert_RenewalData(SMVTS_DEVICE_RENEWALS obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_RENEWALS @operation='insert_renewal',@RENEW_TYPE='" + obj.RENEW_TYPE + "',@FITMENT_DATE='" + obj.FITMENT_DATE + "',@INSTALL_DATE='" + obj.INSTALL_DATE + "',@RENEWAL_DATE='" + obj.RENEWAL_DATE + "',@VEH_CHASSIS_NUMBER='" + obj.VEH_CHASSIS_NUMBER + "',@VEH_ENGINE_NUMBER='" + obj.VEH_ENGINE_NUMBER + "',@VEH_TYPE='" + obj.VEH_TYPE + "',@VEH_MAKER='" + obj.VEH_MAKER + "',@VEH_MODEL='" + obj.VEH_MODEL + "',@VEH_MODEL_YEAR='" + obj.VEH_MODEL_YEAR + "',@VEH_REG_DATE='" + obj.VEH_REG_DATE + "',@DEVICE_NAME='" + obj.DEVICE_NAME + "',@DEVICE_IMEI='" + obj.DEVICE_IMEI + "',@SIM_NUMBER='" + obj.SIM_NUMBER + "',@SIM_OPERATOR='" + obj.SIM_OPERATOR + "',@CUSTOMER_NAME='" + obj.CUSTOMER_NAME + "',@CUSTOMER_MOBILE='" + obj.CUSTOMER_MOBILE + "',@CUSTOMER_ADDRESS='" + obj.CUSTOMER_ADDRESS + "',@CUSTOMER_PINCODE='" + obj.CUSTOMER_PINCODE + "',@VEHICLE_IMAGE_URL='" + obj.VEHICLE_IMAGE_URL + "',@VEHICLE_RC_IMAGE='" + obj.VEHICLE_RC_IMAGE + "',@DEVICE_IMAGE_URL='" + obj.DEVICE_IMAGE_URL + "',@CREATEDBY='" + obj.CREATEDBY + "',@RENEWAL_CERTIFICATE='" + obj.RENEWAL_CERTIFICATE + "',@DIVISION='" + obj.DIVISION + "',@STATE='" + obj.STATE + "',@RENEW_DEVICEID='" + obj.RENEW_DEVICEID + "',@VEH_REGNUMBER='" + obj.VEH_REGNUMBER + "'");
        return status;
            
    }
    public static DataTable getAddress(string pincode)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_RENEWALS @operation='select_address',@pincode='" + pincode + "'");
        return dt;
    }
    public static DataTable getDivisions(int statsID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_RENEWALS @operation='select_division',@stateID=" + statsID + "");
        return dt;
    }
    public static DataTable getDateForCertificate(string deviceid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_RENEWALS  @operation='select_certificate',@RENEW_DEVICEID='" + deviceid + "'");
        return dt;
    }
    public static int UploadCustomers(SMVTS_CATEGORIES _obj_Smvts_Categories, string dbname, string categname, string FormIds, string ColumnIds, int RoleType, string password)
    {
        DataTable dt = new DataTable();
        bool status = false;
        string Query = "";
        int cust_id = 0;
        string PartQuery = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Upload_customers', @CATEG_NAME='" + _obj_Smvts_Categories.CATEG_NAME
                             + "', @CATEG_DESC ='" + _obj_Smvts_Categories.CATEG_DESC
                             + "', @CATEG_STATUS ='" + _obj_Smvts_Categories.CATEG_STATUS

                             + "', @CATEG_CATETYPE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID)
                             + "', @CATEG_CONTACTPERSON ='" + _obj_Smvts_Categories.CATEG_CONTACTPERSON
                             + "', @CATEG_MOBILENUMBER ='" + _obj_Smvts_Categories.CATEG_MOBILENUMBER
                             + "', @CATEG_TELEPHONE ='" + _obj_Smvts_Categories.CATEG_TELEPHONE
                             + "', @CATEG_FAX ='" + _obj_Smvts_Categories.CATEG_FAX

                             + "', @CATEG_WEBSITENAME ='" + _obj_Smvts_Categories.CATEG_WEBSITENAME
                             + "', @CATEG_EMAILID ='" + _obj_Smvts_Categories.CATEG_EMAILID
                             + "', @CATEG_ADDRESS ='" + _obj_Smvts_Categories.CATEG_ADDRESS

                             + "', @CATEG_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_COUNTRY_ID)
                             + "', @CATEG_STATE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATE_ID)
                             + "', @CATEG_CITY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CITY_ID)
                             + "', @CATEG_ZIPCODE ='" + _obj_Smvts_Categories.CATEG_ZIPCODE
                             + "', @CATEG_NOOFUSERS ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NOOFUSERS)

                             + "', @CATEG_CREATEDBY = " + Convert.ToString(_obj_Smvts_Categories.CREATEDBY)

                             + ", @CATEG_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Categories.LASTMDFBY)

                             + "', @CATEG_UOMSPEED ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMSPEED)
                             + "', @CATEG_UOMVOLUME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMVOLUME)
                             + "',@CATEG_DBNAME='" + Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME)
                             + "',@CATG_NOOFDEVICES='" + Convert.ToInt32(_obj_Smvts_Categories.CATG_NOOFDEVICES)
                              + "',@CATEG_REFER_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_REFER_ID)
                             + ",@CATEG_PRODNAME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PRODNAME)
                             + "',@CATEG_PACKAGE_ID='" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_PACKAGE_ID)
                             + "',@FormIds='" + FormIds + "',@ColumnIDS='" + ColumnIds + "',@RoleType=" + RoleType + ",@CATEG_WLP=" + _obj_Smvts_Categories.CATEG_WLP + ",@Logo_url='" + _obj_Smvts_Categories.Logo_Url + "',@user_password='" + password + "',@MIS_ID=" + _obj_Smvts_Categories.MIS_ID + "";

        Query = PartQuery + ",@CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) + "'";
        //Query=PartQuery      + "', @CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID)+"'";
        dbname = Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME);

        if (_obj_Smvts_Categories.CATEG_PARENT_ID == 1)
        {

            if (Dal.ExecuteNonQueryConfig(Query))
            {
                //if (dbname != "")
                {
                    if (Dal.ExecuteNonQueryPROD(Query))
                    {
                        status = true;
                    }
                    else
                    {
                        status = false;
                    }
                }
            }
            //dt = Dal.ExecuteConfig(Query);
            //if(dt.Rows.Count>0)
            //{
            //    dt = Dal.ExecuteQuery_Prod(Query);
            //}
        }

        else
        {
            dt = Dal.ExecuteQuery_Prod(Query);
            if (dt.Rows.Count > 0)
            {
                cust_id = Convert.ToInt32(dt.Rows[0][0]);
                string abc = "";
                abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "' ";
                //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                DataTable dt_categ = new DataTable();
                dt_categ = Dal.ExecuteConfig(abc);
                {
                    Query = PartQuery + ", @CATEG_PARENT_ID   ='" + dt_categ.Rows[0][0].ToString() + "'";
                }
                dt = Dal.ExecuteConfig(Query);
                if (dt.Rows.Count > 0)
                {
                    status = true;
                }
                else
                {
                    status = false;
                }
            }


            else
            {
                status = false;
            }
        }
        return cust_id;
    }

    public static int UploadCustomers_test(SMVTS_CATEGORIES _obj_Smvts_Categories, string dbname, string categname, string FormIds, string ColumnIds, int RoleType, string password)
    {
        DataTable dt = new DataTable();
        bool status = false;
        string Query = "";
        int cust_id = 0;
        string PartQuery = "EXEC USP_SMVTS_CATEGORIES @Operation = 'Upload_customers', @CATEG_NAME='" + _obj_Smvts_Categories.CATEG_NAME
                             + "', @CATEG_DESC ='" + _obj_Smvts_Categories.CATEG_DESC
                             + "', @CATEG_STATUS ='" + _obj_Smvts_Categories.CATEG_STATUS

                             + "', @CATEG_CATETYPE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CATETYPE_ID)
                             + "', @CATEG_CONTACTPERSON ='" + _obj_Smvts_Categories.CATEG_CONTACTPERSON
                             + "', @CATEG_MOBILENUMBER ='" + _obj_Smvts_Categories.CATEG_MOBILENUMBER
                             + "', @CATEG_TELEPHONE ='" + _obj_Smvts_Categories.CATEG_TELEPHONE
                             + "', @CATEG_FAX ='" + _obj_Smvts_Categories.CATEG_FAX

                             + "', @CATEG_WEBSITENAME ='" + _obj_Smvts_Categories.CATEG_WEBSITENAME
                             + "', @CATEG_EMAILID ='" + _obj_Smvts_Categories.CATEG_EMAILID
                             + "', @CATEG_ADDRESS ='" + _obj_Smvts_Categories.CATEG_ADDRESS

                             + "', @CATEG_COUNTRY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_COUNTRY_ID)
                             + "', @CATEG_STATE_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_STATE_ID)
                             + "', @CATEG_CITY_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_CITY_ID)
                             + "', @CATEG_ZIPCODE ='" + _obj_Smvts_Categories.CATEG_ZIPCODE
                             + "', @CATEG_NOOFUSERS ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_NOOFUSERS)

                             + "', @CATEG_CREATEDBY = " + Convert.ToString(_obj_Smvts_Categories.CREATEDBY)

                             + ", @CATEG_MODIFIEDBY ='" + Convert.ToString(_obj_Smvts_Categories.LASTMDFBY)

                             + "', @CATEG_UOMSPEED ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMSPEED)
                             + "', @CATEG_UOMVOLUME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_UOMVOLUME)
                             + "',@CATEG_DBNAME='" + Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME)
                             + "',@CATG_NOOFDEVICES='" + Convert.ToInt32(_obj_Smvts_Categories.CATG_NOOFDEVICES)
                              + "',@CATEG_REFER_ID=" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_REFER_ID)
                             + ",@CATEG_PRODNAME ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PRODNAME)
                             + "',@CATEG_PACKAGE_ID='" + Convert.ToInt32(_obj_Smvts_Categories.CATEG_PACKAGE_ID)
                             + "',@FormIds='" + FormIds + "',@ColumnIDS='" + ColumnIds + "',@RoleType=" + RoleType + ",@CATEG_WLP=" + _obj_Smvts_Categories.CATEG_WLP + ",@Logo_url='" + _obj_Smvts_Categories.Logo_Url + "',@CATEG_VALID_TO='" + _obj_Smvts_Categories.CATEG_VALID_TO + "',@user_password='" + password + "',@MIS_ID=" + _obj_Smvts_Categories.MIS_ID + "";

        Query = PartQuery + ",@CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID) + "'";
        //Query=PartQuery      + "', @CATEG_PARENT_ID ='" + Convert.ToString(_obj_Smvts_Categories.CATEG_PARENT_ID)+"'";
        dbname = Convert.ToString(_obj_Smvts_Categories.CATEG_DBNAME);

        if (_obj_Smvts_Categories.CATEG_PARENT_ID == 1)
        {

            if (Dal.ExecuteNonQueryTest(Query))
            {
                //if (dbname != "")
                {
                    if (Dal.ExecuteNonQuery_prod_test(Query))
                    {
                        status = true;
                    }
                    else
                    {
                        status = false;
                    }
                }
            }
            //dt = Dal.ExecuteConfig(Query);
            //if(dt.Rows.Count>0)
            //{
            //    dt = Dal.ExecuteQuery_Prod(Query);
            //}
        }

        else
        {
            dt = Dal.ExecuteQuery_Prod_for_Test(Query);
            if (dt.Rows.Count > 0)
            {
                cust_id = Convert.ToInt32(dt.Rows[0][0]);
                string abc = "";
                abc = "SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "' ";
                //abc = "SELECT * FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME=categname, and CATEG_DBNAME=dbname";
                DataTable dt_categ = new DataTable();
                dt_categ = Dal.ExecuteQueryTest(abc);
                {
                    Query = PartQuery + ", @CATEG_PARENT_ID   ='" + dt_categ.Rows[0][0].ToString() + "'";
                }
                dt = Dal.ExecuteQueryTest(Query);
                if (dt.Rows.Count > 0)
                {
                    status = true;
                }
                else
                {
                    status = false;
                }
            }


            else
            {
                status = false;
            }
        }
        return cust_id;
    }

    //public static DataTable GetDataByCustomerName(string cust_name)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select C.CATEG_ID,USERS_ID,USERS_USERNAME,USERS_PASSWORD,c.CATEG_NAME as CUSTOMER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID where CATEG_NAME like '%" + cust_name + "%' and CATEG_CATETYPE_ID = 3 order by CATEG_NAME asc");
    //    return dt;
    //}
    //public static DataTable GetDataByIMEI(string imei)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID,USERS_USERNAME,USERS_PASSWORD,c.CATEG_NAME as CUSTOMER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER  From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID where d.DEVICE_SERIALNUMBER LIKE  '%" + imei + "%'");
    //    return dt;
    //}
    //public static DataTable GetDataByVehicleNo(string VehicleNo)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID,USERS_USERNAME,USERS_PASSWORD,c.CATEG_NAME as CUSTOMER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER  From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID where v.VEHICLES_REGNUMBER like '%" + VehicleNo + "%'");
    //    return dt;
    //}
    public static DataTable GetDeviceTokens(string userId)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select * from SMVTS_DEVICE_TOKENS where user_id=" + userId + "");
        return dt;
    }
    public static bool InsertTokens(string Userid,string token)
    {
        DateTime date = DateTime.Now;
        bool status = Dal.ExecuteNonQueryPROD("Insert into SMVTS_DEVICE_TOKENS(USER_ID,DEVICE_TOKEN,CREATEDDATE,STATUS)values(" + Userid + ",'" + token + "','" + date + "',1)");
        return status;
    }
    public static bool checkTokens(string Userid, string token)
    {
        DataTable dt = GetDeviceTokens(Userid);
        DateTime date = DateTime.Now;
        bool status = false;
        bool found = false;
        if(dt.Rows.Count>0)
        {
            string[] tokens = dt.Rows[0]["DEVICE_TOKEN"].ToString().Split(',');
            if(tokens.Length>0)
            {
                for(int i=0;i<tokens.Length;i++)
                {
                    if(tokens[i]==token)
                    {
                        found = true;
                        break;
                    }
                    else
                    {
                        found = false;
                    }
                }
            }
            if(found==false)
            {
                string updtoken = dt.Rows[0]["DEVICE_TOKEN"].ToString() + "," + token;
                status = Dal.ExecuteNonQueryPROD("update SMVTS_DEVICE_TOKENS set DEVICE_TOKEN='" + updtoken + "',MODIFIEDDATE='" + date + "' where USER_ID=" + Userid + "");
            }
            
        }
        else
        {
             status = InsertTokens(Userid, token);
        }
        return status;
    }
    public static DataTable getVehiclesForAPP(string userid)
    {
        DataTable dt = Dal.ExecutePRODDB("select v.VEHICLES_REGNUMBER AS VNO,vm.VEHLEMM_NAME AS VehicleType,d.DRIVER_NAME as DriverName,d.DRIVER_MOBILENO as Driver_Mobile,VEHICLES_DEVICE_ID from SMVTS_VEHICLES v inner join  SMVTS_CATEGORIES c on v.VEHICLES_CATEGORY_ID = c.CATEG_ID inner join smvts_users u on c.CATEG_ID = u.USERS_CATEGORY_ID inner join smvts_drivers d on v.VEHICLES_DRIVER_ID = d.DRIVER_ID inner join smvts_vehiclemodels vm on v.VEHICLES_VEHICLEMAKEMODEL_ID = vm.VEHLEMM_ID   where u.users_id = " + userid + "");
        return dt;
    }
    public static DataTable getSIMSByCategory(int categ_id, int simid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_SIM_CHANGE @CATEG_ID=" + categ_id + ",@SIM_ID=" + simid + "");
        return dt;
    }
    public static DataTable Ignition_Report_APP(int usersid,int DeviceID,string startdate,string enddate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec RPT_USP_IGNITION_DURATION @USERID=" + usersid + ",@DEVICEID=" + DeviceID + ",@STARTDATE='" + startdate + "',@ENDDATE='" + enddate + "'");
        return dt;
    }
    public static DataTable getCustomersforDeviceShift()
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_DEVICE_SHIFT  @OPERATION='get_customers'");
        return dt;
    }
    public static DataTable get_shift_device_details(int deviceid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_DEVICE_SHIFT @OPERATION='GET_DEVICE',@DEVICE_ID=" + deviceid + "");
        return dt;
    }
    public static bool shift_device(int categid, int deviceid,string categname,string DealerName)
    {
        bool status = Dal.ExecuteNonQueryConfig("exec USP_DEVICE_SHIFT @operation='SHIFT_DEVICE',@CategID=" + categid + ",@DEVICE_ID=" + deviceid + "");
        if(status==true)
        {
            string CategQuery = " SELECT CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + categname.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "' AND CATEG_PARENT_ID=(select CATEG_ID FROM SMVTS_CATEGORIES(NOLOCK) WHERE CATEG_NAME='" + DealerName.Replace("(C)", "").Trim().Replace("(P)", "").Replace("(O)", "").Replace("(SWLP)", "").Replace("(WLP)", "") + "')";


            DataTable dt_categ = new DataTable();
            dt_categ = Dal.ExecuteQuery_Prod(CategQuery);
            int categ_id = Convert.ToInt32(dt_categ.Rows[0][0].ToString());
            bool status2 = Dal.ExecuteNonQueryPROD("exec USP_DEVICE_SHIFT @operation='SHIFT_DEVICE',@CategID=" + categ_id + ",@DEVICE_ID=" + deviceid + "");
        }
        return status;
    }
    public static DataTable getNotificationsByUser(int userid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec [USP_SMVTS_NOTIFICATIONS] @Operation='SelectUserID',@NOTIFICATION_USERID=" + userid + "");
        return dt;
    }
    public static DataTable getNotificationsByVehicle(int userid,int DeviceId)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec [USP_SMVTS_NOTIFICATIONS] @Operation='SelectDeviceID',@NOTIFICATION_USERID=" + userid + ",@NOTIFICATION_DEVICEID="+ DeviceId + "");
        return dt;
    }
    //public static DataTable GetDataByCustomerName(string cust_name)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,O.ORDER_STARTDATE,O.ORDER_EXPDATE From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID where CATEG_NAME like '%" + cust_name + "%' and CATEG_CATETYPE_ID = 3 order by CATEG_NAME asc");
    //    return dt;
    //}
    //public static DataTable GetDataByIMEI(string imei)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,O.ORDER_STARTDATE,O.ORDER_EXPDATE From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID where d.DEVICE_SERIALNUMBER LIKE  '%" + imei + "%'");
    //    return dt;
    //}
    //public static DataTable GetDataByVehicleNo(string VehicleNo)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,O.ORDER_STARTDATE,O.ORDER_EXPDATE From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID where v.VEHICLES_REGNUMBER like '%" + VehicleNo + "%'");
    //    return dt;
    //}
    //public static DataTable GetDataByMobileNo(string MobileNo)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,O.ORDER_STARTDATE,O.ORDER_EXPDATE From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID  where CATEG_MOBILENUMBER LIKE '%" + MobileNo + "%'");
    //    return dt;
    //}
    //public static DataTable GetDataByCustomerName(string cust_name)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD,c.CATEG_ID ,c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_ID,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,s.SIM_OPERATORNAME,s.verified,O.ORDER_STARTDATE,O.ORDER_EXPDATE,dv.VEHMODELIMAGES_IMAGEURL From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID LEFT JOIN SMVTS_DASHBOARD_VIEW dv ON dv.DEVICEID = d.DEVICE_ID where CATEG_NAME like '%" + cust_name + "%' and CATEG_CATETYPE_ID = 3 order by CATEG_NAME asc");
    //    return dt;
    //}
    //public static DataTable GetDataByIMEI(string imei)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_ID,c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_ID,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,s.SIM_OPERATORNAME,s.verified,O.ORDER_STARTDATE,O.ORDER_EXPDATE,dv.VEHMODELIMAGES_IMAGEURL From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID LEFT JOIN SMVTS_DASHBOARD_VIEW dv ON dv.DEVICEID=d.DEVICE_ID  where d.DEVICE_SERIALNUMBER LIKE  '%" + imei + "%' and O.ORDER_STATUS=0");
    //    return dt;
    //}
    //public static DataTable GetDataByVehicleNo(string VehicleNo)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_ID,c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_ID,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,s.SIM_OPERATORNAME,s.verified,O.ORDER_STARTDATE,O.ORDER_EXPDATE,dv.VEHMODELIMAGES_IMAGEURL From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID LEFT JOIN SMVTS_DASHBOARD_VIEW dv ON dv.DEVICEID=d.DEVICE_ID   where v.VEHICLES_REGNUMBER like '%" + VehicleNo + "%' and O.ORDER_STATUS=0");

    //    return dt;
    //}
    //public static DataTable GetDataByMobileNo(string MobileNo)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_ID,c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_ID,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,s.SIM_OPERATORNAME,s.verified,O.ORDER_STARTDATE,O.ORDER_EXPDATE,dv.VEHMODELIMAGES_IMAGEURL From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID LEFT JOIN SMVTS_DASHBOARD_VIEW dv ON dv.DEVICEID=d.DEVICE_ID  where CATEG_MOBILENUMBER LIKE '%" + MobileNo + "%' and O.ORDER_STATUS=0");
    //    return dt;
    //}
    //public static DataTable GetDataBySimNumber(String SimNumber)
    //{
    //    DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_ID,c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_ID,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,s.SIM_OPERATORNAME,s.verified,O.ORDER_STARTDATE,O.ORDER_EXPDATE,dv.VEHMODELIMAGES_IMAGEURL From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID LEFT JOIN SMVTS_DASHBOARD_VIEW dv ON dv.DEVICEID=d.DEVICE_ID   where s.SIM_NUMBER LIKE '%" + SimNumber + "%' and O.ORDER_STATUS=0");
    //    return dt;
    //}
    public static DataTable GetDataByCustomerName(string cust_name)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec RPT_USP_SEARCH @Operation ='SEARCH_BY_USERNAME',@CATEG_NAME ='" + cust_name + "'");
        return dt;
    }

    public static bool Update_otp(string orderid, string strrandom)
    {
        bool dt = Dal.ExecuteNonQuery_prod("Update SMVTS_ORDERS SET OTP = '" + strrandom + "' where ORDER_ID = '" + orderid + "' ");
        return dt;
    }
    public static bool UpdatingEndDate(string orderid, searchdata obj)
    {
        string Ordermdfd = DateTime.Now.ToString("yyyy-MM-dd");
        string startdate = DateTime.Now.ToString("yyyy-MM-dd");
        bool dt = Dal.ExecuteNonQuery_prod("Update SMVTS_ORDERS SET ORDER_EXPDATE = '" + obj.EndDate + "', ORDER_MODIFIEDDATE='" + Ordermdfd + "', ORDER_STARTDATE='" + startdate + "' where OTP = '" + obj.OTP + "' and ORDER_ID = '" + orderid + "'");
       // bool dt = Dal.ExecuteNonQuery_prod("Update SMVTS_ORDERS SET OTP = '" + obj.OTP + "',ORDER_EXPDATE = '" + obj.EndDate + "' where ORDER_ID = '" + orderid + "'");
        return dt;
    }
    public static DataTable GetDataByIMEI(string imei)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation ='SEARCH_BY_IMEI',@DEVICE_SERIALNUMBER='" + imei + "'");

        return dt;
    }
    public static DataTable GetDataByVehicleNo(string VehicleNo)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='SEARCH_BY_VEHICLENO',@VEHICLES_REGNUMBER='" + VehicleNo + "'");

        return dt;
    }
    public static DataTable GetDataByMobileNo(string MobileNo)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='SEARCH_BY_MOBILENO',@CATEG_MOBILENUMBER='" + MobileNo + "'");
        return dt;
    }
    public static DataTable GetDataBySimNumber(String SimNumber)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='SEARCH_BY_SIMNO',@SIM_SERIALNO='" + SimNumber + "'");
        return dt;
    }
    public static DataTable GetDataByDLRName(string cust_name, int categID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='DLR_SEARCH_BY_USERNAME',@CATEG_NAME='" + cust_name + "',@CATEG_ID='" + categID + "'");
        return dt;
    }

    public static DataTable GetDataByDLRIMEI(string imei, int categID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='DLR_SEARCH_BY_IMEI',@DEVICE_SERIALNUMBER='" + imei + "',@CATEG_ID='" + categID + "'");
        return dt;
    }
    public static DataTable GetDataByDLRMobileNo(string MobileNo, int categID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='DLR_SEARCH_BY_MOBILENO',@CATEG_MOBILENUMBER='" + MobileNo + "',@CATEG_ID='" + categID + "'");
        return dt;
    }
    public static DataTable GetDataByDLRSimNumber(String SimNumber, int categID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='DLR_SEARCH_BY_SIMNO',@SIM_SERIALNO='" + SimNumber + "',@CATEG_ID='" + categID + "'");
        return dt;
    }
    public static DataTable GetDataByDLRVehicleNo(string VehicleNo, int categID)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC RPT_USP_SEARCH @Operation='DLR_SEARCH_BY_VEHICLENO',@VEHICLES_REGNUMBER='" + VehicleNo + "',@CATEG_ID='" + categID + "'");
        return dt;
    }

    internal static DataTable GET_IGNITION(int USERID, string deviceid, string startdate, string Enddate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec RPT_USP_ignition_duration @USERID=" + USERID + ",@DEVICEID =" + deviceid + ",@STARTDATE  = '" + startdate + "',@ENDDATE = '" + Enddate + "'");
        return dt;
    }
    public  static DataTable getIOSkey(string key)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select KEY_VALUE from smvts_ios_app where KEY_VALUE='" + key + "'");
        return dt;
    }
    public static DataTable get_DailyreportForApp(int usesrid,int device_id,string startdate,string enddate)
    {
        //DataTable dt = Dal.ExecuteQuery_Prod("select HR24_VEHICLES_REGNUMBER AS VEHICLE_REGNUMBER,CONVERT(VARCHAR, SUM((CONVERT(INT, HR24_TOTALRUNNINGTIME))) / 60) + ':' + CONVERT(VARCHAR, SUM((CONVERT(INT, HR24_TOTALRUNNINGTIME))) % 60) + ':00' AS TOTAL_RUNNING_TIME,sum(convert(int, HR24_ACTUALKMS)) AS TOTAL_DISTANCE,sum(convert(int, HR24_IDLEKMS)) AS TOTAL_IDLE_KMS, min(HR24_STARTLOCATION) AS START_LOCATION,min(HR24_ENDLOCATION) AS END_LOCATION,SUM(HR24_AVERAGE_RUNNING_SPEED) AS AVG_RUNNING_SPEED,SUM(HR24_AVERAGE_SPEED) AS AVG_SPEED,CONVERT(VARCHAR, SUM((CONVERT(INT, HR24_TOTALSTOPTIME))) / 60) + ':' + CONVERT(VARCHAR, SUM((CONVERT(INT, HR24_TOTALSTOPTIME))) % 60) + ':00' AS TOTAL_STOP_TIME From SMVTS_24HOURANALYSIS inner join SMVTS_DEVICES d ON d.DEVICE_ID = hr24_deviceid inner join smvts_categories c on c.categ_id = d.DEVICE_CATEGORY_ID inner join smvts_users u on u.USERS_CATEGORY_ID = c.categ_id  where HR24_DATE between '" + startdate + "' and '" + enddate + "' and hr24_deviceid = " + device_id + " and u.USERS_ID = " + usesrid + " group by HR24_VEHICLES_REGNUMBER");
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_Monthly_Report @operation='daily_report',@userid='" + usesrid + "',@deviceid='" + device_id + "',@startdate='" + startdate + "',@enddate='" + enddate + "'");
        return dt;
    }
    internal static DataTable get_trip_history(int deviceid,string fromdate,string todate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select DISTINCT Max(t.TRIPDATA_LATITUDE) as Lattitude,max(t.TRIPDATA_LONGITUDE) as Longitude,max(t.TRIPDATA_SPEED) as Speed,max(t.TRIPDATA_TRIPDATE) as Date ,min(l.LANDMARKS_ADDRESS) as Address FRom smvts_tripdata t inner join smvts_landmarks l on t.tripdata_landmarks_id=l.LANDMARKS_ID where tripdata_device_id=" + deviceid + " and tripdata_tripdate between '" + fromdate + "' and '" + todate + "' and tripdata_speed>0 GROUP BY TRIPDATA_LATITUDE");
        return dt;
    }

    //get Monthly KMS Report App
    public static DataTable Get_Monthly_Report_APP_New(int userid, int categid, string startdate, int DeviceId)
    {
        //DataTable dt = Dal.ExecuteQuery_Prod("SELECT HR24_VEHICLES_REGNUMBER as VEHICLENO,M.VEHLEMM_NAME as VEHICLE_TYPE,convert(varchar,convert(date,HR24_DATE,100),0)  AS Date,HR24_ACTUALKMS as DistanceTravelled,HR24_STARTLOCATION as StartLocation,HR24_ENDLOCATION as EndLocation  FROM SMVTS_24HOURANALYSIS(NOLOCK) A INNER JOIN SMVTS_DEVICES B ON A.HR24_DEVICEID = B.DEVICE_ID INNER JOIN SMVTS_VEHICLES V ON V.VEHICLES_DEVICE_ID = B.DEVICE_ID INNER JOIN SMVTS_VEHICLEMODELS M ON V.VEHICLES_VEHICLEMAKEMODEL_ID = M.VEHLEMM_ID where HR24_DATE >= convert(date, CONVERT(VARCHAR(25), DATEADD(dd, -(DAY('"+ startdate + "') - 1), '"+ startdate + "'), 101)) and HR24_DATE <= '"+ startdate + "' AND A.HR24_DEVICEID = "+ DeviceId + "");
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_Monthly_Report @operation='monthly_report',@userid='" + userid + "',@deviceid='" + DeviceId + "',@startdate='" + startdate + "'");
        return dt;
    }
    //get Distance KMS Report Day wise App
    public static DataTable Get_Distance_Report_APP_New(int userid, int categid, string startdate, string Enddate,int DeviceId)
    {
        //DataTable dt = Dal.ExecuteQuery_Prod("SELECT HR24_VEHICLES_REGNUMBER as VEHICLENO,M.VEHLEMM_NAME as VEHICLE_TYPE,convert(varchar,convert(date,HR24_DATE,100),0)  AS Date,HR24_ACTUALKMS as DistanceTravelled,HR24_STARTLOCATION as StartLocation,HR24_ENDLOCATION as EndLocation  FROM SMVTS_24HOURANALYSIS(NOLOCK) A INNER JOIN SMVTS_DEVICES B ON A.HR24_DEVICEID = B.DEVICE_ID INNER JOIN SMVTS_VEHICLES V ON V.VEHICLES_DEVICE_ID = B.DEVICE_ID INNER JOIN SMVTS_VEHICLEMODELS M ON V.VEHICLES_VEHICLEMAKEMODEL_ID = M.VEHLEMM_ID where HR24_DATE >= '"+ startdate + "' and HR24_DATE <= '"+ Enddate + "' AND A.HR24_DEVICEID = " + DeviceId + "");
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_Monthly_Report @operation='distance_report',@userid='" + userid + "',@deviceid='" + DeviceId + "',@startdate='" + startdate + "',@enddate='" + Enddate + "'");
        return dt;
    }
    public static bool Update_Odissa_mining(int Users_id, string User_devices)
    {
        bool status = Dal.ExecuteNonQueryPROD("Update SMVTS_USERS Set USERS_DEVICE_IDS='" + User_devices + "'  where Users_id=" + Users_id + "");
        return status;
    }
    public static bool StartTrip(int userid,int categid,int deviceid)
    {
        bool status = Dal.ExecuteNonQueryPROD("Exec USP_SMVTS_TRIP_ENABLE @operation='START_TRIP',@USER_ID=" + userid + ",@CATEG_ID=" + categid + ",@DEVICE_ID=" + deviceid + "");
        return status;
    }
    public static DataTable getStartTrip(int categid,int deviceid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_SMVTS_TRIP_ENABLE @operation='Select_Start_Trip',@CATEG_ID=" + categid + ",@DEVICE_ID=" + deviceid + "");
        return dt;
    }
    public static bool EndTrip(int userid, int categid, int deviceid)
    {
        bool status = Dal.ExecuteNonQueryPROD("Exec USP_SMVTS_TRIP_ENABLE @operation='END_TRIP',@USER_ID=" + userid + ",@CATEG_ID=" + categid + ",@DEVICE_ID=" + deviceid + "");
        return status;
    }
    public static DataTable getMessagesByCustomer(int userid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select MESSAGE,convert(varchar,convert(datetime,CREATEDDATE,100),0) as MsgDate,MESSAGE_TYPE,USERS_ID from SMVTS_BROADCASTING where USERS_ID=" + userid + "");
        return dt;
    }
    public static DataTable getAllInstallations()
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,CONVERT(varchar,convert(datetime,O.ORDER_STARTDATE,100),0) as STARTDATE,convert(varchar,convert(datetime,O.ORDER_EXPDATE,100),0) as EXPDATE From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID where O.ORDER_EXPDATE > GETDATE() ORDER BY CATEG_NAME ASC");
        return dt;
    }
    public static DataTable getExpiredInstallations()
    {
        //DataTable dt = Dal.ExecuteQuery_Prod("select USERS_ID, USERS_USERNAME, USERS_PASSWORD, c.CATEG_NAME as CUSTOMER_NAME, C.CATEG_MOBILENUMBER, (select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as PARENT_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,CONVERT(varchar,convert(datetime,O.ORDER_STARTDATE,100),0) as STARTDATE,convert(varchar,convert(datetime,O.ORDER_EXPDATE,100),0) as EXPDATE From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID where O.ORDER_EXPDATE < GETDATE() ORDER BY CATEG_NAME ASC");
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_EXP_INSTALLATIONS @operation='getAllExpired'");
        return dt;
    }
    public static DataTable getTripReport(int categid, int deviceid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("EXEC USP_SMVTS_TRIP_ENABLE @OPERATION = 'select_trip_report', @DEVICE_ID = "+ deviceid + ", @CATEG_ID = "+ categid + "");
        return dt;
    }
    public static bool Insert_Broadcasting(int CATEG_ID, int USERS_ID, string MESSAGE)
    {
        bool status = Dal.ExecuteNonQueryPROD("insert into smvts_broadcasting(CATEG_ID,USERS_ID,MESSAGE,CREATEDDATE)values('" + CATEG_ID + "','" + USERS_ID + "','" + MESSAGE + "','" + DateTime.Now + "')");
        return status;
    }
    public static DataTable Get_Expiry_data(string StartDate, string EndDate)
    {
        //DataTable dt = Dal.ExecuteQuery_Prod("select(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = (select CATEG_PARENT_ID from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID))as DISTRIBUTOR_NAME,(select CATEG_NAME from SMVTS_CATEGORIES where CATEG_ID = c.CATEG_PARENT_ID) as DEALER_NAME,c.CATEG_NAME as CUSTOMER_NAME,v.VEHICLES_REGNUMBER,d.DEVICE_NAME,d.DEVICE_SERIALNUMBER,s.SIM_NUMBER,O.ORDER_STARTDATE,O.ORDER_EXPDATE From SMVTS_USERS u inner join SMVTS_CATEGORIES c on u.USERS_CATEGORY_ID = c.CATEG_ID inner join SMVTS_DEVICES d on d.DEVICE_CATEGORY_ID = c.CATEG_ID inner join SMVTS_VEHICLES v on v.VEHICLES_DEVICE_ID = d.DEVICE_ID inner join smvts_sims s on s.SIM_ID = d.DEVICE_SIM_ID INNER JOIN SMVTS_ORDERS O ON O.DEVICE_ID = d.DEVICE_ID where o.ORDER_EXPDATE between '" + StartDate + "' and '" + EndDate + "'");
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_EXP_INSTALLATIONS @operation='get_expiredbydates',@startdate='" + StartDate + "',@enddate='" + EndDate + "'");
        return dt;
    }
    public static bool SaveMisPackages(string packagename,string price,string gst,string days,string code)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select * from smvts_mis_packages where PACKAGE_CODE='" + code + "'");
        decimal packageprice = Convert.ToDecimal(price);
        decimal gstprice = Convert.ToDecimal(gst);
        bool status = false;
        if (dt.Rows.Count>0)
        {
            status = Dal.ExecuteNonQueryPROD("update smvts_mis_packages set PACKAGE_NAME ='" + packagename + "', PACKAGE_PRICE ='" + packageprice + "', NUM_OF_DAYS='" + days + "',GST='" + gstprice + "',MODIFIEDDATE='" + DateTime.Now.ToString() + "'  where  PACKAGE_CODE='" + code + "'");
           
        }
        else
        {
             status = Dal.ExecuteNonQueryPROD("insert into smvts_mis_packages(PACKAGE_NAME,PACKAGE_PRICE,NUM_OF_DAYS,PACKAGE_CODE,CREATEDATE,GST)values('" + packagename + "','" + packageprice + "','" + days + "','" + code + "','" + DateTime.Now.ToString() + "','"+ gstprice + "')");
        }
        return status;
    }
    public static DataTable getNotificationsByDate(int userid,string startdate,string enddate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec [USP_SMVTS_NOTIFICATIONS] @Operation='select_bydate',@NOTIFICATION_USERID=" + userid + ",@startdate='" + startdate + "',@enddate='" + enddate + "'");
        return dt;
    }
    public static bool insert_newSIM(string simnumber,string simoperator,string remarks,string deviceid,string categid)
    {
        bool status = false;
         status = Dal.ExecuteNonQueryPROD("exec [USP_SMVTS_SIMS] @Operation='insert_newSIM',@SIM_CATEGORY_ID=" + categid + ",@SIM_OPERATORNAME='" + simoperator + "',@SIM_NUMBER='" + simnumber + "',@remarks='" + remarks + "',@deviceid=" + deviceid + "");
        if(status==true)
        {
             status = Dal.ExecuteNonQueryConfig("exec[USP_SMVTS_SIMS] @Operation = 'insert_newSIM', @SIM_CATEGORY_ID = " + categid + ", @SIM_OPERATORNAME = '" + simoperator + "', @SIM_NUMBER = '" + simnumber + "', @remarks = '" + remarks + "', @deviceid = " + deviceid + "");
            
        }
        return status;
    }
    public static bool changeSIM(string newsimnumber, string simoperator, string remarks, string deviceid, string categid,string oldSimNumber)
    {
        bool status = false;
        status = Dal.ExecuteNonQueryPROD("update SMVTS_SIMS  set SIM_NUMBER='"+ newsimnumber + "',verified=1 where  SIM_ID=(select DEVICE_SIM_ID from smvts_devices where DEVICE_ID=" + deviceid + ") ");
        if (status == true)
        {
            status = Dal.ExecuteNonQueryConfig("update SMVTS_SIMS  set SIM_NUMBER = '"+ newsimnumber + "',verified=1  where SIM_ID=(select DEVICE_SIM_ID from smvts_devices where DEVICE_ID=" + deviceid + ")");

        }
        return status;
    }
    public static DataTable getAcReport(int USERID, string deviceid, string startdate, string Enddate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_AC_REPORT @USER_ID=" + USERID + ",@DEVICE_ID =" + deviceid + ",@START_DATE  = '" + startdate + "',@END_DATE = '" + Enddate + "'");
        return dt;
    }
    public static string updateDeviceAPI(int dealer_id,int cust_id,string new_imei_no,string old_imei_no,string devicetype)
    {
        string result = "";
        DataTable dt = Dal.ExecuteQuery_Prod("select * from smvts_devices where DEVICE_SERIALNUMBER='"+ old_imei_no + "' and  device_category_id=(select categ_id from SMVTS_CATEGORIES where MIS_ID=" + cust_id + ")");
        if(dt.Rows.Count>0)
        {
            bool status = Dal.ExecuteNonQueryPROD("update smvts_devices set DEVICE_SERIALNUMBER='" + new_imei_no + "' where device_id='" + dt.Rows[0]["device_id"].ToString() + "'");
            if(status==true)
            {
                result = "success";
                bool status1 = Dal.ExecuteNonQueryConfig("exec USP_DEVICE_SHIFT @operation='CHANGE_DEVICE',@DEVICE_ID='" + dt.Rows[0]["device_id"].ToString() + "',@NEWIMEI='" + new_imei_no + "',@OLDIMEI='" + old_imei_no + "',@DEVICE_TYPE='" + devicetype + "'");
              //  bool status4=  Dal.ExecuteNonQueryConfig("update smvts_devices set DEVICE_SERIALNUMBER='" + new_imei_no + "' where device_id='" + dt.Rows[0]["device_id"].ToString() + "'");
               // bool status2 = Dal.ExecuteNonQueryPROD("update smvts_tt_devid set IMEI='" + new_imei_no + "' WHERE DEVICEID='" + dt.Rows[0]["device_id"].ToString() + "'");
                bool status3 = Dal.ExecuteNonQuerytc("update tc_Devices set uniqueid='" + new_imei_no + "' where uniqueid='" + old_imei_no + "'");
            }
            else
            {
                result = "failed";
            }
        }
        else
        {
            result = "No Device Found";
        }
        return result;
    }
   //internal static bool verifysim(string simnumber,string operatorname,string serialnumber)
   // {
   //     bool status = Dal.ExecuteNonQueryPROD("update smvts_sims set SIM_OPERATORNAME='" + operatorname + "',SIM_SERIALNO='" + serialnumber + "',verified=1 where SIM_NUMBER='" + simnumber + "'");
   //     if(status==true)
   //     {
   //         status=Dal.ExecuteNonQueryConfig("update smvts_sims set SIM_OPERATORNAME='" + operatorname + "',SIM_SERIALNO='" + serialnumber + "',verified=1 where SIM_NUMBER='" + simnumber + "'");
   //     }
   //     return status;
   // }
    internal static bool verifysim(string simnumber, string dealerId,int simId,string customername)
    {
        bool status1 = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='install_sim',@dealer_id='" + dealerId + "',@customer_name='" + customername + "',@sim_id='"+ simId + "'");
        if(status1==true)
        {
            bool status = Dal.ExecuteNonQueryPROD("update smvts_sims set verified=1 where SIM_NUMBER='" + simnumber + "'");
            if (status == true)
            {
                status = Dal.ExecuteNonQueryConfig("update smvts_sims set  verified=1 where SIM_NUMBER='" + simnumber + "'");
            }
        }
       
        return status1;
    }
    public static string updateIMEI(string oldIMEI, string NEW_IMEI, string devicetype, string Reason, string deviceid, string categid)
    {
        string result = "";
        DataTable dt = Dal.ExecuteQuery_Prod("select * from smvts_devices where DEVICE_SERIALNUMBER='" + oldIMEI + "' and  Device_id='" + deviceid + "'");
        if (dt.Rows.Count > 0)
        {
            bool status = Dal.ExecuteNonQueryPROD("update smvts_devices set DEVICE_SERIALNUMBER='" + NEW_IMEI + "',DEVICE_NAME='" + devicetype + "' where device_id='" + deviceid + "'");
            if (status == true)
            {
                result = "success";
                bool status1 = Dal.ExecuteNonQueryConfig("exec USP_DEVICE_SHIFT @operation='CHANGE_DEVICE',@DEVICE_ID=" + deviceid + ",@NEWIMEI='" + NEW_IMEI + "',@OLDIMEI='" + oldIMEI + "',@DEVICE_TYPE='" + devicetype + "'");
              
                //bool status4 = Dal.ExecuteNonQueryConfig("update smvts_devices set DEVICE_SERIALNUMBER='" + NEW_IMEI + "',DEVICE_NAME='" + devicetype + "' where device_id='" + deviceid + "'");
                //bool status2 = Dal.ExecuteNonQueryConfig("update smvts_tt_devid set IMEI='" + NEW_IMEI + "' WHERE DEVICEID='" + deviceid + "'");
               // bool status3 = Dal.ExecuteNonQuerytc("update tc_Devices set uniqueid='" + NEW_IMEI + "' where uniqueid='" + oldIMEI + "'");
            }
            else
            {
                result = "failed";
            }
        }
        else
        {
            result = "No Device Found";
        }
        return result;
    }
    internal static DataTable getSMSwallet(int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_SMS_WALLET @operation='get_sms',@CATEG_ID=" + categ_id + "");
        return dt;
    }
    internal static bool recharge_sms_wallet(int categ_id,int available,int used,int total)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_SMS_WALLET @operation='recharge_sms',@CATEG_ID=" + categ_id + ",@AVAILABLE=" + available + ",@USED=" + used + ",@TOTAL=" + total + "");
        return status;
    }
    //internal static DataTable get_live_packets(string imei)
    //{
    //    DataTable dt = Dal.ExecuteQueryDB("select top 1 * From SMVTS_RAWTRIPDATA where RAWTRIPDATA_DEVICE_IMEI='" + imei + "' and RAWTRIPDATA_DATE>= dateadd(mi, -1,getdate()) order by RAWTRIPDATA_DATE desc");
    //    return dt;
    //}
    internal static DataTable get_live_packets1(string deviceid,string Startdate,string Enddate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select top 300 * From SMVTS_RAWTRIPDATA where RAWTRIPDATA_DEVICE_ID='" + deviceid + "' and RAWTRIPDATA_DATE BETWEEN '"+ Startdate + "' AND '"+ Enddate + "' order by RAWTRIPDATA_DATE desc");
        //DataTable dt = Dal.ExecuteQuery_Prod("select top 50 * From SMVTS_RAWTRIPDATA where RAWTRIPDATA_DEVICE_ID='" + deviceid + "' and RAWTRIPDATA_DATE>= dateadd(day,datediff(day,0,GETDATE()),0) order by RAWTRIPDATA_DATE desc");
        return dt;
    }
    internal static DataTable get_live_packets(string imei)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select * From SMVTS_DEVICES where DEVICE_SERIALNUMBER='" + imei + "'");
        return dt;
    }
    internal static DataTable get_kerala_packets(string imei)
    {
        DataTable dt = Dal.ExecuteQueryDB("select top 1 * From SMVTS_KERALA where  createddate>= dateadd(mi, -1,getdate()) order by createddate desc");
        return dt;
    }
    public static DataTable Device_type(string device_name)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select dv.VEHICLE_COLOR from smvts_devices d inner join SMVTS_DASHBOARD_VIEW dv on dv.DEVICEID = d.DEVICE_ID where d.DEVICE_NAME like '%" + device_name + "%'");
        return dt;
    }
    internal static bool UpdateDriverDetails(int device_id,string drivername,string drivernumber)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_DRIVER_DETAILS @operation='update_driver_details', @DEVICE_ID=" + device_id + ",@driver_name='" + drivername + "',@driver_mobile='" + drivernumber + "'");
        return status;
    }
    internal static bool insert_device_test(string result)
    {
        bool status = Dal.ExecuteNonQueryConfig("insert into smvts_device_test(TEST_RESULT,CREATEDBY,CREATEDDATE)values('" + result + "','1','" + DateTime.Now.ToString() + "')");
        return status;
    }
    internal static DataTable get_UserLogin_for_DeviceTest(string username,string password)
    {
        DataTable dt = Dal.ExecuteConfig("select user_id,username from smvts_device_test_users where username='" + username + "' and password='" + password + "'");
        return dt;
    }
    internal static DataTable getAllSims()
    {
        DataTable dt = Dal.ExecuteConfig("exec USP_STOCK_UPLOAD @operation='get_All_Stock'");
        return dt;
    }
    internal  static DataTable check_sim(string simnumber)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_STOCK_UPLOAD @operation='check_sim_exists',@sim_number='" + simnumber + "'");
        return dt;
    }
    internal static bool insert_stock(SMVTS_ALL_SIMS_stock obj)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='upload_stock',@sim_number='" + obj.SIM_NUMBER + "',@sim_network='" + obj.SIM_NETWORK + "',@sim_iccid='" + obj.SIM_ICCD + "',@sim_apn='" + obj.SIM_APN + "',@sim_price='" + obj.SIM_PRICE + "',@sim_plan='" + obj.SIM_PLAN + "',@sim_active='" + obj.ACTIVE_DATE + "',@account_id='" + obj.ACCOUNT_ID + "'");
        return status;
    }
    internal static bool allocateToDistributor(int distributorid,string sims)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='allocate_to_distributor',@distributor_id=" + distributorid + ",@sel_sims='" + sims + "'");
        return status;
    }
    internal static bool allocateToDealer(int dealerID,string sims,int dist_id)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='allocate_to_dealer',@distributor_id="+ dist_id + ",@dealer_id=" + dealerID + ",@sel_sims='" + sims + "'");
        return status;
    }
    internal static DataTable getSimDataById(int sim_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_STOCK_UPLOAD @operation='select_By_Id',@sim_id='" + sim_id + "'");
        return dt;
    }
    internal static bool update_stock(SMVTS_ALL_SIMS_stock obj)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='update_stock',@sim_number='" + obj.SIM_NUMBER + "',@sim_network='" + obj.SIM_NETWORK + "',@sim_iccid='" + obj.SIM_ICCD + "',@sim_apn='" + obj.SIM_APN + "',@sim_price='" + obj.SIM_PRICE + "',@sim_plan='" + obj.SIM_PLAN + "',@sim_active='" + obj.ACTIVE_DATE + "',@account_id='" + obj.ACCOUNT_ID + "',@sim_id="+obj.SIM_ID+"");
        return status;
    }
    internal static bool rollback_allocation(int sim_id)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='rollback_allocation',@sim_id=" + sim_id + "");
        return status;
    }
    internal static DataTable getSimsByCustomer(string dealerID)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_STOCK_UPLOAD @operation='get_Sims_By_Dealer',@dealer_id='" + dealerID + "'");
        return dt;
    }
    internal static bool updateSimStatus(string oldsimnumber,int sim_id,string customerName,string reason)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='update_sim_status',@old_simnumber='" + oldsimnumber + "',@sim_id='" + sim_id + "',@customer_name='" + customerName + "',@reason='"+ reason + "'");
        return status;
    }
    internal static bool terminateSim(int sim_id,string sim_status,string sim_reason)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_STOCK_UPLOAD @operation='terminate_sim',@sim_status='" + sim_status + "',@sim_id='" + sim_id + "',@reason='"+ sim_reason + "'");
        return status;
    }
    internal static DataTable getSimsByNumber(string sim_number)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_STOCK_UPLOAD @operation='select_simnumber',@sim_number='" + sim_number + "'");
        return dt;
    }
    internal static DataTable getAllSims_By_Dealer(int dealer_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_STOCK_UPLOAD @operation='getAllDealerSims',@dealer_id=" + dealer_id + "");
        return dt;

    }
    internal static DataTable getAllNetworks()
    {
        DataTable dt = Dal.ExecuteConfig("exec USP_STOCK_UPLOAD @operation='select_all_networks'");
        return dt;
    }
    internal static DataTable getSimApns(int sim_id)
    {
        DataTable dt = Dal.ExecuteConfig("exec USP_STOCK_UPLOAD @operation='select_sim_apn',@sim_id='"+ sim_id + "'");
        return dt;
    }
    internal static DataTable getSimPlans(int sim_id)
    {
        DataTable dt = Dal.ExecuteConfig("exec USP_STOCK_UPLOAD @operation='select_sim_plans',@sim_id='" + sim_id + "'");
        return dt;
    }
    internal static DataTable getSimAccounts(int sim_id)
    {
        DataTable dt = Dal.ExecuteConfig("exec USP_STOCK_UPLOAD @operation='select_sim_accounts',@sim_id='" + sim_id + "'");
        return dt;
    }
    internal static DataTable ChecksimAlreadyExists(string sim_number)
    {
         DataTable dt = Dal.ExecuteQuery("exec USP_STOCK_UPLOAD @operation='check_sim',@sim_number='" + sim_number + "'");
        
        return dt;
    }
    internal static DataTable getCustomerAndVehicle(int userid,int deviceid)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_DRIVER_DETAILS @operation='get_customer_vehicle',@user_id='" + userid + "',@DEVICE_ID="+ deviceid + "");
        return dt;
        
    }
    internal static bool insert_student(student obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec [SP_BUSSCHEDULER] @operation='insert_student',@STUDENT_ID='" + obj.STUDENT_ID + "',@STUDENT_NAME='" + obj.STUDENT_NAME + "',@STUDENT_DOB='" + obj.STUDENT_DOB + "',@STUDENT_CLASS='" + obj.STUDENT_CLASS + "',@PARENT1_NAME='" + obj.PARENT1_NAME + "',@PARENT1_MOBILE='" + obj.PARENT1_MOBILE + "',@PARENT2_NAME='" + obj.PARENT2_NAME + "',@PARENT2_MOBILE='" + obj.PARENT2_MOBILE + "',@PARENT1_EMAIL='" + obj.PARENT1_EMAIL + "'");
        return status;
    }
    internal static bool update_student(student obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec [SP_BUSSCHEDULER] @operation='update_student',@STUDENT_ID='" + obj.STUDENT_ID + "',@STUDENT_NAME='" + obj.STUDENT_NAME + "',@STUDENT_DOB='" + obj.STUDENT_DOB + "',@STUDENT_CLASS='" + obj.STUDENT_CLASS + "',@PARENT1_NAME='" + obj.PARENT1_NAME + "',@PARENT1_MOBILE='" + obj.PARENT1_MOBILE + "',@PARENT2_NAME='" + obj.PARENT2_NAME + "',@PARENT2_MOBILE='" + obj.PARENT2_MOBILE + "',@ID=" + obj.ID + "");
        return status;
    }
    internal static DataTable get_students()
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec [SP_BUSSCHEDULER] @operation='select_students'");
        return dt;
    }

    internal static DataTable get_students1(String CategId)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec [SP_BUSSCHEDULER_Students] @operation='select_students',@CATEG_ID="+CategId+"");
        return dt;
    }
    internal static DataTable get_students_by_id(int id,String CategId)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec [SP_BUSSCHEDULER_Students] @operation='select_students_by_id',@ID=" + id + ",@CATEG_ID = "+CategId+"");
        return dt;
    }
    internal static DataTable get_order_exp(int days)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ORDER_EXP_ALERTS @operation='sent_alerts', @num_of_days=" + days + "");
        return dt;
    }
    internal static bool save_alerts_log(string mobile_number,string customer_name,string vehicle_no,string message,string output)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_ORDER_EXP_ALERTS @operation='save_log',@mobile_number='" + mobile_number + "',@response='" + message + "',@status='" + output + "',@customer_name='" + customer_name + "',@vehicle_number='"+ vehicle_no + "'");
        return status;
    }
    internal static DataTable get_renewal_data(string startdate)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_EXP_INSTALLATIONS @operation='getRenewed',@startdate='" + startdate + "'");
        return dt;
    }


    internal static DataTable GetRenewDashboard()
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_EXP_INSTALLATIONS @operation='get_renewal_count'");
        return dt;
    }
    internal static DataTable get_events()
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation='select_events'");
        return dt;
    }
    internal static DataTable get_events1()
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ALERTS @operation='select_events'");
        return dt;
    }
    internal static bool insert_events(ctpl_events_configuration obj)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_ALERTS @operation='insert_events',@EVENT_ID=" + obj.CONFIG_EVENTID + ",@CONFIG_APPALERT=" + obj.CONFIG_APPALERT + ",@CONFIG_SMSALERT=" + obj.CONFIG_SMSALERT + ",@CONFIG_EMAILALERT=" + obj.CONFIG_EMAILALERT + ",@CONFIG_CATEG_ID=" + obj.CONFIG_CATEG_ID + "");
        return status;
    }
    internal static bool insert_events1(ctpl_events_configuration obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_ALERTS @operation='insert_events',@EVENT_ID=" + obj.CONFIG_EVENTID + ",@CONFIG_APPALERT=" + obj.CONFIG_APPALERT + ",@CONFIG_SMSALERT=" + obj.CONFIG_SMSALERT + ",@CONFIG_EMAILALERT=" + obj.CONFIG_EMAILALERT + ",@CONFIG_CATEG_ID=" + obj.CONFIG_CATEG_ID + "");
        return status;
    }
    internal static DataTable getEventConfiguration(int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation='select_event_configaration',@CATEGORY_ID="+ categ_id + "");
        return dt;
    }
    internal static DataTable getEventConfiguration1(int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ALERTS @operation='select_event_configaration',@CATEGORY_ID=" + categ_id + "");
        return dt;
    }
    internal static DataTable getEventById(int config_id,int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation='select_by_Id',@EVENT_ID=" + config_id + ",@CONFIG_CATEG_ID=" + categ_id + "");
        return dt;
    }
    internal static DataTable getEventById1(int config_id, int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ALERTS @operation='select_by_Id',@EVENT_ID=" + config_id + ",@CONFIG_CATEG_ID=" + categ_id + "");
        return dt;
    }
    internal static bool update_events(ctpl_events_configuration obj)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_ALERTS @operation='update_events',@EVENT_ID=" + obj.CONFIG_EVENTID + ",@CONFIG_APPALERT=" + obj.CONFIG_APPALERT + ",@CONFIG_SMSALERT=" + obj.CONFIG_SMSALERT + ",@CONFIG_EMAILALERT=" + obj.CONFIG_EMAILALERT + "");
        return status;
    }
    internal static bool insert_config_detials(ctpl_eventconfig_details obj)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_ALERTS @operation='insert_config_details',@CONFIG_ID=" + obj.DETAILS_CONFIGID + ",@DETAILS_VEHICLEID='" + obj.DETAILS_VEHICLEID + "',@DETAILS_CATEGID=" + obj.DETAILS_CATEGID + ",@DETAILS_LANDMARKID=" + obj.DETAILS_LANDMARKID + ",@DETAILS_MOBILENO='" + obj.DETAILS_MOBILENO + "',@DETAILS_TOMAIL='" + obj.@DETAILS_TOMAIL + "',@DETAILS_CCMAIL='" + obj.DETAILS_CCMAIL + "',@DETAILS_BCCMAIL='" + obj.DETAILS_BCCMAIL + "'");
        return status;
    }
    internal static bool insert_config_detialsapp(ctpl_eventconfig_details obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_ALERTS @operation='insert_config_details',@CONFIG_ID=" + obj.DETAILS_CONFIGID + ",@DETAILS_VEHICLEID='" + obj.DETAILS_VEHICLEID + "',@DETAILS_CATEGID=" + obj.DETAILS_CATEGID + ",@DETAILS_LANDMARKID=" + obj.DETAILS_LANDMARKID + ",@DETAILS_MOBILENO='" + obj.DETAILS_MOBILENO + "',@DETAILS_TOMAIL='" + obj.@DETAILS_TOMAIL + "',@DETAILS_CCMAIL='" + obj.DETAILS_CCMAIL + "',@DETAILS_BCCMAIL='" + obj.DETAILS_BCCMAIL + "'");
        return status;
    }
    internal static bool update_config_detials(ctpl_eventconfig_details obj)
    {
        bool status = Dal.ExecuteNonQuery("exec USP_ALERTS @operation='update_config_details',@CONFIG_ID=" + obj.DETAILS_CONFIGID + ",@DETAILS_VEHICLEID='" + obj.DETAILS_VEHICLEID + "',@DETAILS_CATEGID=" + obj.DETAILS_CATEGID + ",@DETAILS_LANDMARKID=" + obj.DETAILS_LANDMARKID + ",@DETAILS_MOBILENO='" + obj.DETAILS_MOBILENO + "',@DETAILS_TOMAIL='" + obj.@DETAILS_TOMAIL + "',@DETAILS_CCMAIL='" + obj.DETAILS_CCMAIL + "',@DETAILS_BCCMAIL='" + obj.DETAILS_BCCMAIL + "'");
        return status;
    }
    internal static bool update_config_detialsapp(ctpl_eventconfig_details obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_ALERTS @operation='update_config_details',@CONFIG_ID=" + obj.DETAILS_CONFIGID + ",@DETAILS_VEHICLEID='" + obj.DETAILS_VEHICLEID + "',@DETAILS_CATEGID=" + obj.DETAILS_CATEGID + ",@DETAILS_LANDMARKID=" + obj.DETAILS_LANDMARKID + ",@DETAILS_MOBILENO='" + obj.DETAILS_MOBILENO + "',@DETAILS_TOMAIL='" + obj.@DETAILS_TOMAIL + "',@DETAILS_CCMAIL='" + obj.DETAILS_CCMAIL + "',@DETAILS_BCCMAIL='" + obj.DETAILS_BCCMAIL + "'");
        return status;
    }
    internal static DataTable getConfigDetails(int config_id,int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation='get_config_details',@CONFIG_ID=" + config_id + ",@DETAILS_CATEGID=" + categ_id + "");
        return dt;
    }
    internal static DataTable getConfigDetailsapp(int config_id, int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ALERTS @operation='get_config_details',@CONFIG_ID=" + config_id + ",@DETAILS_CATEGID=" + categ_id + "");
        return dt;
    }
    internal static DataTable getGeofenceByCateg(int categ_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation='get_geofence',@CATEGORY_ID=" + categ_id + "");
        return dt;
    }
    internal static DataTable  getVehicles(string categ_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation='get_vehicles',@CATEGORY_ID='" + categ_id + "'");
        return dt;
    }
    internal static DataTable getVehicles1(string categ_id)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ALERTS @operation='get_vehicles',@CATEGORY_ID='" + categ_id + "'");
        return dt;
    }
    internal static DataTable getGeofenceDetails(int detialsId)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation='get_geofence_details',@DETAILS_ID='" + detialsId + "'");
        return dt;
    }
    internal static DataTable getGeofenceDetails1(int detialsId)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ALERTS @operation='get_geofence_details',@DETAILS_ID='" + detialsId + "'");
        return dt;
    }
    internal static DataTable get_geofence_landmark(int categ_id,int config_id,int landmark_id)
    {
        DataTable dt = Dal.ExecuteQuery("exec USP_ALERTS @operation = 'get_geofence_landmark', @CONFIG_ID=" + config_id + ",@DETAILS_CATEGID=" + categ_id + ",@DETAILS_LANDMARKID="+ landmark_id + "");
        return dt;
    }
    internal static DataTable get_geofence_landmarkapp(int categ_id, int config_id, int landmark_id)
    {
        DataTable dt = Dal.ExecuteQuery_Prod("exec USP_ALERTS @operation = 'get_geofence_landmark', @CONFIG_ID=" + config_id + ",@DETAILS_CATEGID=" + categ_id + ",@DETAILS_LANDMARKID=" + landmark_id + "");
        return dt;
    }
    internal static bool update_geofence_detials(ctpl_eventconfig_details obj)
        {
            bool status = Dal.ExecuteNonQuery("exec USP_ALERTS @operation='update_geofence_landmark',@CONFIG_ID=" + obj.DETAILS_CONFIGID + ",@DETAILS_VEHICLEID='" + obj.DETAILS_VEHICLEID + "',@DETAILS_CATEGID=" + obj.DETAILS_CATEGID + ",@DETAILS_LANDMARKID=" + obj.DETAILS_LANDMARKID + ",@DETAILS_MOBILENO='" + obj.DETAILS_MOBILENO + "',@DETAILS_TOMAIL='" + obj.@DETAILS_TOMAIL + "',@DETAILS_CCMAIL='" + obj.DETAILS_CCMAIL + "',@DETAILS_BCCMAIL='" + obj.DETAILS_BCCMAIL + "'");
            return status;
        }
    internal static bool update_geofence_detialsapp(ctpl_eventconfig_details obj)
    {
        bool status = Dal.ExecuteNonQueryPROD("exec USP_ALERTS @operation='update_geofence_landmark',@CONFIG_ID=" + obj.DETAILS_CONFIGID + ",@DETAILS_VEHICLEID='" + obj.DETAILS_VEHICLEID + "',@DETAILS_CATEGID=" + obj.DETAILS_CATEGID + ",@DETAILS_LANDMARKID=" + obj.DETAILS_LANDMARKID + ",@DETAILS_MOBILENO='" + obj.DETAILS_MOBILENO + "',@DETAILS_TOMAIL='" + obj.@DETAILS_TOMAIL + "',@DETAILS_CCMAIL='" + obj.DETAILS_CCMAIL + "',@DETAILS_BCCMAIL='" + obj.DETAILS_BCCMAIL + "'");
        return status;
    }
    public static DataTable getvehicleimages(string Vehicle_model) 
    {
        DataTable dt = Dal.ExecuteQuery_Prod("select * from smvts_vehiclemodelimages  where VEHMODELIMAGES_VALUE = '" + Vehicle_model + "'");
        return dt;
    }

    internal static DataTable GetStudentParentsMobile(string MobileNo)
    {
        DataTable dtb = new DataTable();
        dtb = Dal.ExecuteQuery_Prod("EXEC USP_PARENTTRACKING_LOGINVERIFY @mobileno='" + MobileNo+"'");
        return dtb;
    }

    internal static DataTable FetchVehicleDetailsByPhone(string MobileNo)
    {
        DataTable dtb = new DataTable();
        dtb = Dal.FetchVehicleDetailsByPhone("exec FetchVehicleDetailsByPhone  @MobileNo='" + MobileNo + "'");
        return dtb;
    }

    internal static DataTable FetchVehicleTripDataDetails(string MobileNo,string VehicleNo)
    {
        DataTable dtb = new DataTable();
        dtb = Dal.FetchVehicleTripDataDetails("exec FetchVehicleTripDataDetails  @MobileNo='" + MobileNo + "',@VechNo='" + VehicleNo + "'");
        return dtb;
    }

    internal static DataTable GetParentTicketStatus(string MobileNo)
    {
        DataTable dtb = new DataTable();
        dtb = Dal.FetchParentTicketStatus1("exec FetchParentTicketStatus  @MobileNo='" + MobileNo + "'");
        return dtb;
    }

  
}












